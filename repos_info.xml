<add>
<doc>
	<field name="id">1</field>
	<field name="name">grit</field>
	<field name="description">**Grit is no longer maintained. Check out libgit2/rugged.** Grit gives you object oriented read/write access to Git repositories via Ruby.</field>
	<field name="owner">mojombo</field>
	<field name="main_language">Ruby</field>
	<field name="created_at">2007-10-29T14:37:16Z</field>
	<field name="updated_at">2014-03-03T11:19:13Z</field>
	<field name="url">https://api.github.com/repos/mojombo/grit</field>
	<field name="language">Ruby</field>
	<field name="branch">master</field>
	<field name="branch">no_raw_git</field>
	<field name="branch">patch-id</field>
	<field name="contributor">mojombo</field>
	<field name="contributor">schacon</field>
	<field name="contributor">rtomayko</field>
	<field name="contributor">technoweenie</field>
	<field name="contributor">defunkt</field>
	<field name="contributor">pjhyett</field>
	<field name="contributor">rsanheim</field>
	<field name="contributor">js</field>
	<field name="contributor">tmm1</field>
	<field name="contributor">therealadam</field>
	<field name="contributor">chapados</field>
	<field name="contributor">halorgium</field>
	<field name="contributor">dkowis</field>
	<field name="contributor">davetron5000</field>
	<field name="contributor">peff</field>
	<field name="contributor">Voker57</field>
	<field name="contributor">hans</field>
	<field name="contributor">cristibalan</field>
	<field name="contributor">koraktor</field>
	<field name="contributor">dysinger</field>
	<field name="contributor">vmg</field>
	<field name="contributor">bkeepers</field>
	<field name="contributor">cho45</field>
	<field name="contributor">bobbywilson0</field>
	<field name="contributor">darwin</field>
	<field name="contributor">cehoffman</field>
	<field name="contributor">dustin</field>
	<field name="contributor">franckverrot</field>
	<field name="contributor">hiroshi</field>
	<field name="contributor">igorw</field>
	<field name="commit_sha">5608567286e64a1c55c5e7fcd415364e04f8986e</field>
	<field name="commit_message">Merge pull request #183 from bkeepers/unmaintained

Clearly state the project status</field>
	<field name="commit_author_name">Brandon Keepers</field>
	<field name="commit_author_date">2014-02-03T19:24:07Z</field>
	<field name="commit_author_email">bkeepers@github.com</field>
	<field name="commit_committer_name">Brandon Keepers</field>
	<field name="commit_committer_date">2014-02-03T19:24:07Z</field>
	<field name="commit_committer_email">bkeepers@github.com</field>
	<field name="commit_file_name">README.md</field>
	<field name="commit_diff">@@ -1,6 +1,8 @@
 Grit
 ====
 
+**Grit is no longer maintained. Check out [rugged](https://github.com/libgit2/rugged).**
+
 Grit gives you object oriented read/write access to Git repositories via Ruby.
 The main goals are stability and performance. To this end, some of the
 interactions with Git repositories are done by shelling out to the system's</field>
	<field name="commit_sha">83d3124f8dc2fbd5542041d1f84e6153612d5ed9</field>
	<field name="commit_message">clarify status</field>
	<field name="commit_author_name">Brandon Keepers</field>
	<field name="commit_author_date">2014-01-28T19:04:39Z</field>
	<field name="commit_author_email">brandon@opensoul.org</field>
	<field name="commit_committer_name">Brandon Keepers</field>
	<field name="commit_committer_date">2014-01-28T19:04:39Z</field>
	<field name="commit_committer_email">brandon@opensoul.org</field>
	<field name="commit_file_name">README.md</field>
	<field name="commit_diff">@@ -1,6 +1,8 @@
 Grit
 ====
 
+**Grit is no longer maintained. Check out [rugged](https://github.com/libgit2/rugged).**
+
 Grit gives you object oriented read/write access to Git repositories via Ruby.
 The main goals are stability and performance. To this end, some of the
 interactions with Git repositories are done by shelling out to the system's</field>
	<field name="commit_sha">b49a6ff4ccd169eef6671263ccb29d3ead957697</field>
	<field name="commit_message">Fix Tempfile usage under ruby 1.8.7

There's no third argument to Tempfile#open under 1.8.7. The default
mode is w+ which should be fine and there's no encoding support so
the binary flag doesn't matter.</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2013-02-23T22:36:43Z</field>
	<field name="commit_author_email">rtomayko@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2013-02-23T22:36:43Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">loose.rb</field>
	<field name="commit_diff">@@ -64,18 +64,23 @@ def get_raw_object(buf)
         # write an object to a temporary file, then atomically rename it
         # into place; this ensures readers never see a half-written file
         def safe_write(path, content)
-          Tempfile.open("tmp_obj_", File.dirname(path), :opt = "wb") do |f|
+          f =
+            if RUBY_VERSION = '1.9'
+              Tempfile.open("tmp_obj_", File.dirname(path), :opt = "wb")
+            else
+              Tempfile.open("tmp_obj_", File.dirname(path))
+            end
+          begin
             f.write content
             f.fsync
-            f.close
-            begin
-              File.link(f.path, path)
-            rescue Errno::EEXIST
-              # The path already exists; we raced with another process,
-              # but it's OK, because by definition the content is the
-              # same. So we can just ignore the error.
-            end
+            File.link(f.path, path)
+          rescue Errno::EEXIST
+            # The path already exists; we raced with another process,
+            # but it's OK, because by definition the content is the
+            # same. So we can just ignore the error.
+          ensure
             f.unlink
+            f.close
           end
         end
 </field>
	<field name="commit_sha">58621d933b4aa846e87f943b48f3f91b65dfb191</field>
	<field name="commit_message">Merge pull request #157 from github/atomic-object-writes

Atomic object writes</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2013-02-23T21:53:16Z</field>
	<field name="commit_author_email">rtomayko@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2013-02-23T21:53:16Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">loose.rb</field>
	<field name="commit_diff">@@ -12,6 +12,7 @@
 require 'zlib'
 require 'digest/sha1'
 require 'grit/git-ruby/internal/raw_object'
+require 'tempfile'
 
 module Grit
   module GitRuby
@@ -60,6 +61,24 @@ def get_raw_object(buf)
           return RawObject.new(type, content)
         end
 
+        # write an object to a temporary file, then atomically rename it
+        # into place; this ensures readers never see a half-written file
+        def safe_write(path, content)
+          Tempfile.open("tmp_obj_", File.dirname(path), :opt = "wb") do |f|
+            f.write content
+            f.fsync
+            f.close
+            begin
+              File.link(f.path, path)
+            rescue Errno::EEXIST
+              # The path already exists; we raced with another process,
+              # but it's OK, because by definition the content is the
+              # same. So we can just ignore the error.
+            end
+            f.unlink
+          end
+        end
+
         # currently, I'm using the legacy format because it's easier to do
         # this function takes content and a type and writes out the loose object and returns a sha
         def put_raw_object(content, type)
@@ -76,9 +95,7 @@ def put_raw_object(content, type)
             content = Zlib::Deflate.deflate(store)
 
             FileUtils.mkdir_p(@directory+'/'+sha1[0...2])
-            File.open(path, 'wb') do |f|
-              f.write content
-            end
+            safe_write(path, content)
           end
           return sha1
         end</field>
	<field name="commit_sha">cdf0fdb3e19237a2fe8a2667d774a25b5fa46e76</field>
	<field name="commit_message">fsync loose objects before moving into place

When we write a loose object to disk, we simply close the
file object before moving it into place. If the machine
crashes shortly after our write, the contents may not have
been committed to disk (depending your filesystem, usually
the metadata is, and you end up with a corrupt, zero-length
loose object file).

This is especially bad because we report that the object is
successfully written, which means we may have updated refs
to point to it. A corrupt object at that point means not
only does the operation fail, but the repository is left in
a corrupted and unusable state.

We can fix this by calling fsync on the object file before
linking it into place. Between this and the previous commit,
our object writing should now behave exactly like git's
internal routines.</field>
	<field name="commit_author_name">Jeff King</field>
	<field name="commit_author_date">2013-02-22T02:50:07Z</field>
	<field name="commit_author_email">peff@peff.net</field>
	<field name="commit_committer_name">Jeff King</field>
	<field name="commit_committer_date">2013-02-22T02:50:07Z</field>
	<field name="commit_committer_email">peff@peff.net</field>
	<field name="commit_file_name">loose.rb</field>
	<field name="commit_diff">@@ -66,6 +66,7 @@ def get_raw_object(buf)
         def safe_write(path, content)
           Tempfile.open("tmp_obj_", File.dirname(path), :opt = "wb") do |f|
             f.write content
+            f.fsync
             f.close
             begin
               File.link(f.path, path)</field>
	<field name="commit_sha">00a00543a7df025b6503de66b3b5aca4ddaa799b</field>
	<field name="commit_message">make object writes atomic

When Grit writes a loose object via the LooseStorage class,
it just opens the object file and starts writing. This works
most of the time, but can be a problem in some corner cases,
including:

  1. If another process tries to write the same object
     simultaneously, the writes may be interleaved and the
     object can be corrupted.

  2. If another process tries to read the object
     simultaneously, it may see the object in a half-written
     state.

  3. If the process or machine crashes during the write, we
     may leave a half-written corrupt object.

This can be solved by writing the object to a temporary file
and linking it into place. This is the same strategy used by
git itself.</field>
	<field name="commit_author_name">Jeff King</field>
	<field name="commit_author_date">2013-02-22T02:40:24Z</field>
	<field name="commit_author_email">peff@peff.net</field>
	<field name="commit_committer_name">Jeff King</field>
	<field name="commit_committer_date">2013-02-22T02:49:53Z</field>
	<field name="commit_committer_email">peff@peff.net</field>
	<field name="commit_file_name">loose.rb</field>
	<field name="commit_diff">@@ -12,6 +12,7 @@
 require 'zlib'
 require 'digest/sha1'
 require 'grit/git-ruby/internal/raw_object'
+require 'tempfile'
 
 module Grit
   module GitRuby
@@ -60,6 +61,23 @@ def get_raw_object(buf)
           return RawObject.new(type, content)
         end
 
+        # write an object to a temporary file, then atomically rename it
+        # into place; this ensures readers never see a half-written file
+        def safe_write(path, content)
+          Tempfile.open("tmp_obj_", File.dirname(path), :opt = "wb") do |f|
+            f.write content
+            f.close
+            begin
+              File.link(f.path, path)
+            rescue Errno::EEXIST
+              # The path already exists; we raced with another process,
+              # but it's OK, because by definition the content is the
+              # same. So we can just ignore the error.
+            end
+            f.unlink
+          end
+        end
+
         # currently, I'm using the legacy format because it's easier to do
         # this function takes content and a type and writes out the loose object and returns a sha
         def put_raw_object(content, type)
@@ -76,9 +94,7 @@ def put_raw_object(content, type)
             content = Zlib::Deflate.deflate(store)
 
             FileUtils.mkdir_p(@directory+'/'+sha1[0...2])
-            File.open(path, 'wb') do |f|
-              f.write content
-            end
+            safe_write(path, content)
           end
           return sha1
         end</field>
	<field name="commit_sha">75cf040563bc691a25002e4fc268243e89797772</field>
	<field name="commit_message">Merge pull request #149 from shepmaster/patch-1

Correct spelling of "represent"</field>
	<field name="commit_author_name">Zach Holman</field>
	<field name="commit_author_date">2012-12-17T04:32:55Z</field>
	<field name="commit_author_email">zach@zachholman.com</field>
	<field name="commit_committer_name">Zach Holman</field>
	<field name="commit_committer_date">2012-12-17T04:32:55Z</field>
	<field name="commit_committer_email">zach@zachholman.com</field>
	<field name="commit_file_name">repo.rb</field>
	<field name="commit_diff">@@ -399,7 +399,7 @@ def fast_forwardable?(to, from)
     # The Commits objects that are newer than the specified date.
     # Commits are returned in chronological order.
     #   +start+ is the branch/commit name (default 'master')
-    #   +since+ is a string represeting a date/time
+    #   +since+ is a string representing a date/time
     #   +extra_options+ is a hash of extra options
     #
     # Returns Grit::Commit[] (baked)</field>
	<field name="commit_sha">1e70a6902ebb0e3542cc365110ce2228e2f0a9fc</field>
	<field name="commit_message">Correct spelling of "represent"</field>
	<field name="commit_author_name">Jake Goulding</field>
	<field name="commit_author_date">2012-12-02T16:06:51Z</field>
	<field name="commit_author_email">shepmaster@mac.com</field>
	<field name="commit_committer_name">Jake Goulding</field>
	<field name="commit_committer_date">2012-12-02T16:06:51Z</field>
	<field name="commit_committer_email">shepmaster@mac.com</field>
	<field name="commit_file_name">repo.rb</field>
	<field name="commit_diff">@@ -399,7 +399,7 @@ def fast_forwardable?(to, from)
     # The Commits objects that are newer than the specified date.
     # Commits are returned in chronological order.
     #   +start+ is the branch/commit name (default 'master')
-    #   +since+ is a string represeting a date/time
+    #   +since+ is a string representing a date/time
     #   +extra_options+ is a hash of extra options
     #
     # Returns Grit::Commit[] (baked)</field>
	<field name="commit_sha">4cdb531daea7551d8e69e52744f75187c51cfa80</field>
	<field name="commit_message">Merge pull request #140 from sbryant/fix_rev_parse

Fix an edge case in rev_parse.</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2012-09-04T21:54:08Z</field>
	<field name="commit_author_email">rtomayko@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2012-09-04T21:54:08Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">git-ruby.rb</field>
	<field name="commit_diff">@@ -75,7 +75,10 @@ def rev_list(options, *refs)
     def rev_parse(options, string)
       raise RuntimeError, "invalid string: #{string.inspect}" unless string.is_a?(String)
 
-      if string =~ /\.\./
+      # Split ranges, but don't split when specifying a ref:path.
+      # Don't split HEAD:some/path/in/repo..txt
+      # Do split sha1..sha2
+      if string !~ /:/ && string =~ /\.\./
         (sha1, sha2) = string.split('..')
         return [rev_parse({}, sha1), rev_parse({}, sha2)]
       end</field>
	<field name="commit_sha">3811d8137e361a3874db514eeda1e4ea5cdbe062</field>
	<field name="commit_message">Fix an edge case in rev_parse.

Make sure we don't split on a `ref:path' revision.</field>
	<field name="commit_author_name">Sean Bryant</field>
	<field name="commit_author_date">2012-09-02T20:31:12Z</field>
	<field name="commit_author_email">sbryant@github.com</field>
	<field name="commit_committer_name">Sean Bryant</field>
	<field name="commit_committer_date">2012-09-02T20:31:12Z</field>
	<field name="commit_committer_email">sbryant@github.com</field>
	<field name="commit_file_name">git-ruby.rb</field>
	<field name="commit_diff">@@ -75,7 +75,10 @@ def rev_list(options, *refs)
     def rev_parse(options, string)
       raise RuntimeError, "invalid string: #{string.inspect}" unless string.is_a?(String)
 
-      if string =~ /\.\./
+      # Split ranges, but don't split when specifying a ref:path.
+      # Don't split HEAD:some/path/in/repo..txt
+      # Do split sha1..sha2
+      if string !~ /:/ && string =~ /\.\./
         (sha1, sha2) = string.split('..')
         return [rev_parse({}, sha1), rev_parse({}, sha2)]
       end</field>
	<field name="commit_sha">83658e5a82f70e6dedbc12cb9a20d02a18338efe</field>
	<field name="commit_message">Merge pull request #111 from pda/patch-2

Minor typo fix in documentation: “buy” → “by”.</field>
	<field name="commit_author_name">Aman Gupta</field>
	<field name="commit_author_date">2012-08-01T18:26:36Z</field>
	<field name="commit_author_email">aman@tmm1.net</field>
	<field name="commit_committer_name">Aman Gupta</field>
	<field name="commit_committer_date">2012-08-01T18:26:36Z</field>
	<field name="commit_committer_email">aman@tmm1.net</field>
	<field name="commit_file_name">git-ruby.rb</field>
	<field name="commit_diff">@@ -3,7 +3,7 @@
 module Grit
 
   # the functions in this module intercept the calls to git binary
-  # made buy the grit objects and attempts to run them in pure ruby
+  # made by the grit objects and attempts to run them in pure ruby
   # if it will be faster, or if the git binary is not available (!!TODO!!)
   module GitRuby
 </field>
	<field name="commit_sha">27d113314a448e844cba874641079c3e5cd53a83</field>
	<field name="commit_message">Minor typo fix: “buy” → “by”.</field>
	<field name="commit_author_name">Paul Annesley</field>
	<field name="commit_author_date">2012-04-27T04:49:54Z</field>
	<field name="commit_author_email">paul@annesley.cc</field>
	<field name="commit_committer_name">Paul Annesley</field>
	<field name="commit_committer_date">2012-04-27T04:49:54Z</field>
	<field name="commit_committer_email">paul@annesley.cc</field>
	<field name="commit_file_name">git-ruby.rb</field>
	<field name="commit_diff">@@ -3,7 +3,7 @@
 module Grit
 
   # the functions in this module intercept the calls to git binary
-  # made buy the grit objects and attempts to run them in pure ruby
+  # made by the grit objects and attempts to run them in pure ruby
   # if it will be faster, or if the git binary is not available (!!TODO!!)
   module GitRuby
 </field>
	<field name="commit_sha">7219ef6f98808069617fc0ac9e80f3bdfc68e990</field>
	<field name="commit_message">Release 2.5.0</field>
	<field name="commit_author_name">Tom Preston-Werner</field>
	<field name="commit_author_date">2012-04-22T07:02:35Z</field>
	<field name="commit_author_email">tom@mojombo.com</field>
	<field name="commit_committer_name">Tom Preston-Werner</field>
	<field name="commit_committer_date">2012-04-22T07:02:35Z</field>
	<field name="commit_committer_email">tom@mojombo.com</field>
	<field name="commit_file_name">History.txt</field>
	<field name="commit_diff">@@ -1,4 +1,4 @@
-== HEAD
+== 2.5.0 / 2012-04-22
   * Minor Enhancements
     * 100% Git-compliant actor creation.
     * Handle newlines in author/committer.</field>
	<field name="commit_file_name">grit.gemspec</field>
	<field name="commit_diff">@@ -4,8 +4,8 @@ Gem::Specification.new do |s|
   s.rubygems_version = '1.3.5'
 
   s.name              = 'grit'
-  s.version           = '2.4.1'
-  s.date              = '2011-01-13'
+  s.version           = '2.5.0'
+  s.date              = '2012-04-22'
   s.rubyforge_project = 'grit'
 
   s.summary     = "Ruby Git bindings."</field>
	<field name="commit_file_name">grit.rb</field>
	<field name="commit_diff">@@ -49,7 +49,7 @@
 require 'grit/merge'
 
 module Grit
-  VERSION = '2.4.1'
+  VERSION = '2.5.0'
 
   class  self
     # Set +debug+ to true to log all git calls and responses</field>
	<field name="commit_sha">3dd591fe4007fa9b4aaa062e082a86e1cbf4bbf7</field>
	<field name="commit_message">Update History.</field>
	<field name="commit_author_name">Tom Preston-Werner</field>
	<field name="commit_author_date">2012-04-22T06:58:44Z</field>
	<field name="commit_author_email">tom@mojombo.com</field>
	<field name="commit_committer_name">Tom Preston-Werner</field>
	<field name="commit_committer_date">2012-04-22T06:58:44Z</field>
	<field name="commit_committer_email">tom@mojombo.com</field>
	<field name="commit_file_name">History.txt</field>
	<field name="commit_diff">@@ -1,8 +1,18 @@
-== git
+== HEAD
+  * Minor Enhancements
+    * 100% Git-compliant actor creation.
+    * Handle newlines in author/committer.
+    * Grit::Git check_applies/patch related methods take command hash.
+    * Tags api now resty.
+    * Remove all the grit jruby hacks in favor of updated posix-spawn.
+    * Add Grit::Commit#patch_id.
+    * Support large packfiles with index v2.
   * Bug Fixes
     * Fix Loose Objects with non-ASCII content in Ruby 1.9
     * Fix bugs in Grit::Repo #objects, #commit_objects, and #diff_objects
       due to passing multiple arguments in a single argv element.
+    * ruby rev_list passes --verify to native rev_parse in fallback.
+    * Git ls-tree raises on non-zero exit.
 
 == 2.4.1 / 2011-01-13
   * Minor Enhancements</field>
	<field name="commit_sha">f87da75a4ab2f2de7201370c9e8b1da99e703eef</field>
	<field name="commit_message">omg grit why do you try to be as slow as possible with everything</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2012-04-22T06:54:55Z</field>
	<field name="commit_author_email">ryan@github.com</field>
	<field name="commit_committer_name">Aman Gupta</field>
	<field name="commit_committer_date">2012-04-22T06:54:55Z</field>
	<field name="commit_committer_email">aman@tmm1.net</field>
	<field name="commit_file_name">commit.rb</field>
	<field name="commit_diff">@@ -60,7 +60,7 @@ def initialize(repo, id, parents, tree, author, authored_date, committer, commit
       @committer = committer
       @committed_date = committed_date
       @message = message.join("\n")
-      @short_message = message.select { |x| !x.strip.empty? }[0] || ''
+      @short_message = message.find { |x| !x.strip.empty? } || ''
     end
 
     def id_abbrev</field>
	<field name="commit_sha">51f8fc1eb8d4340a258eb722787addb4972e6bd5</field>
	<field name="commit_message">Grit::Blame can load lines from cache</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2012-04-22T06:54:41Z</field>
	<field name="commit_author_email">ryan@github.com</field>
	<field name="commit_committer_name">Aman Gupta</field>
	<field name="commit_committer_date">2012-04-22T06:54:41Z</field>
	<field name="commit_committer_email">aman@tmm1.net</field>
	<field name="commit_file_name">blame.rb</field>
	<field name="commit_diff">@@ -4,12 +4,16 @@ class Blame
 
     attr_reader :lines
 
-    def initialize(repo, file, commit)
+    def initialize(repo, file, commit, lines=nil)
       @repo = repo
       @file = file
       @commit = commit
-      @lines = []
-      load_blame
+      if lines.nil?
+        @lines = []
+        load_blame
+      else
+        @lines = lines
+      end
     end
 
     def load_blame</field>
	<field name="commit_sha">3fc864f3c637e06e2fa7a81f6b48a5df58a9bc5b</field>
	<field name="commit_message">git ls-tree raises on non-zero exit</field>
	<field name="commit_author_name">Simon Rozet</field>
	<field name="commit_author_date">2012-01-27T01:05:32Z</field>
	<field name="commit_author_email">simon@rozet.name</field>
	<field name="commit_committer_name">Simon Rozet</field>
	<field name="commit_committer_date">2012-01-27T01:05:32Z</field>
	<field name="commit_committer_email">simon@rozet.name</field>
	<field name="commit_file_name">tree.rb</field>
	<field name="commit_diff">@@ -15,7 +15,7 @@ class Tree
     #
     # Returns Grit::Tree (baked)
     def self.construct(repo, treeish, paths = [])
-      output = repo.git.ls_tree({}, treeish, *paths)
+      output = repo.git.ls_tree({:raise = true}, treeish, *paths)
       self.allocate.construct_initialize(repo, treeish, output)
     end
 </field>
	<field name="commit_sha">8b5449e559879d74224bce3c9c52b0d17bbc0b4b</field>
	<field name="commit_message">Merge pull request #103 from peff/master

support large packfiles with index v2</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2011-12-29T23:25:44Z</field>
	<field name="commit_author_email">rtomayko@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2011-12-29T23:25:44Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">pack.rb</field>
	<field name="commit_diff">@@ -30,6 +30,7 @@ class PackStorage
         SHA1Size = 20
         IdxOffsetSize = 4
         OffsetSize = 4
+        ExtendedOffsetSize = 8
         CrcSize = 4
         OffsetStart = FanOutCount * IdxOffsetSize
         SHA1Start = OffsetStart + OffsetSize
@@ -214,6 +215,12 @@ def find_object_in_index(idx, sha1)
               else
                 pos = OffsetStart + (@size * (SHA1Size + CrcSize)) + (mid * OffsetSize)
                 offset = idx[pos, OffsetSize].unpack('N')[0]
+                if offset & 0x80000000  0
+                  offset &= 0x7fffffff
+                  pos = OffsetStart + (@size * (SHA1Size + CrcSize + OffsetSize)) + (offset * ExtendedOffsetSize)
+                  words = idx[pos, ExtendedOffsetSize].unpack('NN')
+                  offset = (words[0]  32) | words[1]
+                end
                 return offset
               end
             else</field>
	<field name="commit_sha">7b5c49eff7c7f12866e5ff3ca554635fed5c7c11</field>
	<field name="commit_message">support large packfiles with index v2

Grit has known about the "v2" pack index format for a while.
However, it never actually handled the extended offsets that
we get when indexing packfiles that are larger than 2
gigabytes.

When an object is at an offset smaller than 2G, its byte
offset into the packfile is placed in the first table of
4-byte offset values. If it's past that, then the MSB is set
on its offset in the 4-byte table, and the rest of the
4-byte integer specifies an offset into an 8-byte table that
follows.

With this patch, grit should handle arbitrarily large packs
(limited only by the pack format itself).

A few notes on the patch itself:

  - I unpack using two "N" formats instead of "Q", because
    "Q" is not available in ruby  1.9.3

  - No automated test is included, because you need a
    packfile that is greater than 2G. I did test it by hand.</field>
	<field name="commit_author_name">Jeff King</field>
	<field name="commit_author_date">2011-12-23T08:09:50Z</field>
	<field name="commit_author_email">peff@peff.net</field>
	<field name="commit_committer_name">Jeff King</field>
	<field name="commit_committer_date">2011-12-23T08:16:04Z</field>
	<field name="commit_committer_email">peff@peff.net</field>
	<field name="commit_file_name">pack.rb</field>
	<field name="commit_diff">@@ -30,6 +30,7 @@ class PackStorage
         SHA1Size = 20
         IdxOffsetSize = 4
         OffsetSize = 4
+        ExtendedOffsetSize = 8
         CrcSize = 4
         OffsetStart = FanOutCount * IdxOffsetSize
         SHA1Start = OffsetStart + OffsetSize
@@ -214,6 +215,12 @@ def find_object_in_index(idx, sha1)
               else
                 pos = OffsetStart + (@size * (SHA1Size + CrcSize)) + (mid * OffsetSize)
                 offset = idx[pos, OffsetSize].unpack('N')[0]
+                if offset & 0x80000000  0
+                  offset &= 0x7fffffff
+                  pos = OffsetStart + (@size * (SHA1Size + CrcSize + OffsetSize)) + (offset * ExtendedOffsetSize)
+                  words = idx[pos, ExtendedOffsetSize].unpack('NN')
+                  offset = (words[0]  32) | words[1]
+                end
                 return offset
               end
             else</field>
	<field name="commit_sha">ff015074ef35bd94cba943f9c0f98e161ab5851c</field>
	<field name="commit_message">100% Git-compliant actor creation

Some more tweaks here:

	- Do not use `strftime`, because it's not assured
	to be cross-platform

	- Use C-like string formatting for Great Glory
	When Printing Numbers.

	- Always print an email address -- even if we don't
	have one. A missing email field will crash `fsck`.</field>
	<field name="commit_author_name">Vicent Marti</field>
	<field name="commit_author_date">2011-08-20T05:46:50Z</field>
	<field name="commit_author_email">tanoku@gmail.com</field>
	<field name="commit_committer_name">Vicent Marti</field>
	<field name="commit_committer_date">2011-08-20T05:50:25Z</field>
	<field name="commit_committer_email">tanoku@gmail.com</field>
	<field name="commit_file_name">actor.rb</field>
	<field name="commit_diff">@@ -34,11 +34,13 @@ def self.from_string(str)
     #
     # Returns a String.
     def output(time)
-      out = @name.to_s.dup
-      if @email
-        out  " #{@email}"
-      end
-      out  time.strftime(" %s %z")
+      offset = time.utc_offset / 60
+      "%s %s %d %+.2d%.2d" % [
+        @name,
+        @email || "null",
+        time.to_i,
+        offset / 60,
+        offset.abs % 60]
     end
 
     # Pretty object inspection</field>
	<field name="commit_sha">e33fad9e988f6014d9872c264e4f342941d9f6a6</field>
	<field name="commit_message">Properly print time offsets</field>
	<field name="commit_author_name">Vicent Marti</field>
	<field name="commit_author_date">2011-08-16T23:16:12Z</field>
	<field name="commit_author_email">tanoku@gmail.com</field>
	<field name="commit_committer_name">Chris Wanstrath</field>
	<field name="commit_committer_date">2011-08-17T19:03:40Z</field>
	<field name="commit_committer_email">chris@ozmm.org</field>
	<field name="commit_file_name">actor.rb</field>
	<field name="commit_diff">@@ -38,9 +38,7 @@ def output(time)
       if @email
         out  " #{@email}"
       end
-      hours = (time.utc_offset.to_f / 3600).to_i # 60 * 60, seconds to hours
-      rem   = time.utc_offset.abs % 3600
-      out  " #{time.to_i} #{hours = 0 ? :+ : :-}#{hours.abs.to_s.rjust(2, '0')}#{rem.to_s.rjust(2, '0')}"
+      out  time.strftime(" %s %z")
     end
 
     # Pretty object inspection</field>
	<field name="commit_sha">a9dbc43a2f8b82ce7698fa118466177a2929e45e</field>
	<field name="commit_message">handle newlines in author / committer

This shouldn't technically be allowed but we've seen a few cases of
it in existing repositories on github.com so let's just deal with
it.</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2011-07-10T21:24:38Z</field>
	<field name="commit_author_email">rtomayko@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2011-07-10T22:27:04Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">commit.rb</field>
	<field name="commit_diff">@@ -148,8 +148,13 @@ def self.list_from_string(repo, text)
         parents = []
         parents  lines.shift.split.last while lines.first =~ /^parent/
 
-        author, authored_date = self.actor(lines.shift)
-        committer, committed_date = self.actor(lines.shift)
+        author_line = lines.shift
+        author_line  lines.shift if lines[0] !~ /^committer /
+        author, authored_date = self.actor(author_line)
+
+        committer_line = lines.shift
+        committer_line  lines.shift if lines[0] && lines[0] != '' && lines[0] !~ /^encoding/
+        committer, committed_date = self.actor(committer_line)
 
         # not doing anything with this yet, but it's sometimes there
         encoding = lines.shift.split.last if lines.first =~ /^encoding/</field>
	<field name="commit_sha">568935ddda3168ddbe876163ace842eeb3d62e0a</field>
	<field name="commit_message">Merge pull request #78 from kevinsawicki/patch-1

Fix typo in tree method doc</field>
	<field name="commit_author_name">Aman Gupta</field>
	<field name="commit_author_date">2011-07-01T23:02:45Z</field>
	<field name="commit_author_email">aman@tmm1.net</field>
	<field name="commit_committer_name">Aman Gupta</field>
	<field name="commit_committer_date">2011-07-01T23:02:45Z</field>
	<field name="commit_committer_email">aman@tmm1.net</field>
	<field name="commit_file_name">repo.rb</field>
	<field name="commit_diff">@@ -480,7 +480,7 @@ def diff_objects(commit_sha, parents = true)
 
     # The Tree object for the given treeish reference
     #   +treeish+ is the reference (default 'master')
-    #   +paths+ is an optional Array of directory paths to restrict the tree (deafult [])
+    #   +paths+ is an optional Array of directory paths to restrict the tree (default [])
     #
     # Examples
     #   repo.tree('master', ['lib/'])</field>
	<field name="commit_sha">8e2715471201a764bb172775dd9892e469c6fc28</field>
	<field name="commit_message">Fix typo in tree method doc</field>
	<field name="commit_author_name">Kevin Sawicki</field>
	<field name="commit_author_date">2011-07-01T16:59:50Z</field>
	<field name="commit_author_email">kevin@github.com</field>
	<field name="commit_committer_name">Kevin Sawicki</field>
	<field name="commit_committer_date">2011-07-01T16:59:50Z</field>
	<field name="commit_committer_email">kevin@github.com</field>
	<field name="commit_file_name">repo.rb</field>
	<field name="commit_diff">@@ -480,7 +480,7 @@ def diff_objects(commit_sha, parents = true)
 
     # The Tree object for the given treeish reference
     #   +treeish+ is the reference (default 'master')
-    #   +paths+ is an optional Array of directory paths to restrict the tree (deafult [])
+    #   +paths+ is an optional Array of directory paths to restrict the tree (default [])
     #
     # Examples
     #   repo.tree('master', ['lib/'])</field>
	<field name="commit_sha">cb2644c4e8b472b7d4021ccf6e6d5496a29269b0</field>
	<field name="commit_message">remove tests for stuff @schacon removed</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2011-06-22T07:00:02Z</field>
	<field name="commit_author_email">rtomayko@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2011-06-22T07:00:02Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">test_blame_tree.rb</field>
	<field name="commit_diff">@@ -1,33 +0,0 @@
-require File.dirname(__FILE__) + '/helper'
-require 'pp'
-
-class TestBlameTree  Test::Unit::TestCase
-
-  def setup
-    @git = Git.new(File.join(File.dirname(__FILE__), *%w[dot_git]))
-  end
-
-  def test_blame_tree
-    commit = '2d3acf90f35989df8f262dc50beadc4ee3ae1560'
-    tree = @git.blame_tree(commit)
-    last_commit_sha = tree['History.txt']
-    assert_equal last_commit_sha, '7bcc0ee821cdd133d8a53e8e7173a334fef448aa'
-  end
-
-  def test_blame_tree_path
-    commit = '2d3acf90f35989df8f262dc50beadc4ee3ae1560'
-    tree = @git.blame_tree(commit, 'lib')
-    last_commit_sha = tree['lib/grit.rb']
-    assert_equal last_commit_sha, '5a0943123f6872e75a9b1dd0b6519dd42a186fda'
-    last_commit_sha = tree['lib/grit']
-    assert_equal last_commit_sha, '2d3acf90f35989df8f262dc50beadc4ee3ae1560'
-  end
-
-  def test_blame_tree_multi_path
-    commit = '2d3acf90f35989df8f262dc50beadc4ee3ae1560'
-    tree = @git.blame_tree(commit, 'lib/grit')
-    last_commit_sha = tree['lib/grit/diff.rb']
-    assert_equal last_commit_sha, '22825175e37f22c9418d756ca69b574d75602994'
-  end
-
-end
\ No newline at end of file</field>
	<field name="commit_file_name">test_file_index.rb</field>
	<field name="commit_diff">@@ -1,56 +0,0 @@
-require File.dirname(__FILE__) + '/helper'
-
-class TestFileIndex  Test::Unit::TestCase
-
-  def setup_a
-    @findex = Grit::GitRuby::FileIndex.new(File.join(File.dirname(__FILE__), *%w[dot_git]))
-    @commit = 'c12f398c2f3c4068ca5e01d736b1c9ae994b2138'
-  end
-
-  def test_count_all
-    setup_a
-    assert_equal 107, @findex.count_all
-  end
-
-  def test_count
-    setup_a
-    assert_equal 20, @findex.count(@commit)
-  end
-
-  def test_files
-    setup_a
-    files = @findex.files(@commit)
-    assert_equal 4, files.size
-    assert_equal "lib/grit/blob.rb", files.first
-  end
-
-  def test_commits_for
-    setup_a
-    commits = @findex.commits_for('lib/grit/blob.rb')
-    assert commits.include?('3e0955045cb189a7112015c26132152a94f637bf')
-    assert_equal 8, commits.size
-  end
-
-  def test_last_commits_array
-    setup_a
-    arr = @findex.last_commits(@commit, ['lib/grit/git.rb', 'lib/grit/actor.rb', 'lib/grit/commit.rb'])
-    assert_equal '74fd66519e983a0f29e16a342a6059dbffe36020', arr['lib/grit/git.rb']
-    assert_equal @commit, arr['lib/grit/commit.rb']
-    assert_equal nil, arr['lib/grit/actor.rb']
-  end
-
-  def test_last_commits_pattern
-    setup_a
-    arr = @findex.last_commits(@commit, /lib\/grit\/[^\/]*$/)
-    assert_equal 10, arr.size
-    assert_equal @commit, arr['lib/grit/commit.rb']
-    assert_equal nil, arr['lib/grit/actor.rb']
-  end
-
-  def test_last_commits_array
-    setup_a
-    arr = @findex.last_commits(@commit, ['lib/grit.rb', 'lib/grit/'])
-    assert_equal @commit, arr['lib/grit/']
-  end
-
-end
\ No newline at end of file</field>
	<field name="commit_sha">e1160265209b7add18657e5e19841aec6b07853c</field>
	<field name="commit_message">Grit::Git check_applies / patch related methods take command hash

This lets us pass an :env so we can use GIT_ALTERNATE_OBJECT_DIRECTORIES
to check if a commit applies across repositories.</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2011-06-22T06:21:47Z</field>
	<field name="commit_author_email">rtomayko@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2011-06-22T06:57:47Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">git.rb</field>
	<field name="commit_diff">@@ -197,16 +197,23 @@ def commit_from_sha(id)
 
     # Checks if the patch of a commit can be applied to the given head.
     #
+    # options     - grit command options hash
     # head_sha    - String SHA or ref to check the patch against.
     # applies_sha - String SHA of the patch.  The patch itself is retrieved
     #               with #get_patch.
     #
     # Returns 0 if the patch applies cleanly (according to `git apply`), or
     # an Integer that is the sum of the failed exit statuses.
-    def check_applies(head_sha, applies_sha)
+    def check_applies(options={}, head_sha=nil, applies_sha=nil)
+      options, head_sha, applies_sha = {}, options, head_sha if !options.is_a?(Hash)
+      options = options.dup
+      options[:env] &&= options[:env].dup
+
       git_index = create_tempfile('index', true)
-      options   = {:env = {'GIT_INDEX_FILE' = git_index}, :raise = true}
-      status    = 0
+      (options[:env] ||= {}).merge!('GIT_INDEX_FILE' = git_index)
+      options[:raise] = true
+
+      status = 0
       begin
         native(:read_tree, options.dup, head_sha)
         stdin = native(:diff, options.dup, "#{applies_sha}^", applies_sha)
@@ -219,27 +226,38 @@ def check_applies(head_sha, applies_sha)
 
     # Gets a patch for a given SHA using `git diff`.
     #
+    # options     - grit command options hash
     # applies_sha - String SHA to get the patch from, using this command:
     #               `git diff #{applies_sha}^ #{applies_sha}`
     #
     # Returns the String patch from `git diff`.
-    def get_patch(applies_sha)
+    def get_patch(options={}, applies_sha=nil)
+      options, applies_sha = {}, options if !options.is_a?(Hash)
+      options = options.dup
+      options[:env] &&= options[:env].dup
+
       git_index = create_tempfile('index', true)
-      native(:diff, {
-        :env = {'GIT_INDEX_FILE' = git_index}},
-        "#{applies_sha}^", applies_sha)
+      (options[:env] ||= {}).merge!('GIT_INDEX_FILE' = git_index)
+
+      native(:diff, options, "#{applies_sha}^", applies_sha)
     end
 
     # Applies the given patch against the given SHA of the current repo.
     #
+    # options  - grit command hash
     # head_sha - String SHA or ref to apply the patch to.
     # patch    - The String patch to apply.  Get this from #get_patch.
     #
     # Returns the String Tree SHA on a successful patch application, or false.
-    def apply_patch(head_sha, patch)
+    def apply_patch(options={}, head_sha=nil, patch=nil)
+      options, head_sha, patch = {}, options, head_sha if !options.is_a?(Hash)
+      options = options.dup
+      options[:env] &&= options[:env].dup
+      options[:raise] = true
+
       git_index = create_tempfile('index', true)
+      (options[:env] ||= {}).merge!('GIT_INDEX_FILE' = git_index)
 
-      options = {:env = {'GIT_INDEX_FILE' = git_index}, :raise = true}
       begin
         native(:read_tree, options.dup, head_sha)
         native(:apply, options.merge(:cached = true, :input = patch))</field>
	<field name="commit_sha">f19c39b117036834c372f956fd5f466d576120f7</field>
	<field name="commit_message">tags api now resty</field>
	<field name="commit_author_name">Scott Chacon</field>
	<field name="commit_author_date">2011-06-16T23:21:05Z</field>
	<field name="commit_author_email">schacon@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2011-06-22T06:57:39Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">git_object.rb</field>
	<field name="commit_diff">@@ -291,7 +291,7 @@ def raw_log(sha)
   end
 
   class Tag  GitObject
-    attr_accessor :object, :tag, :tagger, :message
+    attr_accessor :object, :tag, :tagger, :message, :object_type
     attr_writer :type
 
     def self.from_raw(rawobject, repository=nil)
@@ -332,6 +332,7 @@ def self.from_raw(rawobject, repository=nil)
     def initialize(object, type, tag, tagger, message, repository=nil)
       @object = object
       @type = type
+      @object_type = type
       @tag = tag
       @tagger = tagger
       @repository = repository</field>
	<field name="commit_sha">f38eecb1c9a1cd50b5f535a75a5c56e45cd64456</field>
	<field name="commit_message">start using the GitRuby::GitObject types in the Git data api</field>
	<field name="commit_author_name">Scott Chacon</field>
	<field name="commit_author_date">2011-06-16T22:11:15Z</field>
	<field name="commit_author_email">schacon@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2011-06-22T06:57:39Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">git_object.rb</field>
	<field name="commit_diff">@@ -49,6 +49,7 @@ def to_s
   # base class for all git objects (blob, tree, commit, tag)
   class GitObject
     attr_accessor :repository
+    attr_accessor :sha
 
     def GitObject.from_raw(rawobject, repository = nil)
       case rawobject.type</field>
	<field name="commit_file_name">raw_object.rb</field>
	<field name="commit_diff">@@ -31,6 +31,13 @@ def initialize(type, content)
         def sha1
           Digest::SHA1.digest("%s %d\0" % [@type, @content.length] + @content)
         end
+
+        def to_hash
+          {
+            :type = @type,
+            :content = @content
+          }
+        end
       end
     end
   end</field>
	<field name="commit_file_name">git.rb</field>
	<field name="commit_diff">@@ -56,6 +56,10 @@ def get_raw_object(object_id)
       ruby_git.get_raw_object_by_sha1(object_id).content
     end
 
+    def get_git_object(object_id)
+      ruby_git.get_raw_object_by_sha1(object_id).to_hash
+    end
+
     def object_exists?(object_id)
       ruby_git.object_exists?(object_id)
     end</field>
	<field name="commit_file_name">repo.rb</field>
	<field name="commit_diff">@@ -519,6 +519,14 @@ def lstree(treeish = 'master', options = {})
       revs
     end
 
+    def object(sha)
+      obj = git.get_git_object(sha)
+      raw = Grit::GitRuby::Internal::RawObject.new(obj[:type], obj[:content])
+      object = Grit::GitRuby::GitObject.from_raw(raw)
+      object.sha = sha
+      object
+    end
+
     # The Blob object for the given id
     #   +id+ is the SHA1 id of the blob
     #</field>
	<field name="commit_sha">67fc8d200884709a1ce49d1c752414726e488f4a</field>
	<field name="commit_message">we are not using these anymore. they are confusing</field>
	<field name="commit_author_name">Scott Chacon</field>
	<field name="commit_author_date">2011-06-16T22:04:15Z</field>
	<field name="commit_author_email">schacon@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2011-06-22T06:57:39Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">grit.gemspec</field>
	<field name="commit_diff">@@ -50,13 +50,11 @@ Gem::Specification.new do |s|
     lib/grit/errors.rb
     lib/grit/git-ruby.rb
     lib/grit/git-ruby/commit_db.rb
-    lib/grit/git-ruby/file_index.rb
     lib/grit/git-ruby/git_object.rb
     lib/grit/git-ruby/internal/file_window.rb
     lib/grit/git-ruby/internal/loose.rb
     lib/grit/git-ruby/internal/pack.rb
     lib/grit/git-ruby/internal/raw_object.rb
-    lib/grit/git-ruby/object.rb
     lib/grit/git-ruby/repository.rb
     lib/grit/git.rb
     lib/grit/index.rb</field>
	<field name="commit_file_name">git-ruby.rb</field>
	<field name="commit_diff">@@ -1,5 +1,4 @@
 require 'grit/git-ruby/repository'
-require 'grit/git-ruby/file_index'
 
 module Grit
 
@@ -200,21 +199,6 @@ def file_type(ref)
       try_run { ruby_git.cat_file_type(ref).to_s }
     end
 
-    def blame_tree(commit, path = nil)
-      begin
-        path = [path].join('/').to_s + '/' if (path && path != '')
-        path = '' if !path.is_a? String
-        commits = file_index.last_commits(rev_parse({}, commit), looking_for(commit, path))
-        clean_paths(commits)
-      rescue FileIndex::IndexFileNotFound
-        {}
-      end
-    end
-
-    def file_index
-      @git_file_index ||= FileIndex.new(@git_dir)
-    end
-
     def ruby_git
       @ruby_git_repo ||= Repository.new(@git_dir)
     end</field>
	<field name="commit_file_name">file_index.rb</field>
	<field name="commit_diff">@@ -1,191 +0,0 @@
-# this implements a file-based 'file index', an simple index of
-# all of the reachable commits in a repo, along with the parents
-# and which files were modified during each commit
-#
-# this class looks for a file named '[.git]/file-index', generated via:
-#
-# git log --pretty=oneline --name-only --parents --reverse --all  file-index
-#
-# for this to work properly, you'll want to add the following as a post-receive hook
-# to keep the index up to date
-#
-# git log --pretty=oneline --name-only --parents --reverse [old-rev]..[new-rev]  file-index
-#
-module Grit
-  module GitRuby
-
-  class FileIndex
-
-    class IndexFileNotFound  StandardError
-    end
-
-    class UnsupportedRef  StandardError
-    end
-
-    class  self
-      attr_accessor :max_file_size
-    end
-
-    self.max_file_size = 10_000_000 # ~10M
-
-    # initializes index given repo_path
-    def initialize(repo_path)
-      @index_file = File.join(repo_path, 'file-index')
-      if File.file?(@index_file) && (File.size(@index_file)  Grit::GitRuby::FileIndex.max_file_size)
-        read_index
-      else
-        raise IndexFileNotFound
-      end
-    end
-
-    # returns count of all commits
-    def count_all
-      @sha_count
-    end
-
-    # returns count of all commits reachable from SHA
-    # note: originally did this recursively, but ruby gets pissed about that on
-    # really big repos where the stack level gets 'too deep' (thats what she said)
-    def count(commit_sha)
-      commits_from(commit_sha).size
-    end
-
-    # builds a list of all commits reachable from a single commit
-    def commits_from(commit_sha)
-      raise UnsupportedRef if commit_sha.is_a? Array
-
-      already = {}
-      final = []
-      left_to_do = [commit_sha]
-
-      while commit_sha = left_to_do.shift
-        next if already[commit_sha]
-
-        final  commit_sha
-        already[commit_sha] = true
-
-        commit = @commit_index[commit_sha]
-        commit[:parents].each do |sha|
-          left_to_do  sha
-        end if commit
-      end
-
-      sort_commits(final)
-    end
-
-    def sort_commits(sha_array)
-      sha_array.sort { |a, b| @commit_order[b].to_i = @commit_order[a].to_i }
-    end
-
-    # returns files changed at commit sha
-    def files(commit_sha)
-      @commit_index[commit_sha][:files] rescue nil
-    end
-
-    # returns all commits for a file
-    def commits_for(file)
-      @all_files[file]
-    end
-
-    # returns the shas of the last commits for all
-    # the files in [] from commit_sha
-    # files_matcher can be a regexp or an array
-    def last_commits(commit_sha, files_matcher)
-      acceptable = commits_from(commit_sha)
-
-      matches = {}
-
-      if files_matcher.is_a? Regexp
-        files = @all_files.keys.select { |file| file =~ files_matcher }
-        files_matcher = files
-      end
-
-      if files_matcher.is_a? Array
-        # find the last commit for each file in the array
-        files_matcher.each do |f|
-          @all_files[f].each do |try|
-            if acceptable.include?(try)
-              matches[f] = try
-              break
-            end
-          end if @all_files[f]
-        end
-      end
-
-      matches
-    end
-
-    private
-
-      # read and parse the file-index data
-      def read_index
-        f = File.new(@index_file)
-        @sha_count = 0
-        @commit_index = {}
-        @commit_order = {}
-        @all_files = {}
-        while line = f.gets
-          if /^(\w{40})/.match(line)
-            shas = line.scan(/(\w{40})/)
-            current_sha = shas.shift.first
-            parents = shas.map { |sha| sha.first }
-            @commit_index[current_sha] = {:files = [], :parents = parents }
-            @commit_order[current_sha] = @sha_count
-            @sha_count += 1
-          else
-            file_name = line.chomp
-            tree = ''
-            File.dirname(file_name).split('/').each do |part|
-              next if part == '.'
-              tree += part + '/'
-              @all_files[tree] ||= []
-              @all_files[tree].unshift(current_sha)
-            end
-            @all_files[file_name] ||= []
-            @all_files[file_name].unshift(current_sha)
-            @commit_index[current_sha][:files]  file_name
-          end
-        end
-      end
-
-  end
-
-  end
-end
-
-
-# benchmark testing on big-ass repos
-
-if __FILE__ == $0
-
-  #repo = '/Users/schacon/projects/git/.git'
-  #commit = 'd8933f013a66cc1deadf83a9c24eccb6fee78a35'
-  #file_list = ["builtin-merge-recursive.c", "git-send-email-script", "git-parse-remote.sh", "builtin-add.c", "merge-base.c", "read-cache.c", "fsck.h", "diff.c", "refs.c", "diffcore-rename.c", "epoch.c", "pack-intersect.c", "fast-import.c", "git-applypatch.sh", "git.spec.in", "rpush.c", "git-clone-script", "utf8.c", "git-external-diff-script", "builtin-init-db.c", "pack-redundant.c", "builtin-diff-index.c", "index.c", "update-index.c", "fetch-clone.c", "pager.c", "diff.h", "unpack-trees.c", "git-browse-help.sh", "git-rename-script", "refs.h", "get-tar-commit-id.c", "git-push.sh", "README", "delta.c", "mailsplit.c", "gitweb.cgi", "var.c", "epoch.h", "gsimm.c", "archive.c", "sideband.c", "utf8.h", "local-fetch.c", "git-request-pull-script", "builtin-send-pack.c", "blob.c", "builtin-ls-remote.c", "pretty.c", "git-diff.sh", "diffcore-break.c", "unpack-trees.h", "git-mv.perl", "interpolate.c", "builtin-diff-files.c", "delta.h", "commit-tree.c", "git-diff-script", "decorate.c", "builtin-name-rev.c", "tree-walk.c", "git-revert-script", "git-sh-setup.sh", "transport.c", "gsimm.h", "archive.h", "count-delta.c", "sideband.h", "git-merge.sh", "git-gui.sh", "git-core.spec.in", "cvs2git.c", "blob.h", "git.sh", "http-push.c", "builtin-commit-tree.c", "diff-helper.c", "builtin-push.c", "interpolate.h", "decorate.h", "git-citool", "dotest", "builtin-verify-tag.c", "git-mergetool.sh", "tree-walk.h", "log-tree.c", "name-rev.c", "applypatch", "cat-file.c", "test-delta.c", "server-info.c", "count-delta.h", "write-tree.c", "local-pull.c", "transport.h", "git-rm.sh", "unpack-objects.c", "xdiff-interface.c", "git-repack-script", "commit.c", "hash-object.c", "git-merge-recursive.py", "git-clone-dumb-http", "thread-utils.c", "git-send-email.perl", "git-whatchanged.sh", "log-tree.h", "builtin-annotate.c", "show-index.c", "pkt-line.c", "ident.c", "git-rebase-script", "name-hash.c", "git-archimport.perl", "xdiff-interface.h", "commit.h", "diff-lib.c", "wt-status.c", "base85.c", "builtin-fetch--tool.c", "unpack-file.c", "builtin-diff-stages.c", "merge-index.c", "color.c", "diff-tree.c", "git-checkout.sh", "thread-utils.h", "grep.c", "pkt-line.h", "builtin-help.c", "test-parse-options.c", "show-files.c", "git.sh.in", "pack.h", "wt-status.h", "git-prune-script", "test-sha1.c", "git-octopus.sh", "dump-cache-tree.c", "git-web--browse.sh", "builtin-upload-tar.c", "builtin-clone.c", "copy.c", "color.h", "show-branch.c", "peek-remote.c", "git-merge-recursive-old.py", "cmd-rename.sh", "git-apply-patch-script", "git-export.c", "git-relink-script", "grep.h", "usage.c", "git-fetch-dumb-http", "fsck-objects.c", "update-cache.c", "diff-stages.c", "patch-ids.c", "builtin-rev-list.c", "builtin-bundle.c", "builtin-show-branch.c", "builtin-pack-refs.c", "tree.c", "git.c", "verify_pack.c", "update-ref.c", "builtin-peek-remote.c", "diffcore-pathspec.c", "git-merge-octopus.sh", "git-show-branches-script", "builtin-archive.c", "builtin-unpack-objects.c", "git-rerere.perl", "walker.c", "builtin-mailsplit.c", "convert.c", "builtin-branch.c", "export.c", "patch-ids.h", "check-builtins.sh", "git-pull-script", "tree.h", "alloc.c", "git-commit.sh", "git-lost-found.sh", "mailmap.c", "rsh.c", "exec_cmd.c", "git-compat-util.h", "ws.c", "rev-list.c", "git-verify-tag.sh", "git-ls-remote-script", "mktree.c", "walker.h", "builtin-blame.c", "builtin-fsck.c", "setup.c", "git-cvsimport-script", "git-add.sh", "symlinks.c", "checkout-index.c", "receive-pack.c", "git-merge-one-file-script", "mailmap.h", "git-cvsimport.perl", "builtin-count.c", "exec_cmd.h", "builtin-stripspace.c", "git-grep.sh", "hash.c", "builtin-prune-packed.c", "git-rebase--interactive.sh", "rsh.h", "match-trees.c", "git-format-patch.sh", "git-push-script", "parse-options.c", "git-status-script", "http-walker.c", "pack-write.c", "git-status.sh", "diff-delta.c", "hash.h", "generate-cmdlist.sh", "config-set.c", "builtin-fetch.c", "ll-merge.c", "t1300-config-set.sh", "ls-tree.c", "write_or_die.c", "builtin-check-ref-format.c", "fetch-pack.c", "git-commit-script", "builtin-describe.c", "parse-options.h", "builtin-checkout.c", "prune-packed.c", "fixup-builtins", "http-fetch.c", "test-absolute-path.c", "git-log.sh", "builtin-merge-ours.c", "git-whatchanged", "pull.c", "merge-tree.c", "ll-merge.h", "builtin.h", "Makefile", "cache-tree.c", "builtin-log.c", "merge-cache.c", "fetch-pack.h", "git-shortlog.perl", "git-bisect-script", "git-am.sh", "check-ref-format.c", "git-count-objects-script", "mkdelta.c", "builtin-diff.c", "merge-recursive.c", "builtin-config.c", "gitenv.c", "describe.c", "git-add--interactive.perl", "pull.h", "builtin-apply.c", "diff-index.c", "ssh-pull.c", "builtin-merge-file.c", "strbuf.c", "git-submodule.sh", "repo-config.c", "run-command.c", "git-applymbox.sh", "cache-tree.h", "builtin-clean.c", "cache.h", "git-prune.sh", "fsck-cache.c", "builtin-remote.c", "sha1_file.c", "shallow.c", "merge-recursive.h", "builtin-checkout-index.c", "git-clone.sh", "builtin-mv.c", "builtin-reflog.c", "lockfile.c", "git-octopus-script", ".mailmap", "strbuf.h", "git-p4import.py", "builtin-repo-config.c", "patch-delta.c", "builtin-merge-base.c", "run-command.h", "check-racy.c", "git-filter-branch.sh", "git-branch.sh", "git-merge-stupid.sh", "diff-files.c", "test-sha1.sh", "COPYING", "git-lost+found.sh", "git-tag.sh", "git-branch-script", "check-files.c", "builtin-reset.c", "builtin-ls-files.c", "builtin-fmt-merge-msg.c", "builtin-for-each-ref.c", "csum-file.c", "git-gc.sh", "git-parse-remote-script", "command-list.txt", "builtin-pack-objects.c", "dir.c", "test-date.c", "builtin-grep.c", "list-objects.c", "clone-pack.c", "git-gui", "convert-cache.c", "git-reset-script", "checkout-cache.c", "git-ls-remote.sh", "read-tree.c", "git-instaweb.sh", "progress.c", "rabinpoly.c", "ls-files.c", "mktag.c", "gitMergeCommon.py", "git-merge-ours.sh", "rpull.c", "git-annotate.perl", "csum-file.h", "builtin-shortlog.c", "builtin-commit.c", "http-pull.c", "git-fetch.sh", "apply.c", "git-add-script", "dir.h", "diff-tree-helper.c", "list-objects.h", "rev-tree.c", "builtin-tar-tree.c", "progress.h", "builtin-pickaxe.c", "git-merge-fredrik.py", "path.c", "builtin-diff-tree.c", "rabinpoly.h", "builtin-ls-tree.c", "tar.h", "trace.c", "graph.c", "ssh-fetch.c", "show-diff.c", "sha1-lookup.c", "builtin-revert.c", "builtin-symbolic-ref.c", "builtin-write-tree.c", "git-sh-setup-script", "rev-cache.c", "blame.c", "builtin-mailinfo.c", "git-cherry", "git-resolve-script", "INSTALL", "git-findtags.perl", "diffcore-delta.c", "entry.c", "git-applypatch", "connect.c", "tar-tree.c", "graph.h", "missing-revs.c", "builtin-fast-export.c", "sha1-lookup.h", "rev-parse.c", "configure.ac", "rev-cache.h", "build-rev-cache.c", "reachable.c", "index-pack.c", "git", "send-pack.c", "git-cherry.sh", "git-tag-script", "revision.c", "CREDITS-GEN", "bundle.c", "mailinfo.c", "symbolic-ref.c", "attr.c", "git-archimport-script", "archive-zip.c", "diff-cache.c", "fetch.c", "builtin-gc.c", "git-remote.perl", "path-list.c", "ssh-upload.c", "reachable.h", "diff-no-index.c", "diffcore.h", "send-pack.h", "tree-diff.c", "git-checkout-script", "pack-revindex.c", "show-rev-cache.c", "TODO", "revision.h", "bundle.h", "unresolve.c", "git-deltafy-script", "git-relink.perl", "archive-tar.c", "attr.h", "git-resolve.sh", "config.mak.in", "builtin-update-index.c", "convert-objects.c", "fetch.h", "builtin-runstatus.c", "quote.c", "init-db.c", "git-shortlog", "builtin-prune.c", "builtin-rerere.c", "verify-pack.c", "gitk", "patch-id.c", ".gitattributes", "date.c", "git-format-patch-script", "path-list.h", "pack-revindex.h", "GIT-VERSION-GEN", "combine-diff.c", "environment.c", "git-cvsserver.perl", "git-repack.sh", "diffcore-order.c", "reflog-walk.c", "config.c", "test-match-trees.c", "git-svnimport.perl", "quote.h", "write-blob.c", "diffcore-pickaxe.c", "builtin-update-ref.c", "stripspace.c", "help.c", "pack-objects.c", "branch.c", "git-verify-tag-script", "TEST", "daemon.c", "remote.c", "git-log-script", "git-pull.sh", "git-quiltimport.sh", "git-count-objects.sh", "reflog-walk.h", "git-applymbox", "builtin-show-ref.c", "RelNotes", "git-fmt-merge-msg.perl", "git-rebase.sh", "git-parse-remote", "git-browse--help.sh", "git-stash.sh", "alias.c", "branch.h", "gitweb.pl", "builtin-upload-archive.c", "builtin-cat-file.c", "sha1_name.c", "http.c", "test-chmtime.c", "remote.h", "ssh-push.c", "tag.c", "update-server-info.c", "git-cvsexportcommit.perl", "builtin-check-attr.c", "git-revert.sh", "builtin-verify-pack.c", "object.c", "git-merge-resolve.sh", "shortlog.h", "git-fetch-script", "test-genrandom.c", "shell.c", "builtin-rm.c", "builtin-zip-tree.c", "upload-pack.c", "git-rename.perl", ".gitignore", "tag.h", "http.h", "git-request-pull.sh", "object.h", "git-svn.perl", "builtin-fetch-pack.c", "git-bisect.sh", "pack-check.c", "builtin-rev-parse.c", "object-refs.c", "test-gsimm.c", "builtin-read-tree.c", "git-help--browse.sh", "merge-file.c", "fsck.c", "builtin-tag.c", "builtin-http-fetch.c", "builtin-count-objects.c", "git-reset.sh", "git-clean.sh", "git-merge-one-file.sh", "ctype.c", "git-mktag.c", "imap-send.c"]
-
-  repo = '/Users/schacon/projects/grit/.git'
-  commit = 'c87612bc84c95ba9df17674d911dde10f34fefaa'
-
-  require 'benchmark'
-
-  Benchmark.bm(20) do |x|
-    x.report('index build') do
-      i = Grit::GitRuby::FileIndex.new(repo)
-    end
-    x.report('commit count') do
-      i = Grit::GitRuby::FileIndex.new(repo)
-      i.count(commit)
-    end
-    x.report('commits list') do
-      i = Grit::GitRuby::FileIndex.new(repo)
-      i.commits_from(commit)
-    end
-    x.report('last commits') do
-      i = Grit::GitRuby::FileIndex.new(repo)
-      #arr = i.last_commits(commit, file_list)
-      arr = i.last_commits(commit, /^[^\/]*$/)
-    end
-  end
-end
-
-
-</field>
	<field name="commit_file_name">object.rb</field>
	<field name="commit_diff">@@ -1,325 +0,0 @@
-#
-# converted from the gitrb project
-#
-# authors:
-#    Matthias Lederhofer matled@gmx.net
-#    Simon 'corecode' Schubert corecode@fs.ei.tum.de
-#    Scott Chacon schacon@gmail.com
-#
-# provides native ruby access to git objects and pack files
-#
-
-# These classes translate the raw binary data kept in the sha encoded files
-# into parsed data that can then be used in another fashion
-require 'stringio'
-
-module Grit
-  module GitRuby
-
-  # class for author/committer/tagger lines
-  class UserInfo
-    attr_accessor :name, :email, :date, :offset
-
-    def initialize(str)
-      m = /^(.*?) (.*) (\d+) ([+-])0*(\d+?)$/.match(str)
-      if !m
-        raise RuntimeError, "invalid header '%s' in commit" % str
-      end
-      @name = m[1]
-      @email = m[2]
-      @date = Time.at(Integer(m[3]))
-      @offset = (m[4] == "-" ? -1 : 1)*Integer(m[5])
-    end
-
-    def to_s
-      "%s %s %s %+05d" % [@name, @email, @date.to_i, @offset]
-    end
-  end
-
-  # base class for all git objects (blob, tree, commit, tag)
-  class Object
-    attr_accessor :repository
-
-    def Object.from_raw(rawobject, repository = nil)
-      case rawobject.type
-      when :blob
-        return Blob.from_raw(rawobject, repository)
-      when :tree
-        return Tree.from_raw(rawobject, repository)
-      when :commit
-        return Commit.from_raw(rawobject, repository)
-      when :tag
-        return Tag.from_raw(rawobject, repository)
-      else
-        raise RuntimeError, "got invalid object-type"
-      end
-    end
-
-    def initialize
-      raise NotImplemented, "abstract class"
-    end
-
-    def type
-      raise NotImplemented, "abstract class"
-    end
-
-    def raw_content
-      raise NotImplemented, "abstract class"
-    end
-
-    def sha1
-      Digest::SHA1.hexdigest("%s %d\0" % \
-                             [self.type, self.raw_content.length] + \
-                             self.raw_content)
-    end
-  end
-
-  class Blob  Object
-    attr_accessor :content
-
-    def self.from_raw(rawobject, repository)
-      new(rawobject.content)
-    end
-
-    def initialize(content, repository=nil)
-      @content = content
-      @repository = repository
-    end
-
-    def type
-      :blob
-    end
-
-    def raw_content
-      @content
-    end
-  end
-
-  class DirectoryEntry
-    S_IFMT  = 00170000
-    S_IFLNK =  0120000
-    S_IFREG =  0100000
-    S_IFDIR =  0040000
-
-    attr_accessor :mode, :name, :sha1
-    def initialize(mode, filename, sha1o)
-      @mode = 0
-      mode.each_byte do |i|
-        @mode = (@mode  3) | (i-'0'[0])
-      end
-      @name = filename
-      @sha1 = sha1o
-      if ![S_IFLNK, S_IFDIR, S_IFREG].include?(@mode & S_IFMT)
-        raise RuntimeError, "unknown type for directory entry"
-      end
-    end
-
-    def type
-      case @mode & S_IFMT
-      when S_IFLNK
-        @type = :link
-      when S_IFDIR
-        @type = :directory
-      when S_IFREG
-        @type = :file
-      else
-        raise RuntimeError, "unknown type for directory entry"
-      end
-    end
-
-    def type=(type)
-      case @type
-      when :link
-        @mode = (@mode & ~S_IFMT) | S_IFLNK
-      when :directory
-        @mode = (@mode & ~S_IFMT) | S_IFDIR
-      when :file
-        @mode = (@mode & ~S_IFMT) | S_IFREG
-      else
-        raise RuntimeError, "invalid type"
-      end
-    end
-
-    def format_type
-      case type
-      when :link
-        'link'
-      when :directory
-        'tree'
-      when :file
-        'blob'
-      end
-    end
-
-    def format_mode
-      "%06o" % @mode
-    end
-
-    def raw
-      "%o %s\0%s" % [@mode, @name, [@sha1].pack("H*")]
-    end
-  end
-
-
-  def self.read_bytes_until(io, char)
-    string = ''
-    if RUBY_VERSION  '1.9'
-      while ((next_char = io.getc) != char) && !io.eof
-        string += next_char
-      end
-    else
-      while ((next_char = io.getc.chr) != char) && !io.eof
-        string += next_char
-      end
-    end
-    string
-  end
-
-
-  class Tree  Object
-    attr_accessor :entry
-
-    def self.from_raw(rawobject, repository=nil)
-      raw = StringIO.new(rawobject.content)
-
-      entries = []
-      while !raw.eof?
-        mode      = Grit::GitRuby.read_bytes_until(raw, ' ')
-        file_name = Grit::GitRuby.read_bytes_until(raw, "\0")
-        raw_sha   = raw.read(20)
-        sha = raw_sha.unpack("H*").first
-
-        entries  DirectoryEntry.new(mode, file_name, sha)
-      end
-      new(entries, repository)
-    end
-
-    def initialize(entries=[], repository = nil)
-      @entry = entries
-      @repository = repository
-    end
-
-    def type
-      :tree
-    end
-
-    def raw_content
-      # TODO: sort correctly
-      #@entry.sort { |a,b| a.name = b.name }.
-      @entry.collect { |e| [[e.format_mode, e.format_type, e.sha1].join(' '), e.name].join("\t") }.join("\n")
-    end
-
-    def actual_raw
-      #@entry.collect { |e| e.raw.join(' '), e.name].join("\t") }.join("\n")
-    end
-  end
-
-  class Commit  Object
-    attr_accessor :author, :committer, :tree, :parent, :message, :headers
-
-    def self.from_raw(rawobject, repository=nil)
-      parent = []
-      tree = author = committer = nil
-
-      headers, message = rawobject.content.split(/\n\n/, 2)
-      all_headers = headers.split(/\n/).map { |header| header.split(/ /, 2) }
-      all_headers.each do |key, value|
-        case key
-        when "tree"
-          tree = value
-        when "parent"
-          parent.push(value)
-        when "author"
-          author = UserInfo.new(value)
-        when "committer"
-          committer = UserInfo.new(value)
-        else
-          warn "unknown header '%s' in commit %s" % \
-            [key, rawobject.sha1.unpack("H*")[0]]
-        end
-      end
-      if not tree && author && committer
-        raise RuntimeError, "incomplete raw commit object"
-      end
-      new(tree, parent, author, committer, message, headers, repository)
-    end
-
-    def initialize(tree, parent, author, committer, message, headers, repository=nil)
-      @tree = tree
-      @author = author
-      @parent = parent
-      @committer = committer
-      @message = message
-      @headers = headers
-      @repository = repository
-    end
-
-    def type
-      :commit
-    end
-
-    def raw_content
-      "tree %s\n%sauthor %s\ncommitter %s\n\n" % [
-        @tree,
-        @parent.collect { |i| "parent %s\n" % i }.join,
-        @author, @committer] + @message
-    end
-
-    def raw_log(sha)
-      output = "commit #{sha}\n"
-      output += @headers + "\n\n"
-      output += @message.split("\n").map { |l| '    ' + l }.join("\n") + "\n\n"
-    end
-
-  end
-
-  class Tag  Object
-    attr_accessor :object, :type, :tag, :tagger, :message
-
-    def self.from_raw(rawobject, repository=nil)
-      headers, message = rawobject.content.split(/\n\n/, 2)
-      headers = headers.split(/\n/).map { |header| header.split(/ /, 2) }
-      headers.each do |key, value|
-        case key
-        when "object"
-          object = value
-        when "type"
-          if !["blob", "tree", "commit", "tag"].include?(value)
-            raise RuntimeError, "invalid type in tag"
-          end
-          type = value.to_sym
-        when "tag"
-          tag = value
-        when "tagger"
-          tagger = UserInfo.new(value)
-        else
-          warn "unknown header '%s' in tag" % \
-            [key, rawobject.sha1.unpack("H*")[0]]
-        end
-        if not object && type && tag && tagger
-          raise RuntimeError, "incomplete raw tag object"
-        end
-      end
-      new(object, type, tag, tagger, repository)
-    end
-
-    def initialize(object, type, tag, tagger, repository=nil)
-      @object = object
-      @type = type
-      @tag = tag
-      @tagger = tagger
-      @repository = repository
-    end
-
-    def raw_content
-      "object %s\ntype %s\ntag %s\ntagger %s\n\n" % \
-        [@object, @type, @tag, @tagger] + @message
-    end
-
-    def type
-      :tag
-    end
-  end
-
-  end
-end</field>
	<field name="commit_sha">b0135670e0002fee8491ea1e15e7308817e9a255</field>
	<field name="commit_message">ruby rev_list passes --verify to native rev_parse in fallback

Otherwise, the git-rev-parse will return whatever is given as an arg
when the ref doesn't exist. e.g.,

  $ git rev-parse some-bad-ref
  some-bad-ref
  fatal: ambiguous argument 'some-bad-ref': unknown revision or path not in the working tree.

The error message is on stderr and git-rev-parse exits with non-zero
but the ref name is still output.

The problem here is that code often calls rev_list like:

    git.rev_list({}, "some-bad-ref")

Then rev_list tries to convert some-bad-ref to a SHA1, gets back the
ref string, but continues on anyway. This eventually results in the
rev_list failing to look up the object because it assumes its a SHA1
when its really a ref string.</field>
	<field name="commit_author_name">Ryan Tomayko</field>
	<field name="commit_author_date">2011-06-15T19:29:14Z</field>
	<field name="commit_author_email">rtomayko@gmail.com</field>
	<field name="commit_committer_name">Ryan Tomayko</field>
	<field name="commit_committer_date">2011-06-15T19:30:25Z</field>
	<field name="commit_committer_email">rtomayko@gmail.com</field>
	<field name="commit_file_name">git-ruby.rb</field>
	<field name="commit_diff">@@ -64,7 +64,7 @@ def rev_list(options, *refs)
         end
       else
         ref = refs.first
-        aref = rev_parse({}, ref)
+        aref = rev_parse({:verify = true}, ref)
         if aref.is_a? Array
           method_missing('rev-list', options, *refs)
         else</field>
	<field name="filename">grit</field>
	<field name="filename_full">.\grit</field>
	<field name="filename">.gitignore</field>
	<field name="filename_full">.\grit/.gitignore</field>
	<field name="filename">API.txt</field>
	<field name="filename_full">.\grit/API.txt</field>
	<field name="filename">benchmarks.rb</field>
	<field name="filename_full">.\grit/benchmarks.rb</field>
	<field name="language">rb</field>
	<field name="comment">#require 'grit'</field>
	<field name="comment">#result = RubyProf.profile do</field>
	<field name="comment">#Grit::GitRuby.cache_client = MemCache.new 'localhost:11211', :namespace => 'grit'</field>
	<field name="comment">#Grit.debug = true</field>
	<field name="comment">#pp Grit::GitRuby.cache_client.stats </field>
	<field name="comment"># run_code(x, 'config', 100) do</field>
	<field name="comment">#   c = git.config['user.name']</field>
	<field name="comment">#   c = git.config['user.email']</field>
	<field name="comment"># end</field>
	<field name="comment">#run_code(x, 'commit count') do</field>
	<field name="comment">#  c = git.commit_count('testing')</field>
	<field name="comment">#end</field>
	<field name="comment">#end</field>
	<field name="comment">#printer = RubyProf::FlatPrinter.new(result)</field>
	<field name="comment">#printer.print(STDOUT, 0)</field>
	<field name="comment">#end</field>
	<field name="comment"># Print a graph profile to text</field>
	<field name="comment">#FileUtils.rm_r(tmp_path) if remove_after</field>
	<field name="comment">##pp Grit::GitRuby.cache_client.stats </field>
	<field name="filename">benchmarks.txt</field>
	<field name="filename_full">.\grit/benchmarks.txt</field>
	<field name="filename">grit.gemspec</field>
	<field name="filename_full">.\grit/grit.gemspec</field>
	<field name="language">rb</field>
	<field name="comment"># = MANIFEST =</field>
	<field name="comment"># = MANIFEST =</field>
	<field name="filename">History.txt</field>
	<field name="filename_full">.\grit/History.txt</field>
	<field name="filename">LICENSE</field>
	<field name="filename_full">.\grit/LICENSE</field>
	<field name="filename">PURE_TODO</field>
	<field name="filename_full">.\grit/PURE_TODO</field>
	<field name="filename">Rakefile</field>
	<field name="filename_full">.\grit/Rakefile</field>
	<field name="language">rb</field>
	<field name="comment">#############################################################################</field>
	<field name="comment">#</field>
	<field name="comment"># Helper functions</field>
	<field name="comment">#</field>
	<field name="comment">#############################################################################</field>
	<field name="comment">#############################################################################</field>
	<field name="comment">#</field>
	<field name="comment"># Standard tasks</field>
	<field name="comment">#</field>
	<field name="comment">#############################################################################</field>
	<field name="comment">#############################################################################</field>
	<field name="comment">#</field>
	<field name="comment"># Custom tasks (add your own tasks here)</field>
	<field name="comment">#</field>
	<field name="comment">#############################################################################</field>
	<field name="comment">#############################################################################</field>
	<field name="comment">#</field>
	<field name="comment"># Packaging tasks</field>
	<field name="comment">#</field>
	<field name="comment">#############################################################################</field>
	<field name="comment"># read spec file and split out manifest section</field>
	<field name="comment"># replace name version and date</field>
	<field name="comment">#comment this out if your rubyforge_project has a different name</field>
	<field name="comment"># determine file list from git ls-files</field>
	<field name="comment"># piece file back together and write</field>
	<field name="filename">README.md</field>
	<field name="filename_full">.\grit/README.md</field>
	<field name="language">minid</field>
	<field name="comment">//github.com/libgit2/rugged).**</field>
	<field name="comment">//git-scm.com) tested with 1.7.2.1</field>
	<field name="comment">//github.com/mojombo/grit</field>
	<field name="comment">//github.com/mojombo/grit.git</field>
	<field name="filename">examples</field>
	<field name="filename_full">.\grit/examples</field>
	<field name="filename">ex_add_commit.rb</field>
	<field name="filename_full">.\grit/examples/ex_add_commit.rb</field>
	<field name="language">rb</field>
	<field name="filename">ex_index.rb</field>
	<field name="filename_full">.\grit/examples/ex_index.rb</field>
	<field name="language">rb</field>
	<field name="filename">lib</field>
	<field name="filename_full">.\grit/lib</field>
	<field name="filename">grit.rb</field>
	<field name="filename_full">.\grit/lib/grit.rb</field>
	<field name="language">rb</field>
	<field name="comment"># For use/testing when no gem is installed</field>
	<field name="comment"># core</field>
	<field name="comment"># stdlib</field>
	<field name="comment"># third party</field>
	<field name="comment"># ruby 1.9 compatibility</field>
	<field name="comment"># internal requires</field>
	<field name="comment"># Set +debug+ to true to log all git calls and responses</field>
	<field name="comment"># The standard +logger+ for debugging git calls - this defaults to a plain STDOUT logger</field>
	<field name="filename">grit</field>
	<field name="filename_full">.\grit/lib/grit</field>
	<field name="filename">actor.rb</field>
	<field name="filename_full">.\grit/lib/grit/actor.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Create an Actor from a string.</field>
	<field name="comment">#</field>
	<field name="comment"># str - The String in this format: 'John Doe <jdoe@example.com>'</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Git::Actor.</field>
	<field name="comment"># Outputs an actor string for Git commits.</field>
	<field name="comment">#</field>
	<field name="comment">#   actor = Actor.new('bob', 'bob@email.com')</field>
	<field name="comment">#   actor.output(time) # => "bob <bob@email.com> UNIX_TIME +0700"</field>
	<field name="comment">#</field>
	<field name="comment"># time - The Time the commit was authored or committed.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns a String.</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Actor</field>
	<field name="comment"># Grit</field>
	<field name="filename">blame.rb</field>
	<field name="filename_full">.\grit/lib/grit/blame.rb</field>
	<field name="language">rb</field>
	<field name="comment"># process the output</field>
	<field name="comment"># load all commits in single call</field>
	<field name="comment"># get it together</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Blame</field>
	<field name="comment"># Grit</field>
	<field name="filename">blob.rb</field>
	<field name="filename_full">.\grit/lib/grit/blob.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Create an unbaked Blob containing just the specified attributes</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +atts+ is a Hash of instance variable data</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Blob (unbaked)</field>
	<field name="comment"># Initializer for Blob.create</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +atts+ is a Hash of instance variable data</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Blob (unbaked)</field>
	<field name="comment"># The size of this blob in bytes</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Integer</field>
	<field name="comment"># The binary contents of this blob.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns String</field>
	<field name="comment"># The mime type of this file (based on the filename)</field>
	<field name="comment">#</field>
	<field name="comment"># Returns String</field>
	<field name="comment"># The blame information for the given file at the given commit</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Array: [Grit::Commit, Array: [<line>]]</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Compares blobs by name</field>
	<field name="comment"># Blob</field>
	<field name="comment"># Grit</field>
	<field name="filename">commit.rb</field>
	<field name="filename_full">.\grit/lib/grit/commit.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Parses output from the `git-cat-file --batch'.</field>
	<field name="comment">#</field>
	<field name="comment"># repo   - Grit::Repo instance.</field>
	<field name="comment"># sha    - String SHA of the Commit.</field>
	<field name="comment"># size   - Fixnum size of the object.</field>
	<field name="comment"># object - Parsed String output from `git cat-file --batch`.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns an Array of Grit::Commit objects.</field>
	<field name="comment"># Instantiate a new Commit</field>
	<field name="comment">#   +id+ is the id of the commit</field>
	<field name="comment">#   +parents+ is an array of commit ids (will be converted into Commit instances)</field>
	<field name="comment">#   +tree+ is the correspdonding tree id (will be converted into a Tree object)</field>
	<field name="comment">#   +author+ is the author string</field>
	<field name="comment">#   +authored_date+ is the authored Time</field>
	<field name="comment">#   +committer+ is the committer string</field>
	<field name="comment">#   +committed_date+ is the committed Time</field>
	<field name="comment">#   +message+ is an array of commit message lines</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit (baked)</field>
	<field name="comment"># Create an unbaked Commit containing just the specified attributes</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +atts+ is a Hash of instance variable data</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit (unbaked)</field>
	<field name="comment"># Initializer for Commit.create</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +atts+ is a Hash of instance variable data</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit (unbaked)</field>
	<field name="comment"># Count the number of commits reachable from this ref</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +ref+ is the ref from which to begin (SHA1 or name)</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Integer</field>
	<field name="comment"># Find all commits matching the given criteria.</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +ref+ is the ref from which to begin (SHA1 or name) or nil for --all</field>
	<field name="comment">#   +options+ is a Hash of optional arguments to git</field>
	<field name="comment">#     :max_count is the maximum number of commits to fetch</field>
	<field name="comment">#     :skip is the number of commits to skip</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit[] (baked)</field>
	<field name="comment"># Parse out commit information into an array of baked Commit objects</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +text+ is the text output from the git command (raw format)</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit[] (baked)</field>
	<field name="comment">#</field>
	<field name="comment"># really should re-write this to be more accepting of non-standard commit messages</field>
	<field name="comment"># - it broke when 'encoding' was introduced - not sure what else might show up</field>
	<field name="comment">#</field>
	<field name="comment"># not doing anything with this yet, but it's sometimes there</field>
	<field name="comment"># Show diffs between two trees.</field>
	<field name="comment">#</field>
	<field name="comment"># repo    - The current Grit::Repo instance.</field>
	<field name="comment"># a       - A String named commit.</field>
	<field name="comment"># b       - An optional String named commit.  Passing an array assumes you</field>
	<field name="comment">#           wish to omit the second named commit and limit the diff to the</field>
	<field name="comment">#           given paths.</field>
	<field name="comment"># paths   - An optional Array of paths to limit the diff.</field>
	<field name="comment"># options - An optional Hash of options.  Merged into {:full_index => true}.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Diff[] (baked)</field>
	<field name="comment"># Shows diffs between the commit's parent and the commit.</field>
	<field name="comment">#</field>
	<field name="comment"># options - An optional Hash of options, passed to Grit::Commit.diff.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Diff[] (baked)</field>
	<field name="comment"># Convert this Commit to a String which is just the SHA1 id</field>
	<field name="comment"># Calculates the commit's Patch ID. The Patch ID is essentially the SHA1</field>
	<field name="comment"># of the diff that the commit is introducing.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the 40 character hex String if a patch-id could be calculated</field>
	<field name="comment">#   or nil otherwise.</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># private</field>
	<field name="comment"># Parse out the actor (author or committer) info</field>
	<field name="comment">#</field>
	<field name="comment"># Returns [String (actor name and email), Time (acted at time)]</field>
	<field name="comment"># Commit</field>
	<field name="comment"># Grit</field>
	<field name="filename">commit_stats.rb</field>
	<field name="filename_full">.\grit/lib/grit/commit_stats.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Instantiate a new CommitStats</field>
	<field name="comment">#   +id+ is the id of the commit</field>
	<field name="comment">#   +files+ is an array of :</field>
	<field name="comment">#     [ [filename, adds, deletes, total],</field>
	<field name="comment">#       [filename, adds, deletes, total],</field>
	<field name="comment">#       [filename, adds, deletes, total] ]</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::CommitStats (baked)</field>
	<field name="comment"># Find all commit stats matching the given criteria.</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +ref+ is the ref from which to begin (SHA1 or name) or nil for --all</field>
	<field name="comment">#   +options+ is a Hash of optional arguments to git</field>
	<field name="comment">#     :max_count is the maximum number of commits to fetch</field>
	<field name="comment">#     :skip is the number of commits to skip</field>
	<field name="comment">#</field>
	<field name="comment"># Returns assoc array [sha, Grit::Commit[] (baked)]</field>
	<field name="comment"># Parse out commit information into an array of baked Commit objects</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +text+ is the text output from the git command (raw format)</field>
	<field name="comment">#</field>
	<field name="comment"># Returns assoc array [sha, Grit::Commit[] (baked)]</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Convert to an easy-to-traverse structure</field>
	<field name="comment"># private</field>
	<field name="comment"># CommitStats</field>
	<field name="comment"># Grit</field>
	<field name="filename">config.rb</field>
	<field name="filename_full">.\grit/lib/grit/config.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Config</field>
	<field name="comment"># Grit</field>
	<field name="filename">diff.rb</field>
	<field name="filename_full">.\grit/lib/grit/diff.rb</field>
	<field name="language">rb</field>
	<field name="comment"># shift away the 2 `rename from/to ...` lines</field>
	<field name="comment"># Diff</field>
	<field name="comment"># Grit</field>
	<field name="filename">errors.rb</field>
	<field name="filename_full">.\grit/lib/grit/errors.rb</field>
	<field name="language">rb</field>
	<field name="filename">git-ruby.rb</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby.rb</field>
	<field name="language">rb</field>
	<field name="comment"># the functions in this module intercept the calls to git binary</field>
	<field name="comment"># made by the grit objects and attempts to run them in pure ruby</field>
	<field name="comment"># if it will be faster, or if the git binary is not available (!!TODO!!)</field>
	<field name="comment"># lib/grit/tree.rb:16:      output = repo.git.ls_tree({}, treeish, *paths)</field>
	<field name="comment"># git diff --full-index 'ec037431382e83c3e95d4f2b3d145afbac8ea55d' 'f1ec1aea10986159456846b8a05615b87828d6c6'</field>
	<field name="comment"># this is all I can do right now</field>
	<field name="comment"># pure rev-list</field>
	<field name="comment"># Split ranges, but don't split when specifying a ref:path.</field>
	<field name="comment"># Don't split HEAD:some/path/in/repo..txt</field>
	<field name="comment"># Do split sha1..sha2</field>
	<field name="comment"># passing in a sha - just no-op it</field>
	<field name="comment">## check packed-refs file, too</field>
	<field name="comment">## !! more - partials and such !!</field>
	<field name="comment"># revert to calling git - grr</field>
	<field name="comment"># Annotated tags in packed-refs include a reference</field>
	<field name="comment"># to the commit object on the following line.</field>
	<field name="comment">#if @bytes_read > 5242880 # 5.megabytes</field>
	<field name="comment">#  bytes = @bytes_read</field>
	<field name="comment">#  @bytes_read = 0</field>
	<field name="comment">#  raise Grit::Git::GitTimeout.new(command, bytes)</field>
	<field name="comment">#end</field>
	<field name="comment"># TODO</field>
	<field name="comment"># git grep -n 'foo' 'master'</field>
	<field name="comment"># git log --pretty='raw' --max-count='1' 'master' -- 'LICENSE'</field>
	<field name="comment"># git log --pretty='raw' --max-count='1' 'master' -- 'test'</field>
	<field name="filename">git.rb</field>
	<field name="filename_full">.\grit/lib/grit/git.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Raised when a native git command exits with non-zero.</field>
	<field name="comment"># The full git command that failed as a String.</field>
	<field name="comment"># The integer exit status.</field>
	<field name="comment"># Everything output on the command's stderr as a String.</field>
	<field name="comment"># 5.megabytes</field>
	<field name="comment"># Check if a normal file exists on the filesystem</field>
	<field name="comment">#   +file+ is the relative path from the Git dir</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Boolean</field>
	<field name="comment"># Read a normal file from the filesystem.</field>
	<field name="comment">#   +file+ is the relative path from the Git dir</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the String contents of the file</field>
	<field name="comment"># Write a normal file to the filesystem.</field>
	<field name="comment">#   +file+ is the relative path from the Git dir</field>
	<field name="comment">#   +contents+ is the String content to be written</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Delete a normal file from the filesystem</field>
	<field name="comment">#   +file+ is the relative path from the Git dir</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Move a normal file</field>
	<field name="comment">#   +from+ is the relative path to the current file</field>
	<field name="comment">#   +to+ is the relative path to the destination file</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Make a directory</field>
	<field name="comment">#   +dir+ is the relative path to the directory to create</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Chmod the the file or dir and everything beneath</field>
	<field name="comment">#   +file+ is the relative path from the Git dir</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Checks if the patch of a commit can be applied to the given head.</field>
	<field name="comment">#</field>
	<field name="comment"># options     - grit command options hash</field>
	<field name="comment"># head_sha    - String SHA or ref to check the patch against.</field>
	<field name="comment"># applies_sha - String SHA of the patch.  The patch itself is retrieved</field>
	<field name="comment">#               with #get_patch.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns 0 if the patch applies cleanly (according to `git apply`), or</field>
	<field name="comment"># an Integer that is the sum of the failed exit statuses.</field>
	<field name="comment"># Gets a patch for a given SHA using `git diff`.</field>
	<field name="comment">#</field>
	<field name="comment"># options     - grit command options hash</field>
	<field name="comment"># applies_sha - String SHA to get the patch from, using this command:</field>
	<field name="comment">#               `git diff #{applies_sha}^ #{applies_sha}`</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the String patch from `git diff`.</field>
	<field name="comment"># Applies the given patch against the given SHA of the current repo.</field>
	<field name="comment">#</field>
	<field name="comment"># options  - grit command hash</field>
	<field name="comment"># head_sha - String SHA or ref to apply the patch to.</field>
	<field name="comment"># patch    - The String patch to apply.  Get this from #get_patch.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the String Tree SHA on a successful patch application, or false.</field>
	<field name="comment"># Execute a git command, bypassing any library implementation.</field>
	<field name="comment">#</field>
	<field name="comment"># cmd - The name of the git command as a Symbol. Underscores are</field>
	<field name="comment">#   converted to dashes as in :rev_parse => 'rev-parse'.</field>
	<field name="comment"># options - Command line option arguments passed to the git command.</field>
	<field name="comment">#   Single char keys are converted to short options (:a => -a).</field>
	<field name="comment">#   Multi-char keys are converted to long options (:arg => '--arg').</field>
	<field name="comment">#   Underscores in keys are converted to dashes. These special options</field>
	<field name="comment">#   are used to control command execution and are not passed in command</field>
	<field name="comment">#   invocation:</field>
	<field name="comment">#     :timeout - Maximum amount of time the command can run for before</field>
	<field name="comment">#       being aborted. When true, use Grit::Git.git_timeout; when numeric,</field>
	<field name="comment">#       use that number of seconds; when false or 0, disable timeout.</field>
	<field name="comment">#     :base - Set false to avoid passing the --git-dir argument when</field>
	<field name="comment">#       invoking the git command.</field>
	<field name="comment">#     :env - Hash of environment variable key/values that are set on the</field>
	<field name="comment">#       child process.</field>
	<field name="comment">#     :raise - When set true, commands that exit with a non-zero status</field>
	<field name="comment">#       raise a CommandFailed exception. This option is available only on</field>
	<field name="comment">#       platforms that support fork(2).</field>
	<field name="comment">#     :process_info - By default, a single string with output written to</field>
	<field name="comment">#       the process's stdout is returned. Setting this option to true</field>
	<field name="comment">#       results in a [exitstatus, out, err] tuple being returned instead.</field>
	<field name="comment"># args - Non-option arguments passed on the command line.</field>
	<field name="comment">#</field>
	<field name="comment"># Optionally yields to the block an IO object attached to the child</field>
	<field name="comment"># process's STDIN.</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#   git.native(:rev_list, {:max_count => 10, :header => true}, "master")</field>
	<field name="comment">#</field>
	<field name="comment"># Returns a String with all output written to the child process's stdout</field>
	<field name="comment">#   when the :process_info option is not set.</field>
	<field name="comment"># Returns a [exitstatus, out, err] tuple when the :process_info option is</field>
	<field name="comment">#   set. The exitstatus is an small integer that was the process's exit</field>
	<field name="comment">#   status. The out and err elements are the data written to stdout and</field>
	<field name="comment">#   stderr as Strings.</field>
	<field name="comment"># Raises Grit::Git::GitTimeout when the timeout is exceeded or when more</field>
	<field name="comment">#   than Grit::Git.git_max_size bytes are output.</field>
	<field name="comment"># Raises Grit::Git::CommandFailed when the :raise option is set true and the</field>
	<field name="comment">#   git command exits with a non-zero exit status. The CommandFailed's #command,</field>
	<field name="comment">#   #exitstatus, and #err attributes can be used to retrieve additional</field>
	<field name="comment">#   detail about the error.</field>
	<field name="comment"># special option arguments</field>
	<field name="comment"># fall back to using a shell when the last argument looks like it wants to</field>
	<field name="comment"># start a pipeline for compatibility with previous versions of grit.</field>
	<field name="comment"># more options</field>
	<field name="comment"># build up the git process argv</field>
	<field name="comment"># run it and deal with fallout</field>
	<field name="comment"># Methods not defined by a library implementation execute the git command</field>
	<field name="comment"># using #native, passing the method name as the git command name.</field>
	<field name="comment">#</field>
	<field name="comment"># Examples:</field>
	<field name="comment">#   git.rev_list({:max_count => 10, :header => true}, "master")</field>
	<field name="comment"># Transform a ruby-style options hash to command-line arguments sutiable for</field>
	<field name="comment"># use with Kernel::exec. No shell escaping is performed.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns an Array of String option arguments.</field>
	<field name="comment"># ignore</field>
	<field name="comment"># ignore</field>
	<field name="comment"># Simple wrapper around Timeout::timeout.</field>
	<field name="comment">#</field>
	<field name="comment"># seconds - Float number of seconds before a Timeout::Error is raised. When</field>
	<field name="comment">#   true, the Grit::Git.git_timeout value is used. When the timeout is less</field>
	<field name="comment">#   than or equal to 0, no timeout is established.</field>
	<field name="comment">#</field>
	<field name="comment"># Raises Timeout::Error when the timeout has elapsed.</field>
	<field name="comment"># DEPRECATED OPEN3-BASED COMMAND EXECUTION</field>
	<field name="comment"># Transform Ruby style options into git command line options</field>
	<field name="comment">#   +options+ is a hash of Ruby style options</field>
	<field name="comment">#</field>
	<field name="comment"># Returns String[]</field>
	<field name="comment">#   e.g. ["--max-count=10", "--header"]</field>
	<field name="comment"># ignore</field>
	<field name="comment"># ignore</field>
	<field name="comment"># Git</field>
	<field name="comment"># Grit</field>
	<field name="filename">index.rb</field>
	<field name="filename_full">.\grit/lib/grit/index.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Public: Gets/Sets the Grit::Repo to which this index belongs.</field>
	<field name="comment"># Public: Gets/Sets the Hash tree map that holds the changes to be made</field>
	<field name="comment"># in the next commit.</field>
	<field name="comment"># Public: Gets/Sets the Grit::Tree object representing the tree upon</field>
	<field name="comment"># which the next commit will be based.</field>
	<field name="comment"># Public: if a tree or commit is written, this stores the size of that object</field>
	<field name="comment"># Initialize a new Index object.</field>
	<field name="comment">#</field>
	<field name="comment"># repo - The Grit::Repo to which the index belongs.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the newly initialized Grit::Index.</field>
	<field name="comment"># Public: Add a file to the index.</field>
	<field name="comment">#</field>
	<field name="comment"># path - The String file path including filename (no slash prefix).</field>
	<field name="comment"># data - The String binary contents of the file.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing.</field>
	<field name="comment"># Public: Delete the given file from the index.</field>
	<field name="comment">#</field>
	<field name="comment"># path - The String file path including filename (no slash prefix).</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing.</field>
	<field name="comment"># Public: Read the contents of the given Tree into the index to use as a</field>
	<field name="comment"># starting point for the index.</field>
	<field name="comment">#</field>
	<field name="comment"># tree - The String branch/tag/sha of the Git tree object.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing.</field>
	<field name="comment"># Public: Commit the contents of the index.  This method supports two</field>
	<field name="comment"># formats for arguments:</field>
	<field name="comment">#</field>
	<field name="comment"># message - The String commit message.</field>
	<field name="comment"># options - An optional Hash of index options.</field>
	<field name="comment">#           :parents        - Array of String commit SHA1s or Grit::Commit</field>
	<field name="comment">#                             objects to attach this commit to to form a </field>
	<field name="comment">#                             new head (default: nil).</field>
	<field name="comment">#           :actor          - The Grit::Actor details of the user making</field>
	<field name="comment">#                             the commit (default: nil).</field>
	<field name="comment">#           :last_tree      - The String SHA1 of a tree to compare with</field>
	<field name="comment">#                             in order to avoid making empty commits</field>
	<field name="comment">#                             (default: nil).</field>
	<field name="comment">#           :head           - The String branch name to write this head to</field>
	<field name="comment">#                             (default: nil).</field>
	<field name="comment">#           :committed_date - The Time that the commit was made.</field>
	<field name="comment">#                             (Default: Time.now)</field>
	<field name="comment">#           :authored_date  - The Time that the commit was authored.</field>
	<field name="comment">#                             (Default: committed_date)</field>
	<field name="comment">#</field>
	<field name="comment"># The legacy argument style looks like:</field>
	<field name="comment">#</field>
	<field name="comment"># message   - The String commit message.</field>
	<field name="comment"># parents   - Array of String commit SHA1s or Grit::Commit objects to</field>
	<field name="comment">#             attach this commit to to form a new head (default: nil).</field>
	<field name="comment"># actor     - The Grit::Actor details of the user making the commit</field>
	<field name="comment">#             (default: nil).</field>
	<field name="comment"># last_tree - The String SHA1 of a tree to compare with in order to avoid</field>
	<field name="comment">#             making empty commits (default: nil).</field>
	<field name="comment"># head      - The String branch name to write this head to</field>
	<field name="comment">#             (default: "master").</field>
	<field name="comment">#</field>
	<field name="comment"># Returns a String of the SHA1 of the new commit.</field>
	<field name="comment"># don't write identical commits</field>
	<field name="comment"># Recursively write a tree to the index.</field>
	<field name="comment">#</field>
	<field name="comment"># tree -     The Hash tree map:</field>
	<field name="comment">#            key - The String directory or filename.</field>
	<field name="comment">#            val - The Hash submap or the String contents of the file.</field>
	<field name="comment"># now_tree - The Grit::Tree representing the a previous tree upon which</field>
	<field name="comment">#            this tree will be based (default: nil).</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the String SHA1 String of the tree.</field>
	<field name="comment"># fill in original tree</field>
	<field name="comment">## remove zero-padding</field>
	<field name="comment"># overwrite with new tree contents</field>
	<field name="comment"># must be a sha</field>
	<field name="comment"># leading 0s not allowed</field>
	<field name="comment"># slashes not allowed</field>
	<field name="comment"># Write a blob to the index.</field>
	<field name="comment">#</field>
	<field name="comment"># data - The String data to write.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the String SHA1 of the new blob.</field>
	<field name="comment"># Index</field>
	<field name="comment"># Grit</field>
	<field name="filename">lazy.rb</field>
	<field name="filename_full">.\grit/lib/grit/lazy.rb</field>
	<field name="language">rb</field>
	<field name="comment">##</field>
	<field name="comment"># Allows attributes to be declared as lazy, meaning that they won't be</field>
	<field name="comment"># computed until they are asked for.</field>
	<field name="comment">#</field>
	<field name="comment"># Works by delegating each lazy_reader to a cached lazy_source method.</field>
	<field name="comment">#</field>
	<field name="comment"># class Person</field>
	<field name="comment">#   lazy_reader :eyes</field>
	<field name="comment">#</field>
	<field name="comment">#   def lazy_source</field>
	<field name="comment">#     OpenStruct.new(:eyes => 2)</field>
	<field name="comment">#   end</field>
	<field name="comment"># end</field>
	<field name="comment">#</field>
	<field name="comment"># >> Person.new.eyes</field>
	<field name="comment"># => 2</field>
	<field name="comment">#</field>
	<field name="filename">merge.rb</field>
	<field name="filename_full">.\grit/lib/grit/merge.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Merge</field>
	<field name="comment"># Grit</field>
	<field name="filename">ref.rb</field>
	<field name="filename_full">.\grit/lib/grit/ref.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Find all Refs</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +options+ is a Hash of options</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Ref[] (baked)</field>
	<field name="comment"># Instantiate a new Head</field>
	<field name="comment">#   +name+ is the name of the head</field>
	<field name="comment">#   +commit+ is the Commit that the head points to</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Head (baked)</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Ref</field>
	<field name="comment"># A Head is a named reference to a Commit. Every Head instance contains a name</field>
	<field name="comment"># and a Commit object.</field>
	<field name="comment">#</field>
	<field name="comment">#   r = Grit::Repo.new("/path/to/repo")</field>
	<field name="comment">#   h = r.heads.first</field>
	<field name="comment">#   h.name       # => "master"</field>
	<field name="comment">#   h.commit     # => #<Grit::Commit "1c09f116cbc2cb4100fb6935bb162daa4723f455"></field>
	<field name="comment">#   h.commit.id  # => "1c09f116cbc2cb4100fb6935bb162daa4723f455"</field>
	<field name="comment"># Get the HEAD revision of the repo.</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +options+ is a Hash of options</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Head (baked)</field>
	<field name="comment"># Head</field>
	<field name="comment"># Grit</field>
	<field name="filename">repo.rb</field>
	<field name="filename_full">.\grit/lib/grit/repo.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Public: The String path of the Git repo.</field>
	<field name="comment"># Public: The String path to the working directory of the repo, or nil if</field>
	<field name="comment"># there is no working directory.</field>
	<field name="comment"># Public: The Boolean of whether or not the repo is bare.</field>
	<field name="comment"># Public: The Grit::Git command line interface object.</field>
	<field name="comment"># Public: Create a new Repo instance.</field>
	<field name="comment">#</field>
	<field name="comment"># path    - The String path to either the root git directory or the bare</field>
	<field name="comment">#           git repo. Bare repos are expected to end with ".git".</field>
	<field name="comment"># options - A Hash of options (default: {}):</field>
	<field name="comment">#           :is_bare - Boolean whether to consider the repo as bare even</field>
	<field name="comment">#                      if the repo name does not end with ".git".</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#</field>
	<field name="comment">#   r = Repo.new("/Users/tom/dev/normal")</field>
	<field name="comment">#   r = Repo.new("/Users/tom/public/bare.git")</field>
	<field name="comment">#   r = Repo.new("/Users/tom/public/bare", {:is_bare => true})</field>
	<field name="comment">#</field>
	<field name="comment"># Returns a newly initialized Grit::Repo.</field>
	<field name="comment"># Raises Grit::InvalidGitRepositoryError if the path exists but is not</field>
	<field name="comment">#   a Git repository.</field>
	<field name="comment"># Raises Grit::NoSuchPathError if the path does not exist.</field>
	<field name="comment"># Public: Initialize a git repository (create it on the filesystem). By</field>
	<field name="comment"># default, the newly created repository will contain a working directory.</field>
	<field name="comment"># If you would like to create a bare repo, use Grit::Repo.init_bare.</field>
	<field name="comment">#</field>
	<field name="comment"># path         - The String full path to the repo. Traditionally ends with</field>
	<field name="comment">#                "/<name>.git".</field>
	<field name="comment"># git_options  - A Hash of additional options to the git init command</field>
	<field name="comment">#                (default: {}).</field>
	<field name="comment"># repo_options - A Hash of additional options to the Grit::Repo.new call</field>
	<field name="comment">#                (default: {}).</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#</field>
	<field name="comment">#   Grit::Repo.init('/var/git/myrepo.git')</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the newly created Grit::Repo.</field>
	<field name="comment"># Public: Initialize a bare git repository (create it on the filesystem).</field>
	<field name="comment">#</field>
	<field name="comment"># path         - The String full path to the repo. Traditionally ends with</field>
	<field name="comment">#                "/<name>.git".</field>
	<field name="comment"># git_options  - A Hash of additional options to the git init command</field>
	<field name="comment">#                (default: {}).</field>
	<field name="comment"># repo_options - A Hash of additional options to the Grit::Repo.new call</field>
	<field name="comment">#                (default: {}).</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#</field>
	<field name="comment">#   Grit::Repo.init_bare('/var/git/myrepo.git')</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the newly created Grit::Repo.</field>
	<field name="comment"># Public: Initialize a bare Git repository (create it on the filesystem)</field>
	<field name="comment"># or, if the repo already exists, simply return it.</field>
	<field name="comment">#</field>
	<field name="comment"># path         - The String full path to the repo. Traditionally ends with</field>
	<field name="comment">#                "/<name>.git".</field>
	<field name="comment"># git_options  - A Hash of additional options to the git init command</field>
	<field name="comment">#                (default: {}).</field>
	<field name="comment"># repo_options - A Hash of additional options to the Grit::Repo.new call</field>
	<field name="comment">#                (default: {}).</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the new or existing Grit::Repo.</field>
	<field name="comment"># Public: Create a bare fork of this repository.</field>
	<field name="comment">#</field>
	<field name="comment"># path    - The String full path of where to create the new fork.</field>
	<field name="comment">#           Traditionally ends with "/<name>.git".</field>
	<field name="comment"># options - The Hash of additional options to the git clone command.</field>
	<field name="comment">#           These options will be merged on top of the default Hash:</field>
	<field name="comment">#           {:bare => true, :shared => true}.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the newly forked Grit::Repo.</field>
	<field name="comment"># Public: Fork a bare git repository from another repo.</field>
	<field name="comment">#</field>
	<field name="comment"># path    - The String full path of the repo from which to fork..</field>
	<field name="comment">#           Traditionally ends with "/<name>.git".</field>
	<field name="comment"># options - The Hash of additional options to the git clone command.</field>
	<field name="comment">#           These options will be merged on top of the default Hash:</field>
	<field name="comment">#           {:bare => true, :shared => true}.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the newly forked Grit::Repo.</field>
	<field name="comment"># Public: Return the full Git objects from the given SHAs.  Only Commit</field>
	<field name="comment"># objects are parsed for now.</field>
	<field name="comment">#</field>
	<field name="comment"># *shas - Array of String SHAs.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns an Array of Grit objects (Grit::Commit).</field>
	<field name="comment"># Parses `git cat-file --batch` output, returning an array of Grit objects.</field>
	<field name="comment">#</field>
	<field name="comment"># text - Raw String output.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns an Array of Grit objects (Grit::Commit).</field>
	<field name="comment"># The project's description. Taken verbatim from GIT_REPO/description</field>
	<field name="comment">#</field>
	<field name="comment"># Returns String</field>
	<field name="comment"># An array of Head objects representing the branch heads in</field>
	<field name="comment"># this repo</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Head[] (baked)</field>
	<field name="comment"># Object reprsenting the current repo head.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Head (baked)</field>
	<field name="comment"># Commits current index</field>
	<field name="comment">#</field>
	<field name="comment"># Returns true/false if commit worked</field>
	<field name="comment"># Commits all tracked and modified files</field>
	<field name="comment">#</field>
	<field name="comment"># Returns true/false if commit worked</field>
	<field name="comment"># Adds files to the index</field>
	<field name="comment"># Remove files from the index</field>
	<field name="comment"># An array of Tag objects that are available in this repo</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Tag[] (baked)</field>
	<field name="comment"># Finds the most recent annotated tag name that is reachable from a commit.</field>
	<field name="comment">#</field>
	<field name="comment">#   @repo.recent_tag_name('master')</field>
	<field name="comment">#   # => "v1.0-0-abcdef"</field>
	<field name="comment">#</field>
	<field name="comment"># committish - optional commit SHA, branch, or tag name.</field>
	<field name="comment"># options    - optional hash of options to pass to git.</field>
	<field name="comment">#              Default: {:always => true}</field>
	<field name="comment">#              :tags => true      # use lightweight tags too.</field>
	<field name="comment">#              :abbrev => Integer # number of hex digits to form the unique</field>
	<field name="comment">#                name.  Defaults to 7.</field>
	<field name="comment">#              :long => true      # always output tag + commit sha</field>
	<field name="comment">#              # see `git describe` docs for more options.</field>
	<field name="comment">#</field>
	<field name="comment"># Returns the String tag name, or just the commit if no tag is</field>
	<field name="comment"># found.  If there have been updates since the tag was made, a</field>
	<field name="comment"># suffix is added with the number of commits since the tag, and</field>
	<field name="comment"># the abbreviated object name of the most recent commit.</field>
	<field name="comment"># Returns nil if the committish value is not found.</field>
	<field name="comment"># An array of Remote objects representing the remote branches in</field>
	<field name="comment"># this repo</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Remote[] (baked)</field>
	<field name="comment"># takes an array of remote names and last pushed dates</field>
	<field name="comment"># fetches from all of the remotes where the local fetch</field>
	<field name="comment"># date is earlier than the passed date, then records the</field>
	<field name="comment"># last fetched date</field>
	<field name="comment">#</field>
	<field name="comment"># { 'origin' => date,</field>
	<field name="comment">#   'peter => date,</field>
	<field name="comment"># }</field>
	<field name="comment"># TODO: check against date</field>
	<field name="comment"># An array of Ref objects representing the refs in</field>
	<field name="comment"># this repo</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Ref[] (baked)</field>
	<field name="comment"># returns an array of hashes representing all references</field>
	<field name="comment"># An array of Commit objects representing the history of a given ref/commit</field>
	<field name="comment">#   +start+ is the branch/commit name (default 'master')</field>
	<field name="comment">#   +max_count+ is the maximum number of commits to return (default 10, use +false+ for all)</field>
	<field name="comment">#   +skip+ is the number of commits to skip (default 0)</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit[] (baked)</field>
	<field name="comment"># The Commits objects that are reachable via +to+ but not via +from+</field>
	<field name="comment"># Commits are returned in chronological order.</field>
	<field name="comment">#   +from+ is the branch/commit name of the younger item</field>
	<field name="comment">#   +to+ is the branch/commit name of the older item</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit[] (baked)</field>
	<field name="comment"># The Commits objects that are newer than the specified date.</field>
	<field name="comment"># Commits are returned in chronological order.</field>
	<field name="comment">#   +start+ is the branch/commit name (default 'master')</field>
	<field name="comment">#   +since+ is a string representing a date/time</field>
	<field name="comment">#   +extra_options+ is a hash of extra options</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit[] (baked)</field>
	<field name="comment"># The number of commits reachable by the given branch/commit</field>
	<field name="comment">#   +start+ is the branch/commit name (default 'master')</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Integer</field>
	<field name="comment"># The Commit object for the specified id</field>
	<field name="comment">#   +id+ is the SHA1 identifier of the commit</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit (baked)</field>
	<field name="comment"># Returns a list of commits that is in +other_repo+ but not in self</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit[]</field>
	<field name="comment"># TODO: we should be able to figure out the branch point, rather than</field>
	<field name="comment"># rev-list'ing the whole thing</field>
	<field name="comment"># PARENTS:</field>
	<field name="comment"># NO PARENTS:</field>
	<field name="comment"># The Tree object for the given treeish reference</field>
	<field name="comment">#   +treeish+ is the reference (default 'master')</field>
	<field name="comment">#   +paths+ is an optional Array of directory paths to restrict the tree (default [])</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#   repo.tree('master', ['lib/'])</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Tree (baked)</field>
	<field name="comment"># quick way to get a simple array of hashes of the entries</field>
	<field name="comment"># of a single tree or recursive tree listing from a given</field>
	<field name="comment"># sha or reference</field>
	<field name="comment">#   +treeish+ is the reference (default 'master')</field>
	<field name="comment">#   +options+ is a hash or options - currently only takes :recursive</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#   repo.lstree('master', :recursive => true)</field>
	<field name="comment">#</field>
	<field name="comment"># Returns array of hashes - one per tree entry</field>
	<field name="comment"># check recursive option</field>
	<field name="comment"># mode, type, sha, size, path</field>
	<field name="comment"># The Blob object for the given id</field>
	<field name="comment">#   +id+ is the SHA1 id of the blob</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Blob (unbaked)</field>
	<field name="comment"># The commit log for a treeish</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Commit[]</field>
	<field name="comment"># The diff from commit +a+ to commit +b+, optionally restricted to the given file(s)</field>
	<field name="comment">#   +a+ is the base commit</field>
	<field name="comment">#   +b+ is the other commit</field>
	<field name="comment">#   +paths+ is an optional list of file paths on which to restrict the diff</field>
	<field name="comment"># The commit diff for the given commit</field>
	<field name="comment">#   +commit+ is the commit name/id</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Diff[]</field>
	<field name="comment"># Archive the given treeish</field>
	<field name="comment">#   +treeish+ is the treeish name/id (default 'master')</field>
	<field name="comment">#   +prefix+ is the optional prefix</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#   repo.archive_tar</field>
	<field name="comment">#   # => <String containing tar archive></field>
	<field name="comment">#</field>
	<field name="comment">#   repo.archive_tar('a87ff14')</field>
	<field name="comment">#   # => <String containing tar archive for commit a87ff14></field>
	<field name="comment">#</field>
	<field name="comment">#   repo.archive_tar('master', 'myproject/')</field>
	<field name="comment">#   # => <String containing tar archive and prefixed with 'myproject/'></field>
	<field name="comment">#</field>
	<field name="comment"># Returns String (containing tar archive)</field>
	<field name="comment"># Archive and gzip the given treeish</field>
	<field name="comment">#   +treeish+ is the treeish name/id (default 'master')</field>
	<field name="comment">#   +prefix+ is the optional prefix</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#   repo.archive_tar_gz</field>
	<field name="comment">#   # => <String containing tar.gz archive></field>
	<field name="comment">#</field>
	<field name="comment">#   repo.archive_tar_gz('a87ff14')</field>
	<field name="comment">#   # => <String containing tar.gz archive for commit a87ff14></field>
	<field name="comment">#</field>
	<field name="comment">#   repo.archive_tar_gz('master', 'myproject/')</field>
	<field name="comment">#   # => <String containing tar.gz archive and prefixed with 'myproject/'></field>
	<field name="comment">#</field>
	<field name="comment"># Returns String (containing tar.gz archive)</field>
	<field name="comment"># Write an archive directly to a file</field>
	<field name="comment">#   +treeish+ is the treeish name/id (default 'master')</field>
	<field name="comment">#   +prefix+ is the optional prefix (default nil)</field>
	<field name="comment">#   +filename+ is the name of the file (default 'archive.tar.gz')</field>
	<field name="comment">#   +format+ is the optional format (default nil)</field>
	<field name="comment">#   +pipe+ is the command to run the output through (default 'gzip')</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Enable git-daemon serving of this repository by writing the</field>
	<field name="comment"># git-daemon-export-ok file to its git directory</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Disable git-daemon serving of this repository by ensuring there is no</field>
	<field name="comment"># git-daemon-export-ok file in its git directory</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># The list of alternates for this repo</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Array[String] (pathnames of alternates)</field>
	<field name="comment"># Sets the alternates</field>
	<field name="comment">#   +alts+ is the Array of String paths representing the alternates</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Rename the current repository directory.</field>
	<field name="comment">#   +name+ is the new name</field>
	<field name="comment">#</field>
	<field name="comment"># Returns nothing</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Repo</field>
	<field name="comment"># Grit</field>
	<field name="filename">ruby1.9.rb</field>
	<field name="filename_full">.\grit/lib/grit/ruby1.9.rb</field>
	<field name="language">rb</field>
	<field name="filename">status.rb</field>
	<field name="filename_full">.\grit/lib/grit/status.rb</field>
	<field name="language">rb</field>
	<field name="comment"># enumerable method</field>
	<field name="comment"># find untracked in working dir</field>
	<field name="comment"># find modified in tree</field>
	<field name="comment"># find added but not committed - new files</field>
	<field name="comment"># compares the index and the working directory</field>
	<field name="comment"># compares the index and the repository</field>
	<field name="filename">submodule.rb</field>
	<field name="filename_full">.\grit/lib/grit/submodule.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Create a Submodule containing just the specified attributes</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +atts+ is a Hash of instance variable data</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Submodule (unbaked)</field>
	<field name="comment"># Initializer for Submodule.create</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +atts+ is a Hash of instance variable data</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Submodule</field>
	<field name="comment"># The url of this submodule</field>
	<field name="comment">#   +ref+ is the committish that should be used to look up the url</field>
	<field name="comment">#</field>
	<field name="comment"># Returns String</field>
	<field name="comment"># The configuration information for the given +repo+</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +ref+ is the committish (defaults to 'master')</field>
	<field name="comment">#</field>
	<field name="comment"># Returns a Hash of { <path:String> => { 'url' => <url:String>, 'id' => <id:String> } }</field>
	<field name="comment"># Returns {} if no .gitmodules file was found</field>
	<field name="comment"># ignore</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Submodule</field>
	<field name="comment"># Grit</field>
	<field name="filename">tag.rb</field>
	<field name="filename_full">.\grit/lib/grit/tag.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Writes a new tag object from a hash</field>
	<field name="comment">#  +repo+ is a Grit repo</field>
	<field name="comment">#  +hash+ is the hash of tag values</field>
	<field name="comment">#</field>
	<field name="comment"># Returns a hash with +sha+ and +size+ of the created object</field>
	<field name="comment"># Parses the results from `cat-file -p`</field>
	<field name="comment">#</field>
	<field name="comment"># data - String tag object data.  Example:</field>
	<field name="comment">#          object 7bcc0ee821cdd133d8a53e8e7173a334fef448aa</field>
	<field name="comment">#          type commit</field>
	<field name="comment">#          tag v0.7.0</field>
	<field name="comment">#          tagger USER <EMAIL> DATE</field>
	<field name="comment">#          </field>
	<field name="comment">#          v0.7.0</field>
	<field name="comment">#</field>
	<field name="comment"># Returns parsed Hash.  Example: </field>
	<field name="comment">#   {:message => "...", :tagger => "bob", :tag_date => ...}</field>
	<field name="comment"># blank line</field>
	<field name="filename">tree.rb</field>
	<field name="filename_full">.\grit/lib/grit/tree.rb</field>
	<field name="language">rb</field>
	<field name="comment"># Construct the contents of the tree</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +treeish+ is the reference</field>
	<field name="comment">#   +paths+ is an optional Array of directory paths to restrict the tree</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Tree (baked)</field>
	<field name="comment"># Create an unbaked Tree containing just the specified attributes</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +atts+ is a Hash of instance variable data</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Tree (unbaked)</field>
	<field name="comment"># Initializer for Tree.create</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +atts+ is a Hash of instance variable data</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Tree (unbaked)</field>
	<field name="comment"># Parse a content item and create the appropriate object</field>
	<field name="comment">#   +repo+ is the Repo</field>
	<field name="comment">#   +text+ is the single line containing the items data in `git ls-tree` format</field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Blob or Grit::Tree</field>
	<field name="comment"># Find the named object in this tree's contents</field>
	<field name="comment">#</field>
	<field name="comment"># Examples</field>
	<field name="comment">#   Repo.new('/path/to/grit').tree/'lib'</field>
	<field name="comment">#   # => #<Grit::Tree "6cc23ee138be09ff8c28b07162720018b244e95e"></field>
	<field name="comment">#   Repo.new('/path/to/grit').tree/'README.txt'</field>
	<field name="comment">#   # => #<Grit::Blob "8b1e02c0fb554eed2ce2ef737a68bb369d7527df"></field>
	<field name="comment">#</field>
	<field name="comment"># Returns Grit::Blob or Grit::Tree or nil if not found</field>
	<field name="comment"># Pretty object inspection</field>
	<field name="comment"># Find only Tree objects from contents</field>
	<field name="comment"># Find only Blob objects from contents</field>
	<field name="comment"># Compares trees by name</field>
	<field name="comment"># Tree</field>
	<field name="comment"># Grit</field>
	<field name="filename">git-ruby</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby</field>
	<field name="filename">commit_db.rb</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby/commit_db.rb</field>
	<field name="language">rb</field>
	<field name="comment"># find all refs/heads, for each</field>
	<field name="comment"># add branch if not there</field>
	<field name="comment"># go though all commits in branch</field>
	<field name="comment"># add new commit_branches a</field>
	<field name="comment"># and commit_nodes for each new one</field>
	<field name="comment"># stop if reach commit that already has branch and node links</field>
	<field name="comment"># no commit db</field>
	<field name="filename">git_object.rb</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby/git_object.rb</field>
	<field name="language">rb</field>
	<field name="comment">#</field>
	<field name="comment"># converted from the gitrb project</field>
	<field name="comment">#</field>
	<field name="comment"># authors:</field>
	<field name="comment">#    Matthias Lederhofer <matled@gmx.net></field>
	<field name="comment">#    Simon 'corecode' Schubert <corecode@fs.ei.tum.de></field>
	<field name="comment">#    Scott Chacon <schacon@gmail.com></field>
	<field name="comment">#</field>
	<field name="comment"># provides native ruby access to git objects and pack files</field>
	<field name="comment">#</field>
	<field name="comment"># These classes translate the raw binary data kept in the sha encoded files</field>
	<field name="comment"># into parsed data that can then be used in another fashion</field>
	<field name="comment"># class for author/committer/tagger lines</field>
	<field name="comment"># base class for all git objects (blob, tree, commit, tag)</field>
	<field name="comment"># TODO: sort correctly</field>
	<field name="comment">#@entry.sort { |a,b| a.name <=> b.name }.</field>
	<field name="comment">#@entry.collect { |e| e.raw.join(' '), e.name].join("\t") }.join("\n")</field>
	<field name="filename">repository.rb</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby/repository.rb</field>
	<field name="language">rb</field>
	<field name="comment">#</field>
	<field name="comment"># converted from the gitrb project</field>
	<field name="comment">#</field>
	<field name="comment"># authors:</field>
	<field name="comment">#    Matthias Lederhofer <matled@gmx.net></field>
	<field name="comment">#    Simon 'corecode' Schubert <corecode@fs.ei.tum.de></field>
	<field name="comment">#    Scott Chacon <schacon@gmail.com></field>
	<field name="comment">#</field>
	<field name="comment"># provides native ruby access to git objects and pack files</field>
	<field name="comment">#</field>
	<field name="comment"># have to do this so it doesn't interfere with Grit::Diff</field>
	<field name="comment"># returns the loose objects object lazily</field>
	<field name="comment"># returns the array of pack list objects</field>
	<field name="comment"># prints out the type, shas and content of all of the pack files</field>
	<field name="comment"># returns a raw object given a SHA1</field>
	<field name="comment"># try packs</field>
	<field name="comment"># try loose storage</field>
	<field name="comment"># try packs again, maybe the object got packed in the meantime</field>
	<field name="comment">#        puts "*#{sha1o}*"</field>
	<field name="comment"># returns GitRuby object of any type given a SHA1</field>
	<field name="comment"># writes a raw object into the git repo</field>
	<field name="comment"># returns true or false if that sha exists in the db</field>
	<field name="comment">#maybe the object got packed in the meantime</field>
	<field name="comment"># returns true if the hex-packed sha is in the packfiles</field>
	<field name="comment"># try packs</field>
	<field name="comment"># returns true if the hex-packed sha is in the loose objects</field>
	<field name="comment"># returns the file type (as a symbol) of this sha</field>
	<field name="comment"># returns the file size (as an int) of this sha</field>
	<field name="comment"># returns the raw file contents of this sha</field>
	<field name="comment"># returns a 2-d hash of the tree</field>
	<field name="comment"># ['blob']['FILENAME'] = {:mode => '100644', :sha => SHA}</field>
	<field name="comment"># ['tree']['DIRNAME'] = {:mode => '040000', :sha => SHA}</field>
	<field name="comment"># returns the raw (cat-file) output for a tree</field>
	<field name="comment"># if given a commit sha, it will print the tree of that commit</field>
	<field name="comment"># if given a path limiter array, it will limit the output to those</field>
	<field name="comment"># if asked for recrusive trees, will traverse trees</field>
	<field name="comment"># pathing</field>
	<field name="comment"># Grabs tree contents recursively,</field>
	<field name="comment">#   e.g. `git ls-tree -r sha`</field>
	<field name="comment"># return array of tree entries</field>
	<field name="comment">## TODO : refactor this to remove the fugly</field>
	<field name="comment"># returns an array of GitRuby Commit objects</field>
	<field name="comment"># [ [sha, raw_output], [sha, raw_output], [sha, raw_output] ... ]</field>
	<field name="comment">#</field>
	<field name="comment"># takes the following options:</field>
	<field name="comment">#  :since - Time object specifying that you don't want commits BEFORE this</field>
	<field name="comment">#  :until - Time object specifying that you don't want commit AFTER this</field>
	<field name="comment">#  :first_parent - tells log to only walk first parent</field>
	<field name="comment">#  :path_limiter - string or array of strings to limit path</field>
	<field name="comment">#  :max_count - number to limit the output</field>
	<field name="comment"># shorten the list if it's longer than max_count (had to get everything in branches)</field>
	<field name="comment"># called by log() to recursively walk the tree</field>
	<field name="comment"># to prevent rechecking branches</field>
	<field name="comment"># follow all parents unless '--first-parent' is specified #</field>
	<field name="comment"># check for the last commit</field>
	<field name="comment"># hard coding this because i don't think we use it</field>
	<field name="comment"># hard coding this because i don't think we use it</field>
	<field name="comment"># one of the trees was bad or lcs isn't there - no diff</field>
	<field name="comment"># takes 2 tree shas and recursively walks them to find out what</field>
	<field name="comment"># files or directories have been modified in them and returns an</field>
	<field name="comment"># array of changes</field>
	<field name="comment"># [ [full_path, 'added', tree1_hash, nil],</field>
	<field name="comment">#   [full_path, 'removed', nil, tree2_hash],</field>
	<field name="comment">#   [full_path, 'modified', tree1_hash, tree2_hash]</field>
	<field name="comment">#  ]</field>
	<field name="comment"># handle empty trees</field>
	<field name="comment"># finding files that are different</field>
	<field name="comment"># not in parent</field>
	<field name="comment"># file changed</field>
	<field name="comment"># not in parent</field>
	<field name="comment"># file changed</field>
	<field name="comment"># returns true if the files in path_limiter were changed, or no path limiter</field>
	<field name="comment"># used by the log() function when passed with a path_limiter</field>
	<field name="comment"># find subtree</field>
	<field name="comment"># cleaning up array</field>
	<field name="comment"># to prevent rechecking branches</field>
	<field name="comment"># at the beginning of the branch</field>
	<field name="comment"># prevents the rare case of multiple branch starting points with</field>
	<field name="comment"># files that have never changed</field>
	<field name="comment"># go through the parents recursively, looking for somewhere this has been changed</field>
	<field name="comment"># remove anything found</field>
	<field name="comment"># we're done</field>
	<field name="comment"># recurse into parent</field>
	<field name="comment">## TODO : find most recent commit with change in any parent</field>
	<field name="comment"># initialize a git repository</field>
	<field name="comment"># already initialized</field>
	<field name="comment"># initialize directory</field>
	<field name="comment"># XXX this is here for backward compatibility with grit < 2.3.0</field>
	<field name="comment"># relative alternate objects paths are expanded relative to the</field>
	<field name="comment"># objects directory, not the git repository directory.</field>
	<field name="comment"># load alternate loose, too</field>
	<field name="filename">internal</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby/internal</field>
	<field name="filename">file_window.rb</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby/internal/file_window.rb</field>
	<field name="language">rb</field>
	<field name="comment">#</field>
	<field name="comment"># converted from the gitrb project</field>
	<field name="comment">#</field>
	<field name="comment"># authors:</field>
	<field name="comment">#    Matthias Lederhofer <matled@gmx.net></field>
	<field name="comment">#    Simon 'corecode' Schubert <corecode@fs.ei.tum.de></field>
	<field name="comment">#    Scott Chacon <schacon@gmail.com></field>
	<field name="comment">#</field>
	<field name="comment"># provides native ruby access to git objects and pack files</field>
	<field name="comment">#</field>
	<field name="filename">loose.rb</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby/internal/loose.rb</field>
	<field name="language">rb</field>
	<field name="comment">#</field>
	<field name="comment"># converted from the gitrb project</field>
	<field name="comment">#</field>
	<field name="comment"># authors:</field>
	<field name="comment">#    Matthias Lederhofer <matled@gmx.net></field>
	<field name="comment">#    Simon 'corecode' Schubert <corecode@fs.ei.tum.de></field>
	<field name="comment">#    Scott Chacon <schacon@gmail.com></field>
	<field name="comment">#</field>
	<field name="comment"># provides native ruby access to git objects and pack files</field>
	<field name="comment">#</field>
	<field name="comment"># write an object to a temporary file, then atomically rename it</field>
	<field name="comment"># into place; this ensures readers never see a half-written file</field>
	<field name="comment"># The path already exists; we raced with another process,</field>
	<field name="comment"># but it's OK, because by definition the content is the</field>
	<field name="comment"># same. So we can just ignore the error.</field>
	<field name="comment"># currently, I'm using the legacy format because it's easier to do</field>
	<field name="comment"># this function takes content and a type and writes out the loose object and returns a sha</field>
	<field name="comment"># simply figure out the sha</field>
	<field name="comment"># private</field>
	<field name="filename">pack.rb</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby/internal/pack.rb</field>
	<field name="language">rb</field>
	<field name="comment">#</field>
	<field name="comment"># converted from the gitrb project</field>
	<field name="comment">#</field>
	<field name="comment"># authors:</field>
	<field name="comment">#    Matthias Lederhofer <matled@gmx.net></field>
	<field name="comment">#    Simon 'corecode' Schubert <corecode@fs.ei.tum.de></field>
	<field name="comment">#    Scott Chacon <schacon@gmail.com></field>
	<field name="comment">#</field>
	<field name="comment"># provides native ruby access to git objects and pack files</field>
	<field name="comment">#</field>
	<field name="comment"># file went away. bail out without yielding.</field>
	<field name="comment"># read header</field>
	<field name="comment"># file went away. bail out without yielding.</field>
	<field name="comment"># shouldnt be anything open now</field>
	<field name="comment"># given an index file, list out the shas that it's packfile contains</field>
	<field name="comment">#puts type</field>
	<field name="filename">raw_object.rb</field>
	<field name="filename_full">.\grit/lib/grit/git-ruby/internal/raw_object.rb</field>
	<field name="language">rb</field>
	<field name="comment">#</field>
	<field name="comment"># converted from the gitrb project</field>
	<field name="comment">#</field>
	<field name="comment"># authors:</field>
	<field name="comment">#    Matthias Lederhofer <matled@gmx.net></field>
	<field name="comment">#    Simon 'corecode' Schubert <corecode@fs.ei.tum.de></field>
	<field name="comment">#</field>
	<field name="comment"># provides native ruby access to git objects and pack files</field>
	<field name="comment">#</field>
	<field name="filename">test</field>
	<field name="filename_full">.\grit/test</field>
	<field name="filename">helper.rb</field>
	<field name="filename_full">.\grit/test/helper.rb</field>
	<field name="language">rb</field>
	<field name="filename">profile.rb</field>
	<field name="filename_full">.\grit/test/profile.rb</field>
	<field name="language">rb</field>
	<field name="comment"># puts "#{indent}#{c.name} (#{c.id})"</field>
	<field name="comment">#500.times { puts `git --git-dir /Users/schacon/projects/ambition/.git ls-tree master` }</field>
	<field name="filename">suite.rb</field>
	<field name="filename_full">.\grit/test/suite.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_actor.rb</field>
	<field name="filename_full">.\grit/test/test_actor.rb</field>
	<field name="language">rb</field>
	<field name="comment"># output</field>
	<field name="comment"># from_string</field>
	<field name="comment"># inspect</field>
	<field name="comment"># to_s</field>
	<field name="filename">test_blame.rb</field>
	<field name="filename_full">.\grit/test/test_blame.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_blob.rb</field>
	<field name="filename_full">.\grit/test/test_blob.rb</field>
	<field name="language">rb</field>
	<field name="comment"># blob</field>
	<field name="comment"># size</field>
	<field name="comment"># data</field>
	<field name="comment"># mime_type</field>
	<field name="comment"># blame</field>
	<field name="comment"># c.expects(:__bake__).times(1)</field>
	<field name="comment"># assert_equal Tree, c.tree.class</field>
	<field name="comment"># inspect</field>
	<field name="filename">test_commit.rb</field>
	<field name="filename_full">.\grit/test/test_commit.rb</field>
	<field name="language">rb</field>
	<field name="comment"># __bake__</field>
	<field name="comment"># bake</field>
	<field name="comment"># short_name</field>
	<field name="comment"># count</field>
	<field name="comment"># diff</field>
	<field name="comment"># git diff --full-index 91169e1f5fa4de2eaea3f176461f5dc784796769 > test/fixtures/diff_p</field>
	<field name="comment"># git diff --full-index 59ddc32 13d27d5 > test/fixtures/diff_2</field>
	<field name="comment"># git diff --full-index 59ddc32 -- lib > test/fixtures/diff_f</field>
	<field name="comment"># git diff --full-index 59ddc32 13d27d5 -- lib > test/fixtures/diff_2f</field>
	<field name="comment"># diffs</field>
	<field name="comment"># git diff --full-index 91169e1f5fa4de2eaea3f176461f5dc784796769 > test/fixtures/diff_p</field>
	<field name="comment"># git show --full-index 634396b2f541a9f2d58b00be1a07f0c358b999b3 > test/fixtures/diff_i</field>
	<field name="comment"># to_s</field>
	<field name="comment"># to_patch</field>
	<field name="comment"># patch_id</field>
	<field name="comment"># inspect</field>
	<field name="comment"># to_hash</field>
	<field name="filename">test_commit_stats.rb</field>
	<field name="filename_full">.\grit/test/test_commit_stats.rb</field>
	<field name="language">rb</field>
	<field name="comment"># to_hash</field>
	<field name="filename">test_commit_write.rb</field>
	<field name="filename_full">.\grit/test/test_commit_write.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_config.rb</field>
	<field name="filename_full">.\grit/test/test_config.rb</field>
	<field name="language">rb</field>
	<field name="comment"># data</field>
	<field name="filename">test_diff.rb</field>
	<field name="filename_full">.\grit/test/test_diff.rb</field>
	<field name="language">rb</field>
	<field name="comment"># list_from_string</field>
	<field name="comment"># rename + update</field>
	<field name="comment"># updated file</field>
	<field name="comment"># deleted file</field>
	<field name="comment"># rename w/o update</field>
	<field name="comment"># created file</field>
	<field name="filename">test_git.rb</field>
	<field name="filename_full">.\grit/test/test_git.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_git_patching.rb</field>
	<field name="filename_full">.\grit/test/test_git_patching.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_grit.rb</field>
	<field name="filename_full">.\grit/test/test_grit.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_head.rb</field>
	<field name="filename_full">.\grit/test/test_head.rb</field>
	<field name="language">rb</field>
	<field name="comment"># inspect</field>
	<field name="comment"># heads with slashes</field>
	<field name="filename">test_index_status.rb</field>
	<field name="filename_full">.\grit/test/test_index_status.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_merge.rb</field>
	<field name="filename_full">.\grit/test/test_merge.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_raw.rb</field>
	<field name="filename_full">.\grit/test/test_raw.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_real.rb</field>
	<field name="filename_full">.\grit/test/test_real.rb</field>
	<field name="language">rb</field>
	<field name="comment"># require File.dirname(__FILE__) + '/helper'</field>
	<field name="comment">#</field>
	<field name="comment"># class TestReal < Test::Unit::TestCase</field>
	<field name="comment">#   def setup</field>
	<field name="comment">#     `rm -fr /Users/tom/dev/sandbox/grittest.git`</field>
	<field name="comment">#     `git --git-dir=/Users/tom/dev/sandbox/grittest.git init`</field>
	<field name="comment">#     @repo = Repo.new('/Users/tom/dev/sandbox/grittest.git')</field>
	<field name="comment">#   end</field>
	<field name="comment">#</field>
	<field name="comment">#   def test_real</field>
	<field name="comment">#     Grit.debug = true</field>
	<field name="comment">#</field>
	<field name="comment">#     index = @repo.index</field>
	<field name="comment">#     index.add('foo/bar/baz.txt', 'hello!')</field>
	<field name="comment">#     index.add('foo/qux/bam.txt', 'world!')</field>
	<field name="comment">#</field>
	<field name="comment">#     puts index.commit('first commit')</field>
	<field name="comment">#   end</field>
	<field name="comment"># end</field>
	<field name="filename">test_reality.rb</field>
	<field name="filename_full">.\grit/test/test_reality.rb</field>
	<field name="language">rb</field>
	<field name="comment"># class TestTreeRecursion < Test::Unit::TestCase</field>
	<field name="comment">#   def test_</field>
	<field name="comment">#     r = Repo.new("/Users/tom/dev/god")</field>
	<field name="comment">#     t = r.tree("HEAD")</field>
	<field name="comment">#</field>
	<field name="comment">#     recurse(t)</field>
	<field name="comment">#   end</field>
	<field name="comment">#</field>
	<field name="comment">#   def recurse(tree, indent = "")</field>
	<field name="comment">#     tree.contents.each do |c|</field>
	<field name="comment">#       # puts "#{indent}#{c.name} (#{c.id})"</field>
	<field name="comment">#       recurse(c, indent + "  ") if c.kind_of?(Tree)</field>
	<field name="comment">#     end</field>
	<field name="comment">#   end</field>
	<field name="comment"># end</field>
	<field name="filename">test_remote.rb</field>
	<field name="filename_full">.\grit/test/test_remote.rb</field>
	<field name="language">rb</field>
	<field name="comment"># inspect</field>
	<field name="filename">test_repo.rb</field>
	<field name="filename_full">.\grit/test/test_repo.rb</field>
	<field name="language">rb</field>
	<field name="comment"># new and existing</field>
	<field name="comment"># new</field>
	<field name="comment"># descriptions</field>
	<field name="comment"># refs</field>
	<field name="comment"># heads</field>
	<field name="comment"># branches</field>
	<field name="comment"># same as heads</field>
	<field name="comment"># commits</field>
	<field name="comment"># this is a blob SHA1</field>
	<field name="comment"># generate enough input to overflow the max pipe input buffer. this will cause</field>
	<field name="comment"># the git child process hang if stdin is not written at the same time as stdout</field>
	<field name="comment"># is being read.</field>
	<field name="comment">#</field>
	<field name="comment"># The pipe buffer is 32K on Mac, 64K on Linux 2.6.</field>
	<field name="comment"># 41K of input</field>
	<field name="comment"># commit_count</field>
	<field name="comment"># commit</field>
	<field name="comment"># tree</field>
	<field name="comment"># blob</field>
	<field name="comment"># init</field>
	<field name="comment"># init_bare</field>
	<field name="comment"># fork_bare</field>
	<field name="comment"># diff</field>
	<field name="comment"># commit_diff</field>
	<field name="comment"># init bare</field>
	<field name="comment"># archive</field>
	<field name="comment">#@r.archive_tar  -- no assertion being done here</field>
	<field name="comment"># archive_tar_gz</field>
	<field name="comment">#@r.archive_tar_gz -- again, no assertion</field>
	<field name="comment"># enable_daemon_serve</field>
	<field name="comment"># disable_daemon_serve</field>
	<field name="comment"># alternates</field>
	<field name="comment"># alternates=</field>
	<field name="comment"># inspect</field>
	<field name="comment"># log</field>
	<field name="comment"># commit_deltas_from</field>
	<field name="comment"># object_exist</field>
	<field name="filename">test_rgit_spaces.rb</field>
	<field name="filename_full">.\grit/test/test_rgit_spaces.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_rubygit.rb</field>
	<field name="filename_full">.\grit/test/test_rubygit.rb</field>
	<field name="language">rb</field>
	<field name="comment"># this is the tree associated with @commit_sha, which we use in</field>
	<field name="comment"># the next test</field>
	<field name="comment"># I return slightly more for now</field>
	<field name="comment">#def test_ls_tree_noexist</field>
	<field name="comment">#  puts out = @git.ls_tree({}, '6afcf64c80da8253fa47228eb09bc0eea217e5d0')</field>
	<field name="comment">#end</field>
	<field name="filename">test_rubygit_alt.rb</field>
	<field name="filename_full">.\grit/test/test_rubygit_alt.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_rubygit_index.rb</field>
	<field name="filename_full">.\grit/test/test_rubygit_index.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_rubygit_iv2.rb</field>
	<field name="filename_full">.\grit/test/test_rubygit_iv2.rb</field>
	<field name="language">rb</field>
	<field name="filename">test_submodule.rb</field>
	<field name="filename_full">.\grit/test/test_submodule.rb</field>
	<field name="language">rb</field>
	<field name="comment"># config</field>
	<field name="comment"># inspect</field>
	<field name="filename">test_tag.rb</field>
	<field name="filename_full">.\grit/test/test_tag.rb</field>
	<field name="language">rb</field>
	<field name="comment"># list_from_string size</field>
	<field name="comment"># list_from_string</field>
	<field name="comment"># list_from_string_for_signed_tag</field>
	<field name="comment"># list_from_string_for_annotated_tag</field>
	<field name="comment"># list_from_string_for_packed_tag</field>
	<field name="comment"># list_from_string_for_packed_annotated_tag</field>
	<field name="comment"># describe_recent_tag</field>
	<field name="comment"># describe_recent_tag_with_updates</field>
	<field name="comment"># describe_missing_tag</field>
	<field name="comment"># reads_light_tag_contents</field>
	<field name="comment"># reads_annotated_tag_contents</field>
	<field name="comment"># reads_annotated_and_packed_tag_contents</field>
	<field name="comment"># inspect</field>
	<field name="filename">test_tree.rb</field>
	<field name="filename_full">.\grit/test/test_tree.rb</field>
	<field name="language">rb</field>
	<field name="comment"># contents</field>
	<field name="comment"># content_from_string</field>
	<field name="comment"># /</field>
	<field name="comment"># inspect</field>
	<field name="filename">bench</field>
	<field name="filename_full">.\grit/test/bench</field>
	<field name="filename">benchmarks.rb</field>
	<field name="filename_full">.\grit/test/bench/benchmarks.rb</field>
	<field name="language">rb</field>
	<field name="comment">#require '../../lib/grit'</field>
	<field name="comment">#result = RubyProf.profile do</field>
	<field name="comment">#Grit::GitRuby.cache_client = MemCache.new 'localhost:11211', :namespace => 'grit'</field>
	<field name="comment">#Grit.debug = true</field>
	<field name="comment">#pp Grit::GitRuby.cache_client.stats </field>
	<field name="comment"># run_code(x, 'config', 100) do</field>
	<field name="comment">#   c = git.config['user.name']</field>
	<field name="comment">#   c = git.config['user.email']</field>
	<field name="comment"># end</field>
	<field name="comment">#run_code(x, 'commit count') do</field>
	<field name="comment">#  c = git.commit_count('testing')</field>
	<field name="comment">#end</field>
	<field name="comment">#end</field>
	<field name="comment">#printer = RubyProf::FlatPrinter.new(result)</field>
	<field name="comment">#printer.print(STDOUT, 0)</field>
	<field name="comment">#end</field>
	<field name="comment"># Print a graph profile to text</field>
	<field name="comment">#FileUtils.rm_r(tmp_path) if remove_after</field>
	<field name="comment">##pp Grit::GitRuby.cache_client.stats </field>
	<field name="filename">benchmarks.txt</field>
	<field name="filename_full">.\grit/test/bench/benchmarks.txt</field>
	<field name="filename">dot_git</field>
	<field name="filename_full">.\grit/test/dot_git</field>
	<field name="filename">COMMIT_EDITMSG</field>
	<field name="filename_full">.\grit/test/dot_git/COMMIT_EDITMSG</field>
	<field name="filename">config</field>
	<field name="filename_full">.\grit/test/dot_git/config</field>
	<field name="filename">description</field>
	<field name="filename_full">.\grit/test/dot_git/description</field>
	<field name="filename">FETCH_HEAD</field>
	<field name="filename_full">.\grit/test/dot_git/FETCH_HEAD</field>
	<field name="filename">file-index</field>
	<field name="filename_full">.\grit/test/dot_git/file-index</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/dot_git/HEAD</field>
	<field name="filename">index</field>
	<field name="filename_full">.\grit/test/dot_git/index</field>
	<field name="filename">ORIG_HEAD</field>
	<field name="filename_full">.\grit/test/dot_git/ORIG_HEAD</field>
	<field name="filename">packed-refs</field>
	<field name="filename_full">.\grit/test/dot_git/packed-refs</field>
	<field name="filename">hooks</field>
	<field name="filename_full">.\grit/test/dot_git/hooks</field>
	<field name="filename">applypatch-msg</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/applypatch-msg</field>
	<field name="filename">commit-msg</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/commit-msg</field>
	<field name="filename">post-commit</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/post-commit</field>
	<field name="filename">post-receive</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/post-receive</field>
	<field name="filename">post-update</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/post-update</field>
	<field name="filename">pre-applypatch</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/pre-applypatch</field>
	<field name="filename">pre-commit</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/pre-commit</field>
	<field name="filename">pre-rebase</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/pre-rebase</field>
	<field name="filename">prepare-commit-msg</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/prepare-commit-msg</field>
	<field name="filename">update</field>
	<field name="filename_full">.\grit/test/dot_git/hooks/update</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git/info</field>
	<field name="filename">exclude</field>
	<field name="filename_full">.\grit/test/dot_git/info/exclude</field>
	<field name="filename">logs</field>
	<field name="filename_full">.\grit/test/dot_git/logs</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/dot_git/logs/HEAD</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/dot_git/logs/refs</field>
	<field name="filename">heads</field>
	<field name="filename_full">.\grit/test/dot_git/logs/refs/heads</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/dot_git/logs/refs/heads/master</field>
	<field name="filename">remotes</field>
	<field name="filename_full">.\grit/test/dot_git/logs/refs/remotes</field>
	<field name="filename">origin</field>
	<field name="filename_full">.\grit/test/dot_git/logs/refs/remotes/origin</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/dot_git/logs/refs/remotes/origin/master</field>
	<field name="filename">tom</field>
	<field name="filename_full">.\grit/test/dot_git/logs/refs/remotes/tom</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/dot_git/logs/refs/remotes/tom/master</field>
	<field name="filename">objects</field>
	<field name="filename_full">.\grit/test/dot_git/objects</field>
	<field name="filename">00</field>
	<field name="filename_full">.\grit/test/dot_git/objects/00</field>
	<field name="filename">03f8338f3668723f26b37c8ccf544a95e29ec6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/00/03f8338f3668723f26b37c8ccf544a95e29ec6</field>
	<field name="filename">1569f8fc3eb464ba486e4b22f2f06494f399e2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/00/1569f8fc3eb464ba486e4b22f2f06494f399e2</field>
	<field name="filename">3274c8973e2053718cfad0d36a6965d192fcab</field>
	<field name="filename_full">.\grit/test/dot_git/objects/00/3274c8973e2053718cfad0d36a6965d192fcab</field>
	<field name="filename">b1c149e635d481ca18349082583b8151f72747</field>
	<field name="filename_full">.\grit/test/dot_git/objects/00/b1c149e635d481ca18349082583b8151f72747</field>
	<field name="filename">b71297a9d326f1c9647dc3199759696aa0fcd3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/00/b71297a9d326f1c9647dc3199759696aa0fcd3</field>
	<field name="filename">f3447967b64aba158140cd40ee8b367612ce81</field>
	<field name="filename_full">.\grit/test/dot_git/objects/00/f3447967b64aba158140cd40ee8b367612ce81</field>
	<field name="filename">01</field>
	<field name="filename_full">.\grit/test/dot_git/objects/01</field>
	<field name="filename">0ad5aba678e910d4d663b42dcc23b42beb829f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/01/0ad5aba678e910d4d663b42dcc23b42beb829f</field>
	<field name="filename">17826165bc3b90c75ef2caeec37f5c8d782705</field>
	<field name="filename_full">.\grit/test/dot_git/objects/01/17826165bc3b90c75ef2caeec37f5c8d782705</field>
	<field name="filename">4488a55fe5fe9494441a9340cc8c15107a212a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/01/4488a55fe5fe9494441a9340cc8c15107a212a</field>
	<field name="filename">4fc17423d6af7ac4816071dd29f0f0e2784066</field>
	<field name="filename_full">.\grit/test/dot_git/objects/01/4fc17423d6af7ac4816071dd29f0f0e2784066</field>
	<field name="filename">b74bca756428371115795ddf6ca02019c8917f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/01/b74bca756428371115795ddf6ca02019c8917f</field>
	<field name="filename">d78e86ee2b2d9d8d67d2d5b70610879184cfe2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/01/d78e86ee2b2d9d8d67d2d5b70610879184cfe2</field>
	<field name="filename">f8c258619443ee16bdfe857b4852df5fa3e9d2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/01/f8c258619443ee16bdfe857b4852df5fa3e9d2</field>
	<field name="filename">02</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02</field>
	<field name="filename">036e2cb5b44b6f4a27cea2f5bcca47ddfb24d8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/036e2cb5b44b6f4a27cea2f5bcca47ddfb24d8</field>
	<field name="filename">1e14889189cd86cff25b5677e12ac2c7234e0b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/1e14889189cd86cff25b5677e12ac2c7234e0b</field>
	<field name="filename">3d5211ccff94a988645cdeb1738ef681053928</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/3d5211ccff94a988645cdeb1738ef681053928</field>
	<field name="filename">52e31caf4384d3af956ddcf99b0625ca32564f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/52e31caf4384d3af956ddcf99b0625ca32564f</field>
	<field name="filename">776a9f673a9cd6e2dfaebdb4a20de867303091</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/776a9f673a9cd6e2dfaebdb4a20de867303091</field>
	<field name="filename">7d4de30093393c0f994ccca83ac80524850f52</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/7d4de30093393c0f994ccca83ac80524850f52</field>
	<field name="filename">85f374047a4541f8a36b9195ad281220dca3be</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/85f374047a4541f8a36b9195ad281220dca3be</field>
	<field name="filename">88dcd891dc1c3452558a67240a2969afe5e1f2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/88dcd891dc1c3452558a67240a2969afe5e1f2</field>
	<field name="filename">de1ef84c9b8c2c2659048269784ee8cfd1bbb5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/02/de1ef84c9b8c2c2659048269784ee8cfd1bbb5</field>
	<field name="filename">03</field>
	<field name="filename_full">.\grit/test/dot_git/objects/03</field>
	<field name="filename">337ca011923c5ade57033d950557f8e593542f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/03/337ca011923c5ade57033d950557f8e593542f</field>
	<field name="filename">37a36c245dcafeb65eb8a77322bfa353447774</field>
	<field name="filename_full">.\grit/test/dot_git/objects/03/37a36c245dcafeb65eb8a77322bfa353447774</field>
	<field name="filename">517194eb06a1dc1bd3cb0d605cf30a56241053</field>
	<field name="filename_full">.\grit/test/dot_git/objects/03/517194eb06a1dc1bd3cb0d605cf30a56241053</field>
	<field name="filename">6eb07bb7c6e7f3b35dd0302bf9cf6c289ea0ed</field>
	<field name="filename_full">.\grit/test/dot_git/objects/03/6eb07bb7c6e7f3b35dd0302bf9cf6c289ea0ed</field>
	<field name="filename">7f79a326dbcb10176d28f61998d72924ce77c8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/03/7f79a326dbcb10176d28f61998d72924ce77c8</field>
	<field name="filename">cf7ee8c1bf722d28e8fa93eb780e2e4dc084c9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/03/cf7ee8c1bf722d28e8fa93eb780e2e4dc084c9</field>
	<field name="filename">04</field>
	<field name="filename_full">.\grit/test/dot_git/objects/04</field>
	<field name="filename">7b5ae7038ef06f45520462912f039e80c00b8c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/04/7b5ae7038ef06f45520462912f039e80c00b8c</field>
	<field name="filename">c3a03b3f0d0a60b313f4be77749845a5235c08</field>
	<field name="filename_full">.\grit/test/dot_git/objects/04/c3a03b3f0d0a60b313f4be77749845a5235c08</field>
	<field name="filename">cb7a6a139313c907e0fec984da3fd4e41fdd33</field>
	<field name="filename_full">.\grit/test/dot_git/objects/04/cb7a6a139313c907e0fec984da3fd4e41fdd33</field>
	<field name="filename">e515305cf9bc9598dceafffb7cb9a756544628</field>
	<field name="filename_full">.\grit/test/dot_git/objects/04/e515305cf9bc9598dceafffb7cb9a756544628</field>
	<field name="filename">fb83a65293a39614752633f8e6d945b80b5eb0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/04/fb83a65293a39614752633f8e6d945b80b5eb0</field>
	<field name="filename">05</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05</field>
	<field name="filename">68b92d8d9705c4ff045ffdb5e3a1f1595bd923</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05/68b92d8d9705c4ff045ffdb5e3a1f1595bd923</field>
	<field name="filename">7826b56de5733beb44b4561443d3b46a449691</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05/7826b56de5733beb44b4561443d3b46a449691</field>
	<field name="filename">7926e768e8b202655a3aa26adc7f201c0edcfc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05/7926e768e8b202655a3aa26adc7f201c0edcfc</field>
	<field name="filename">7929610b4988ec16e3c45b8383bd158990b4a0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05/7929610b4988ec16e3c45b8383bd158990b4a0</field>
	<field name="filename">87c4160d02715e27c0cb305d4227cf17481225</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05/87c4160d02715e27c0cb305d4227cf17481225</field>
	<field name="filename">af9a86721dbfc9c26aa1e51ae2a69e3e659d4e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05/af9a86721dbfc9c26aa1e51ae2a69e3e659d4e</field>
	<field name="filename">b059421d3747a7806ac17ae7fec58942f4febb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05/b059421d3747a7806ac17ae7fec58942f4febb</field>
	<field name="filename">cc37f0a03392de8deb2ffe699be03f7dfb969f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/05/cc37f0a03392de8deb2ffe699be03f7dfb969f</field>
	<field name="filename">06</field>
	<field name="filename_full">.\grit/test/dot_git/objects/06</field>
	<field name="filename">05c3b4232a3ce29e9eaa37c5b87798500a6e7d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/06/05c3b4232a3ce29e9eaa37c5b87798500a6e7d</field>
	<field name="filename">06fabcdde5c927345a40f121f361d2e216b074</field>
	<field name="filename_full">.\grit/test/dot_git/objects/06/06fabcdde5c927345a40f121f361d2e216b074</field>
	<field name="filename">2279d5eb12f88189544abbaed53853c5ed9515</field>
	<field name="filename_full">.\grit/test/dot_git/objects/06/2279d5eb12f88189544abbaed53853c5ed9515</field>
	<field name="filename">aa7f9270d9750713a16c8876a80d8208d0474b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/06/aa7f9270d9750713a16c8876a80d8208d0474b</field>
	<field name="filename">e218ce2718fb29fe8c3406e20a03af92b2c211</field>
	<field name="filename_full">.\grit/test/dot_git/objects/06/e218ce2718fb29fe8c3406e20a03af92b2c211</field>
	<field name="filename">f8bf7db18ed246f33840f89db357ffdb9ed685</field>
	<field name="filename_full">.\grit/test/dot_git/objects/06/f8bf7db18ed246f33840f89db357ffdb9ed685</field>
	<field name="filename">07</field>
	<field name="filename_full">.\grit/test/dot_git/objects/07</field>
	<field name="filename">49016e612b0cc541a9157c5af5202fc13afee5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/07/49016e612b0cc541a9157c5af5202fc13afee5</field>
	<field name="filename">7b694fe425c945e50bcf07a17273f70ea9969f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/07/7b694fe425c945e50bcf07a17273f70ea9969f</field>
	<field name="filename">08</field>
	<field name="filename_full">.\grit/test/dot_git/objects/08</field>
	<field name="filename">2abfcf77d1c6ce8288c9e51960c4dc0386e214</field>
	<field name="filename_full">.\grit/test/dot_git/objects/08/2abfcf77d1c6ce8288c9e51960c4dc0386e214</field>
	<field name="filename">31f152b831b72c29c402c43a4f0d5f9c08098b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/08/31f152b831b72c29c402c43a4f0d5f9c08098b</field>
	<field name="filename">3a20c51f91b45bd89c4e659be3004f3160eb9d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/08/3a20c51f91b45bd89c4e659be3004f3160eb9d</field>
	<field name="filename">09</field>
	<field name="filename_full">.\grit/test/dot_git/objects/09</field>
	<field name="filename">3df8605b97af993b943e6c8d752adb3a80414d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/09/3df8605b97af993b943e6c8d752adb3a80414d</field>
	<field name="filename">4371d805417da0d5d45f05862c04f840164700</field>
	<field name="filename_full">.\grit/test/dot_git/objects/09/4371d805417da0d5d45f05862c04f840164700</field>
	<field name="filename">509a4195f9fb7afbf688b03c80695bf42415aa</field>
	<field name="filename_full">.\grit/test/dot_git/objects/09/509a4195f9fb7afbf688b03c80695bf42415aa</field>
	<field name="filename">722f3e93f2ac8b7576ad9875570b9fcd9c7742</field>
	<field name="filename_full">.\grit/test/dot_git/objects/09/722f3e93f2ac8b7576ad9875570b9fcd9c7742</field>
	<field name="filename">c0737da31a89f508274573ccca3fab84b99291</field>
	<field name="filename_full">.\grit/test/dot_git/objects/09/c0737da31a89f508274573ccca3fab84b99291</field>
	<field name="filename">c978c6ca56674793681e1f46e48d548f87b9b7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/09/c978c6ca56674793681e1f46e48d548f87b9b7</field>
	<field name="filename">d253737e9b3478116b5c28bc353bb04f6b3b15</field>
	<field name="filename_full">.\grit/test/dot_git/objects/09/d253737e9b3478116b5c28bc353bb04f6b3b15</field>
	<field name="filename">0a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0a</field>
	<field name="filename">8a50a991f45aacd9182cc9660352291102d62c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0a/8a50a991f45aacd9182cc9660352291102d62c</field>
	<field name="filename">d7278c1b329f53ccce178365ef46c0acf1b5cf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0a/d7278c1b329f53ccce178365ef46c0acf1b5cf</field>
	<field name="filename">0b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0b</field>
	<field name="filename">7cad903e284fb0c67b4c5c2b7dce7bcb1ab331</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0b/7cad903e284fb0c67b4c5c2b7dce7bcb1ab331</field>
	<field name="filename">982595f497472374e559c4a60bdf6f5d515747</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0b/982595f497472374e559c4a60bdf6f5d515747</field>
	<field name="filename">a43a25402d95cdf77eab9daa395554b6bf0fee</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0b/a43a25402d95cdf77eab9daa395554b6bf0fee</field>
	<field name="filename">0c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0c</field>
	<field name="filename">27bd8cee7c56836d7116224eeee572b14d9207</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0c/27bd8cee7c56836d7116224eeee572b14d9207</field>
	<field name="filename">93fbac2cae83e0c1ae53b95b1ad1e52049f9dc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0c/93fbac2cae83e0c1ae53b95b1ad1e52049f9dc</field>
	<field name="filename">f5be059c72d69cccc249f53b35c3c40907665c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0c/f5be059c72d69cccc249f53b35c3c40907665c</field>
	<field name="filename">0d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0d</field>
	<field name="filename">03c5056d874db5cf0088b70a67d943ddcb5413</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0d/03c5056d874db5cf0088b70a67d943ddcb5413</field>
	<field name="filename">520f86139b0b1fc0ab6d92a5f837533b07488b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0d/520f86139b0b1fc0ab6d92a5f837533b07488b</field>
	<field name="filename">757583ecf0ce5235d41487d26bee258c317b3e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0d/757583ecf0ce5235d41487d26bee258c317b3e</field>
	<field name="filename">b262cb85533c5004f6f1a2cb26f5ae2dd85d36</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0d/b262cb85533c5004f6f1a2cb26f5ae2dd85d36</field>
	<field name="filename">fc2a798d3c8f3190e3478644e73478bf5a2198</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0d/fc2a798d3c8f3190e3478644e73478bf5a2198</field>
	<field name="filename">0e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0e</field>
	<field name="filename">1d014f006f27f2857eb504c520d2ed2bdd8e73</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0e/1d014f006f27f2857eb504c520d2ed2bdd8e73</field>
	<field name="filename">0f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f</field>
	<field name="filename">138d68197242f4e6be55e9133fafb7dfa2ea51</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f/138d68197242f4e6be55e9133fafb7dfa2ea51</field>
	<field name="filename">341dd5b4a15b61545f8f8a22fdfcfa611b88ba</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f/341dd5b4a15b61545f8f8a22fdfcfa611b88ba</field>
	<field name="filename">41b030d38bc256c46da51ec61d8fbf78d95c71</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f/41b030d38bc256c46da51ec61d8fbf78d95c71</field>
	<field name="filename">6adc7b610f48813007fa9624308fdcd19624eb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f/6adc7b610f48813007fa9624308fdcd19624eb</field>
	<field name="filename">73ea263af628ee73a91fd828a090ec0c1108bd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f/73ea263af628ee73a91fd828a090ec0c1108bd</field>
	<field name="filename">8ab2768611398a9271137b976e790158fea99b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f/8ab2768611398a9271137b976e790158fea99b</field>
	<field name="filename">b309e304e40fd066779c842d3dfb969820ee05</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f/b309e304e40fd066779c842d3dfb969820ee05</field>
	<field name="filename">f24bd854839ec2d63df82511b30a87563cf93b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/0f/f24bd854839ec2d63df82511b30a87563cf93b</field>
	<field name="filename">10</field>
	<field name="filename_full">.\grit/test/dot_git/objects/10</field>
	<field name="filename">3b19041fdc3d56c2a233faeb835250f7979025</field>
	<field name="filename_full">.\grit/test/dot_git/objects/10/3b19041fdc3d56c2a233faeb835250f7979025</field>
	<field name="filename">49a9f3dde7bb76587fe082462866b5d0dbd286</field>
	<field name="filename_full">.\grit/test/dot_git/objects/10/49a9f3dde7bb76587fe082462866b5d0dbd286</field>
	<field name="filename">d5041b45374ba1ca060c9273ea8239b2836377</field>
	<field name="filename_full">.\grit/test/dot_git/objects/10/d5041b45374ba1ca060c9273ea8239b2836377</field>
	<field name="filename">11</field>
	<field name="filename_full">.\grit/test/dot_git/objects/11</field>
	<field name="filename">8273918e8e542d828b37fb58cb2ec0f557fb5f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/11/8273918e8e542d828b37fb58cb2ec0f557fb5f</field>
	<field name="filename">af521eb0e6e9c112b3bb6c4ad7ec24986d3ca9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/11/af521eb0e6e9c112b3bb6c4ad7ec24986d3ca9</field>
	<field name="filename">c94e9b614f3f2e17f72854e8be0f181471bfcc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/11/c94e9b614f3f2e17f72854e8be0f181471bfcc</field>
	<field name="filename">ef852d995ba4f160bd20474cfb7b21fd643524</field>
	<field name="filename_full">.\grit/test/dot_git/objects/11/ef852d995ba4f160bd20474cfb7b21fd643524</field>
	<field name="filename">12</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12</field>
	<field name="filename">285f38fe70a726001e29108536954f64d7133a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12/285f38fe70a726001e29108536954f64d7133a</field>
	<field name="filename">36260f7be3454a989e82e28f6096e096e35a89</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12/36260f7be3454a989e82e28f6096e096e35a89</field>
	<field name="filename">8db38df991e126c5079bd4c36d15c21674db99</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12/8db38df991e126c5079bd4c36d15c21674db99</field>
	<field name="filename">a41f2de1265a2f7c56793ad6c1e9a48b10690d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12/a41f2de1265a2f7c56793ad6c1e9a48b10690d</field>
	<field name="filename">c064d545702771fde2debf89ae5d2332897d88</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12/c064d545702771fde2debf89ae5d2332897d88</field>
	<field name="filename">c33c0bcf3ac3f569850943ad62c46c9861edeb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12/c33c0bcf3ac3f569850943ad62c46c9861edeb</field>
	<field name="filename">c7b3bf5cdc29830afecbe20755d6f08fe735a1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12/c7b3bf5cdc29830afecbe20755d6f08fe735a1</field>
	<field name="filename">fca324bece56e856667502ebfed1c5172d1477</field>
	<field name="filename_full">.\grit/test/dot_git/objects/12/fca324bece56e856667502ebfed1c5172d1477</field>
	<field name="filename">13</field>
	<field name="filename_full">.\grit/test/dot_git/objects/13</field>
	<field name="filename">2335def2380870cd3b8f40d326976aea182aa7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/13/2335def2380870cd3b8f40d326976aea182aa7</field>
	<field name="filename">8e53fadb078d2b3716833d8b50eb10f12c7348</field>
	<field name="filename_full">.\grit/test/dot_git/objects/13/8e53fadb078d2b3716833d8b50eb10f12c7348</field>
	<field name="filename">d306ed324d1be706c78071a72414d50c68dca5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/13/d306ed324d1be706c78071a72414d50c68dca5</field>
	<field name="filename">14</field>
	<field name="filename_full">.\grit/test/dot_git/objects/14</field>
	<field name="filename">35f68d9466fbd70fc6084977ac19fd311c7c57</field>
	<field name="filename_full">.\grit/test/dot_git/objects/14/35f68d9466fbd70fc6084977ac19fd311c7c57</field>
	<field name="filename">66fcacc4070eb9a8fd88b3a825c6647f6491f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/14/66fcacc4070eb9a8fd88b3a825c6647f6491f1</field>
	<field name="filename">67cde22fefa7ddcab86786d5066bc6f51b250a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/14/67cde22fefa7ddcab86786d5066bc6f51b250a</field>
	<field name="filename">d58395b6da306a5b161fb950ac2c252a091a95</field>
	<field name="filename_full">.\grit/test/dot_git/objects/14/d58395b6da306a5b161fb950ac2c252a091a95</field>
	<field name="filename">15</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15</field>
	<field name="filename">2111c53821f7dd53a3cc4f6a251a7de3789414</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/2111c53821f7dd53a3cc4f6a251a7de3789414</field>
	<field name="filename">5c2ca2a4e8b1e0f2f54c0e3b413dd077633fdf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/5c2ca2a4e8b1e0f2f54c0e3b413dd077633fdf</field>
	<field name="filename">78a2576e89eaa4954d5277d69b2bf66e926cdf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/78a2576e89eaa4954d5277d69b2bf66e926cdf</field>
	<field name="filename">7c95ee8c2989db8127c48548ed80c15a76b778</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/7c95ee8c2989db8127c48548ed80c15a76b778</field>
	<field name="filename">979622ad6ae9c5cf1c424cd17dd2784130e8f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/979622ad6ae9c5cf1c424cd17dd2784130e8f1</field>
	<field name="filename">d022ad2ff13d0ef33424ff412676b6047ffed8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/d022ad2ff13d0ef33424ff412676b6047ffed8</field>
	<field name="filename">e293762a035e16b6d3f5562c51e8a524c84381</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/e293762a035e16b6d3f5562c51e8a524c84381</field>
	<field name="filename">e93eb1c0b39f51291d1c432156f0ff43ab1ffd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/e93eb1c0b39f51291d1c432156f0ff43ab1ffd</field>
	<field name="filename">ebfa5c7792de35a107f413b397407ac3330888</field>
	<field name="filename_full">.\grit/test/dot_git/objects/15/ebfa5c7792de35a107f413b397407ac3330888</field>
	<field name="filename">16</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16</field>
	<field name="filename">3268d3698bb1626f34cd3ba59da51a7e25e03e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16/3268d3698bb1626f34cd3ba59da51a7e25e03e</field>
	<field name="filename">48e3b1e22ebb852ded047d0ab7eac1b05fe060</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16/48e3b1e22ebb852ded047d0ab7eac1b05fe060</field>
	<field name="filename">81e1b6486f601c8edcaddcaba5b43cee4aea3f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16/81e1b6486f601c8edcaddcaba5b43cee4aea3f</field>
	<field name="filename">910c6a1377054903ccb52369d3ee07b13e5d08</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16/910c6a1377054903ccb52369d3ee07b13e5d08</field>
	<field name="filename">b7edf7af22dd2bada9e936795f53943719fe65</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16/b7edf7af22dd2bada9e936795f53943719fe65</field>
	<field name="filename">cc3f1fa6b58278c4fe216999464aaef8ae6750</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16/cc3f1fa6b58278c4fe216999464aaef8ae6750</field>
	<field name="filename">ef31d5b51a674634edb8b54b5706c17b62f558</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16/ef31d5b51a674634edb8b54b5706c17b62f558</field>
	<field name="filename">ff20f07ceb75dc60619c082f530ccd3379d572</field>
	<field name="filename_full">.\grit/test/dot_git/objects/16/ff20f07ceb75dc60619c082f530ccd3379d572</field>
	<field name="filename">17</field>
	<field name="filename_full">.\grit/test/dot_git/objects/17</field>
	<field name="filename">3f4345c58750e2eb870a65e850917f97dbed91</field>
	<field name="filename_full">.\grit/test/dot_git/objects/17/3f4345c58750e2eb870a65e850917f97dbed91</field>
	<field name="filename">6255627b2fac737a7f77a5591814e88dc49815</field>
	<field name="filename_full">.\grit/test/dot_git/objects/17/6255627b2fac737a7f77a5591814e88dc49815</field>
	<field name="filename">96a891d45dea162f9021f8e8c472c5e2006696</field>
	<field name="filename_full">.\grit/test/dot_git/objects/17/96a891d45dea162f9021f8e8c472c5e2006696</field>
	<field name="filename">ac818de1cc5ab1b1e1fc5f2796b0bb816a600c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/17/ac818de1cc5ab1b1e1fc5f2796b0bb816a600c</field>
	<field name="filename">d488c2f71729e5d182cb944d28c837fba95ccf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/17/d488c2f71729e5d182cb944d28c837fba95ccf</field>
	<field name="filename">da04256d519b3bc102ff6654388a15ede87a9e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/17/da04256d519b3bc102ff6654388a15ede87a9e</field>
	<field name="filename">19</field>
	<field name="filename_full">.\grit/test/dot_git/objects/19</field>
	<field name="filename">3e6eef82e784e52ba86addcb5d7b1b7c733b39</field>
	<field name="filename_full">.\grit/test/dot_git/objects/19/3e6eef82e784e52ba86addcb5d7b1b7c733b39</field>
	<field name="filename">6583fa8a32069927196d341590917ec3a44068</field>
	<field name="filename_full">.\grit/test/dot_git/objects/19/6583fa8a32069927196d341590917ec3a44068</field>
	<field name="filename">c05c4b965f08e0a7856864293a206e07743c37</field>
	<field name="filename_full">.\grit/test/dot_git/objects/19/c05c4b965f08e0a7856864293a206e07743c37</field>
	<field name="filename">c3d5c87afaac1c69dc0473635ef8a7fe0738da</field>
	<field name="filename_full">.\grit/test/dot_git/objects/19/c3d5c87afaac1c69dc0473635ef8a7fe0738da</field>
	<field name="filename">e8c71b6a30e8725e9c0d8e487333d102b20eec</field>
	<field name="filename_full">.\grit/test/dot_git/objects/19/e8c71b6a30e8725e9c0d8e487333d102b20eec</field>
	<field name="filename">f53b5d629ef910276aa4ff3da37098b84ebbe5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/19/f53b5d629ef910276aa4ff3da37098b84ebbe5</field>
	<field name="filename">1a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1a</field>
	<field name="filename">5458d91ca6a8303793f2b65add534398fbdecb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1a/5458d91ca6a8303793f2b65add534398fbdecb</field>
	<field name="filename">b11cd93f687672c9cc8fa9b3fbac91a28e455f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1a/b11cd93f687672c9cc8fa9b3fbac91a28e455f</field>
	<field name="filename">d7f5703990fffc0623027f890c8da5a84b7f69</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1a/d7f5703990fffc0623027f890c8da5a84b7f69</field>
	<field name="filename">1b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1b</field>
	<field name="filename">4ac33eca9279c482cf15bfbdaeff285dd610b1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1b/4ac33eca9279c482cf15bfbdaeff285dd610b1</field>
	<field name="filename">5178ad8b4a4bebf9f311a655317dcb2b8022cc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1b/5178ad8b4a4bebf9f311a655317dcb2b8022cc</field>
	<field name="filename">6572ea59d924437ef351841ad7769189744070</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1b/6572ea59d924437ef351841ad7769189744070</field>
	<field name="filename">7450de981e2cabd7394fd5d6eabad5d3d755cc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1b/7450de981e2cabd7394fd5d6eabad5d3d755cc</field>
	<field name="filename">9fe079b5b81a05c585e71d7a3f435cf740ef98</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1b/9fe079b5b81a05c585e71d7a3f435cf740ef98</field>
	<field name="filename">fb8784f878f9cd3cfeaca34357cf50a74f1e09</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1b/fb8784f878f9cd3cfeaca34357cf50a74f1e09</field>
	<field name="filename">1c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1c</field>
	<field name="filename">0b90070d7e30f014551321378b272fa3fa4513</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1c/0b90070d7e30f014551321378b272fa3fa4513</field>
	<field name="filename">13b4bce41332da238a5b3dea893831da48cd51</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1c/13b4bce41332da238a5b3dea893831da48cd51</field>
	<field name="filename">6ab3410ae104091c7c48eb51fafeb10ceb840a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1c/6ab3410ae104091c7c48eb51fafeb10ceb840a</field>
	<field name="filename">e53e58e0fce1b52e687738be9f29d2b66ad102</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1c/e53e58e0fce1b52e687738be9f29d2b66ad102</field>
	<field name="filename">1d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1d</field>
	<field name="filename">52507d6a4b62353f17426395176114a78c3e27</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1d/52507d6a4b62353f17426395176114a78c3e27</field>
	<field name="filename">779cd342a3dceb1181617c6d78cf49dd4ea6d9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1d/779cd342a3dceb1181617c6d78cf49dd4ea6d9</field>
	<field name="filename">a4fc732293ade7bc64fa5bf0fe500e98d44086</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1d/a4fc732293ade7bc64fa5bf0fe500e98d44086</field>
	<field name="filename">ad0ebe6a69a154ae53834551aac811e2084d92</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1d/ad0ebe6a69a154ae53834551aac811e2084d92</field>
	<field name="filename">fb7c5c1bfe1d3faa4faa02588446132806a84a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1d/fb7c5c1bfe1d3faa4faa02588446132806a84a</field>
	<field name="filename">1e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1e</field>
	<field name="filename">48c5e962aed49286c66caf359ec9c2d36c2702</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1e/48c5e962aed49286c66caf359ec9c2d36c2702</field>
	<field name="filename">602e850a67f89c395797eac185740d5f26d4d2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1e/602e850a67f89c395797eac185740d5f26d4d2</field>
	<field name="filename">72f4a8d9f13be6e98e948927eea0d14a2e1058</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1e/72f4a8d9f13be6e98e948927eea0d14a2e1058</field>
	<field name="filename">d9b70c5aeb93e24139fa7203d9a7455476c102</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1e/d9b70c5aeb93e24139fa7203d9a7455476c102</field>
	<field name="filename">eb71ddbc2be8fd6cc4fe8c8465361601d2e1a5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1e/eb71ddbc2be8fd6cc4fe8c8465361601d2e1a5</field>
	<field name="filename">1f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1f</field>
	<field name="filename">56023e68acd9d981833e3eb2567ed2d851dd32</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1f/56023e68acd9d981833e3eb2567ed2d851dd32</field>
	<field name="filename">cfb4f859faed6bf0384993f0fd5edf41f00ef5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1f/cfb4f859faed6bf0384993f0fd5edf41f00ef5</field>
	<field name="filename">f7f94c2c07e96787211d977794a01701c84c48</field>
	<field name="filename_full">.\grit/test/dot_git/objects/1f/f7f94c2c07e96787211d977794a01701c84c48</field>
	<field name="filename">20</field>
	<field name="filename_full">.\grit/test/dot_git/objects/20</field>
	<field name="filename">527a9f7bff75c1fbddd9d99bb7e6da2558650a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/20/527a9f7bff75c1fbddd9d99bb7e6da2558650a</field>
	<field name="filename">58b040a09bd2a1fbaebb1e40aae595115a715e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/20/58b040a09bd2a1fbaebb1e40aae595115a715e</field>
	<field name="filename">7f3efe50e24e9423f55d56924c43d7ea3c5ce7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/20/7f3efe50e24e9423f55d56924c43d7ea3c5ce7</field>
	<field name="filename">92842ab2e8c0f9bdab4646a4ed7f714f66b12b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/20/92842ab2e8c0f9bdab4646a4ed7f714f66b12b</field>
	<field name="filename">f3156fa79fcc5ccfd5e70a1136397c026414b6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/20/f3156fa79fcc5ccfd5e70a1136397c026414b6</field>
	<field name="filename">21</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21</field>
	<field name="filename">0ce1bcc38e0e98f8ec8930a930dbd7988ac4b2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/0ce1bcc38e0e98f8ec8930a930dbd7988ac4b2</field>
	<field name="filename">1cd03423ab654fb825b0bee37154330ba18e55</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/1cd03423ab654fb825b0bee37154330ba18e55</field>
	<field name="filename">28b4b92723c769fb9288584aa67dd7e38d3e66</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/28b4b92723c769fb9288584aa67dd7e38d3e66</field>
	<field name="filename">39d6008849105ef06dd7aa4ed24dbeab73812b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/39d6008849105ef06dd7aa4ed24dbeab73812b</field>
	<field name="filename">6092db5b7af3826eb8cab98f214b87338f2e85</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/6092db5b7af3826eb8cab98f214b87338f2e85</field>
	<field name="filename">6df5b81cd60076fc086ac6a5cda5fb45a3f51f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/6df5b81cd60076fc086ac6a5cda5fb45a3f51f</field>
	<field name="filename">8e0267be4449ca7fc6fa10752014533c14c546</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/8e0267be4449ca7fc6fa10752014533c14c546</field>
	<field name="filename">9580bb02cbd719c7e1b02d73665669a180120a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/9580bb02cbd719c7e1b02d73665669a180120a</field>
	<field name="filename">e7baafef8ab19c21b162aef7cb6f3c6d7d7c67</field>
	<field name="filename_full">.\grit/test/dot_git/objects/21/e7baafef8ab19c21b162aef7cb6f3c6d7d7c67</field>
	<field name="filename">22</field>
	<field name="filename_full">.\grit/test/dot_git/objects/22</field>
	<field name="filename">0553c2c0869a33996016d0f01a16471c3cdfb4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/22/0553c2c0869a33996016d0f01a16471c3cdfb4</field>
	<field name="filename">26c0f88671d695655a16bc3f40336bbc1d13e1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/22/26c0f88671d695655a16bc3f40336bbc1d13e1</field>
	<field name="filename">be54ac7977e0bb45ad7e83210611dc16ce102d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/22/be54ac7977e0bb45ad7e83210611dc16ce102d</field>
	<field name="filename">fb8209d8655a24594398d47f339870f924804f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/22/fb8209d8655a24594398d47f339870f924804f</field>
	<field name="filename">23</field>
	<field name="filename_full">.\grit/test/dot_git/objects/23</field>
	<field name="filename">53738d894ae00535ad011781d82c135a92a269</field>
	<field name="filename_full">.\grit/test/dot_git/objects/23/53738d894ae00535ad011781d82c135a92a269</field>
	<field name="filename">7f04e2053831498762d50fc2470cc66892d268</field>
	<field name="filename_full">.\grit/test/dot_git/objects/23/7f04e2053831498762d50fc2470cc66892d268</field>
	<field name="filename">92b105b8747c1814b9a48d2f5b546f25b78ba1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/23/92b105b8747c1814b9a48d2f5b546f25b78ba1</field>
	<field name="filename">24</field>
	<field name="filename_full">.\grit/test/dot_git/objects/24</field>
	<field name="filename">02a4ccbf9f8a3d0697562dc88c3a3a7740de56</field>
	<field name="filename_full">.\grit/test/dot_git/objects/24/02a4ccbf9f8a3d0697562dc88c3a3a7740de56</field>
	<field name="filename">21ffe1b4b0ddf0d7efbd674ee1fff714c6d7ae</field>
	<field name="filename_full">.\grit/test/dot_git/objects/24/21ffe1b4b0ddf0d7efbd674ee1fff714c6d7ae</field>
	<field name="filename">b49076b413a71c428eb8bcdaa4f258791e6773</field>
	<field name="filename_full">.\grit/test/dot_git/objects/24/b49076b413a71c428eb8bcdaa4f258791e6773</field>
	<field name="filename">b7e95c0acae11954a9e7018cd6748fbc9ac8da</field>
	<field name="filename_full">.\grit/test/dot_git/objects/24/b7e95c0acae11954a9e7018cd6748fbc9ac8da</field>
	<field name="filename">bc825eb69933d3c42e1a81c92cc9ebc6cc3472</field>
	<field name="filename_full">.\grit/test/dot_git/objects/24/bc825eb69933d3c42e1a81c92cc9ebc6cc3472</field>
	<field name="filename">c1a000ee73335664497f277a9c1fc6ec7e1518</field>
	<field name="filename_full">.\grit/test/dot_git/objects/24/c1a000ee73335664497f277a9c1fc6ec7e1518</field>
	<field name="filename">25</field>
	<field name="filename_full">.\grit/test/dot_git/objects/25</field>
	<field name="filename">c813a868fe8f0aa7ffb09688c0d357b92deafe</field>
	<field name="filename_full">.\grit/test/dot_git/objects/25/c813a868fe8f0aa7ffb09688c0d357b92deafe</field>
	<field name="filename">26</field>
	<field name="filename_full">.\grit/test/dot_git/objects/26</field>
	<field name="filename">ccf9637b785b1bc787bddb0d0d1c73f4662982</field>
	<field name="filename_full">.\grit/test/dot_git/objects/26/ccf9637b785b1bc787bddb0d0d1c73f4662982</field>
	<field name="filename">27</field>
	<field name="filename_full">.\grit/test/dot_git/objects/27</field>
	<field name="filename">06e2fda31d93c2e9d213f3406022173b10f15e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/27/06e2fda31d93c2e9d213f3406022173b10f15e</field>
	<field name="filename">23ccc0bc573581a85c131ce62dd0670bc4ceb0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/27/23ccc0bc573581a85c131ce62dd0670bc4ceb0</field>
	<field name="filename">9478dba188b07e2948b2f52ac865557065031e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/27/9478dba188b07e2948b2f52ac865557065031e</field>
	<field name="filename">9771d5b69e4d0342bced5345231d43976091c3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/27/9771d5b69e4d0342bced5345231d43976091c3</field>
	<field name="filename">b04aeb5b6042a2d90fb40d4293863841257640</field>
	<field name="filename_full">.\grit/test/dot_git/objects/27/b04aeb5b6042a2d90fb40d4293863841257640</field>
	<field name="filename">bcf5fe0a83910d826d1d71d78740441835bace</field>
	<field name="filename_full">.\grit/test/dot_git/objects/27/bcf5fe0a83910d826d1d71d78740441835bace</field>
	<field name="filename">f8f0d70ce7e5c303f3c09e0ad169de7e1a7c3d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/27/f8f0d70ce7e5c303f3c09e0ad169de7e1a7c3d</field>
	<field name="filename">28</field>
	<field name="filename_full">.\grit/test/dot_git/objects/28</field>
	<field name="filename">08c797feeb40639304a503a395e8333daa0aaf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/28/08c797feeb40639304a503a395e8333daa0aaf</field>
	<field name="filename">0ebe908f5b3306f56b95c2e6758abeed139e26</field>
	<field name="filename_full">.\grit/test/dot_git/objects/28/0ebe908f5b3306f56b95c2e6758abeed139e26</field>
	<field name="filename">6fa3d105eadff6c94298aa3c0bb84358dbdd9a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/28/6fa3d105eadff6c94298aa3c0bb84358dbdd9a</field>
	<field name="filename">e43ff74f1cbb5e666ee66ef3df5fb612af3cb0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/28/e43ff74f1cbb5e666ee66ef3df5fb612af3cb0</field>
	<field name="filename">ea69ddb42462cde12ddeabd39349fbf9e47fec</field>
	<field name="filename_full">.\grit/test/dot_git/objects/28/ea69ddb42462cde12ddeabd39349fbf9e47fec</field>
	<field name="filename">f509a6f26bcce60274974581e63d730236cf90</field>
	<field name="filename_full">.\grit/test/dot_git/objects/28/f509a6f26bcce60274974581e63d730236cf90</field>
	<field name="filename">29</field>
	<field name="filename_full">.\grit/test/dot_git/objects/29</field>
	<field name="filename">4764c43a2059b716a5016a7f0beb4f41ef762f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/29/4764c43a2059b716a5016a7f0beb4f41ef762f</field>
	<field name="filename">bb16c9ad7a921a6887d5d72c51b9312d1b6ae9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/29/bb16c9ad7a921a6887d5d72c51b9312d1b6ae9</field>
	<field name="filename">bb1b3a815aa0c6c6f41aaf4bca766d0bef1cdf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/29/bb1b3a815aa0c6c6f41aaf4bca766d0bef1cdf</field>
	<field name="filename">2a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a</field>
	<field name="filename">4ff408fd52be259cb69b058d1ac280425d3a14</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a/4ff408fd52be259cb69b058d1ac280425d3a14</field>
	<field name="filename">525a828e4d0d02c01d14445b49c645771bb82a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a/525a828e4d0d02c01d14445b49c645771bb82a</field>
	<field name="filename">5c7305b52b836fbc0ec7200df58f3f9ba06ec0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a/5c7305b52b836fbc0ec7200df58f3f9ba06ec0</field>
	<field name="filename">6063405e5767fb4b9aa48c2eda4ab87e6cecf2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a/6063405e5767fb4b9aa48c2eda4ab87e6cecf2</field>
	<field name="filename">6d2a310fdaed46fb3a44901392e0bf4f05f8e7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a/6d2a310fdaed46fb3a44901392e0bf4f05f8e7</field>
	<field name="filename">88c76b382e2e3c3e3587e0676301f9949d646d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a/88c76b382e2e3c3e3587e0676301f9949d646d</field>
	<field name="filename">8b7d95c7b2be929873d050f56b6eef546d3c18</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a/8b7d95c7b2be929873d050f56b6eef546d3c18</field>
	<field name="filename">9068e8f69713464cbe5ea7492476437d14e8bb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2a/9068e8f69713464cbe5ea7492476437d14e8bb</field>
	<field name="filename">2b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2b</field>
	<field name="filename">79e430dc370f0810552660b495e4ecdeca6aae</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2b/79e430dc370f0810552660b495e4ecdeca6aae</field>
	<field name="filename">cec98e50e04c0d01bc097ffa372dcf55695025</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2b/cec98e50e04c0d01bc097ffa372dcf55695025</field>
	<field name="filename">f43dbc4e2088a807250eaa609234fd55e3e94b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2b/f43dbc4e2088a807250eaa609234fd55e3e94b</field>
	<field name="filename">2c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2c</field>
	<field name="filename">7ac7d7cac1e740e45cb90b4ab2b4f8d4dfaca1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2c/7ac7d7cac1e740e45cb90b4ab2b4f8d4dfaca1</field>
	<field name="filename">87b72dff61f8394b3f1f32e21c1d936314ec2e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2c/87b72dff61f8394b3f1f32e21c1d936314ec2e</field>
	<field name="filename">8aa45018ca47fce1073b1bf3710e8df35b2dbe</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2c/8aa45018ca47fce1073b1bf3710e8df35b2dbe</field>
	<field name="filename">97dd5ed8d14496cfc71e7ab12bedfec7c14f2e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2c/97dd5ed8d14496cfc71e7ab12bedfec7c14f2e</field>
	<field name="filename">da3256555de3eb182224bcf9bdcff079ccc44e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2c/da3256555de3eb182224bcf9bdcff079ccc44e</field>
	<field name="filename">2d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2d</field>
	<field name="filename">4e03533d8d37a44a1f3e9315ef5164d7e07764</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2d/4e03533d8d37a44a1f3e9315ef5164d7e07764</field>
	<field name="filename">643778ccaa7adc11f5b2531b418cb1394316ec</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2d/643778ccaa7adc11f5b2531b418cb1394316ec</field>
	<field name="filename">aa9345be6d2692c2b9303e12e8b69fb78d78ec</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2d/aa9345be6d2692c2b9303e12e8b69fb78d78ec</field>
	<field name="filename">aea61e18b399977a0fc0b124c837e1d00934fa</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2d/aea61e18b399977a0fc0b124c837e1d00934fa</field>
	<field name="filename">d3efda11ed9a5e5e883cc3b2a624934f3a150e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2d/d3efda11ed9a5e5e883cc3b2a624934f3a150e</field>
	<field name="filename">f7c5ddd50228c2d751df8b6aab96b37cdbc965</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2d/f7c5ddd50228c2d751df8b6aab96b37cdbc965</field>
	<field name="filename">2e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2e</field>
	<field name="filename">1325969bea6889ccffe59660583f8f225eaf47</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2e/1325969bea6889ccffe59660583f8f225eaf47</field>
	<field name="filename">19521c5c4a51a2fc8aee97f952560b7044941b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2e/19521c5c4a51a2fc8aee97f952560b7044941b</field>
	<field name="filename">e881239adb659aea65927a76daf526c0d83891</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2e/e881239adb659aea65927a76daf526c0d83891</field>
	<field name="filename">2f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2f</field>
	<field name="filename">91a713750e086ab1704e05177d4a8f0d88953b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/2f/91a713750e086ab1704e05177d4a8f0d88953b</field>
	<field name="filename">30</field>
	<field name="filename_full">.\grit/test/dot_git/objects/30</field>
	<field name="filename">2bc1a9a65d8c4ddf073a56d0fdacaff71d5500</field>
	<field name="filename_full">.\grit/test/dot_git/objects/30/2bc1a9a65d8c4ddf073a56d0fdacaff71d5500</field>
	<field name="filename">2c67f5952bb0bda88f303e3b8c8a4cf7f27933</field>
	<field name="filename_full">.\grit/test/dot_git/objects/30/2c67f5952bb0bda88f303e3b8c8a4cf7f27933</field>
	<field name="filename">a95debfc08077d566c9aa204f708104c716e1d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/30/a95debfc08077d566c9aa204f708104c716e1d</field>
	<field name="filename">c859bedf72cb8dfb745bb17f705e4774d4f339</field>
	<field name="filename_full">.\grit/test/dot_git/objects/30/c859bedf72cb8dfb745bb17f705e4774d4f339</field>
	<field name="filename">eaea1a7dbd755b4774f2e7b4663623398b09a3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/30/eaea1a7dbd755b4774f2e7b4663623398b09a3</field>
	<field name="filename">31</field>
	<field name="filename_full">.\grit/test/dot_git/objects/31</field>
	<field name="filename">5cd4d93bf65f8d00303515c7f31be1b888a349</field>
	<field name="filename_full">.\grit/test/dot_git/objects/31/5cd4d93bf65f8d00303515c7f31be1b888a349</field>
	<field name="filename">81d650ade16efe68108b01998c1297c7ff0095</field>
	<field name="filename_full">.\grit/test/dot_git/objects/31/81d650ade16efe68108b01998c1297c7ff0095</field>
	<field name="filename">98cb65f97c46156ad634d04141a3aec5a7f637</field>
	<field name="filename_full">.\grit/test/dot_git/objects/31/98cb65f97c46156ad634d04141a3aec5a7f637</field>
	<field name="filename">aaeceab051ff055f4b46b642f5891ac54e85ae</field>
	<field name="filename_full">.\grit/test/dot_git/objects/31/aaeceab051ff055f4b46b642f5891ac54e85ae</field>
	<field name="filename">c867dca3a847692dc87bc4906194f13d183cae</field>
	<field name="filename_full">.\grit/test/dot_git/objects/31/c867dca3a847692dc87bc4906194f13d183cae</field>
	<field name="filename">eee41e36796777df147c26692c0624d73cd2d2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/31/eee41e36796777df147c26692c0624d73cd2d2</field>
	<field name="filename">32</field>
	<field name="filename_full">.\grit/test/dot_git/objects/32</field>
	<field name="filename">89cea29590f1ed0f3da77f118b12ae527f7be7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/32/89cea29590f1ed0f3da77f118b12ae527f7be7</field>
	<field name="filename">d40772f3ec99939cc2fb68cf66d971bb70af47</field>
	<field name="filename_full">.\grit/test/dot_git/objects/32/d40772f3ec99939cc2fb68cf66d971bb70af47</field>
	<field name="filename">d7a7f04ce188e48735ca805f27a2e399a1cffc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/32/d7a7f04ce188e48735ca805f27a2e399a1cffc</field>
	<field name="filename">dec7871d83a6de85e5b96d06178ada1b4185c8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/32/dec7871d83a6de85e5b96d06178ada1b4185c8</field>
	<field name="filename">33</field>
	<field name="filename_full">.\grit/test/dot_git/objects/33</field>
	<field name="filename">373556aa00a77c621c8957d66994e220dd391b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/33/373556aa00a77c621c8957d66994e220dd391b</field>
	<field name="filename">49c1bb38f1a3bff19ffdb83fe81373f0947531</field>
	<field name="filename_full">.\grit/test/dot_git/objects/33/49c1bb38f1a3bff19ffdb83fe81373f0947531</field>
	<field name="filename">58897c6333ced9f5d0b8b0d70b53207c32cbf2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/33/58897c6333ced9f5d0b8b0d70b53207c32cbf2</field>
	<field name="filename">83cca49868379103ad80ebd52d0cd34731ea27</field>
	<field name="filename_full">.\grit/test/dot_git/objects/33/83cca49868379103ad80ebd52d0cd34731ea27</field>
	<field name="filename">86be79ac5e657a5c9a35c0b4ef87e62c47b8bb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/33/86be79ac5e657a5c9a35c0b4ef87e62c47b8bb</field>
	<field name="filename">a3d4c5d14917e67edec483f3222245be341fd1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/33/a3d4c5d14917e67edec483f3222245be341fd1</field>
	<field name="filename">b61981170deb261faec0ce907d8775dc9b0827</field>
	<field name="filename_full">.\grit/test/dot_git/objects/33/b61981170deb261faec0ce907d8775dc9b0827</field>
	<field name="filename">34</field>
	<field name="filename_full">.\grit/test/dot_git/objects/34</field>
	<field name="filename">1780f4f7f8409797a6ee710254cadabbd442c7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/34/1780f4f7f8409797a6ee710254cadabbd442c7</field>
	<field name="filename">57115dfa37b9f7729f79eee2c75fc13f21438d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/34/57115dfa37b9f7729f79eee2c75fc13f21438d</field>
	<field name="filename">a29f36e9085784d1c22db7331c0d9ac4e90d99</field>
	<field name="filename_full">.\grit/test/dot_git/objects/34/a29f36e9085784d1c22db7331c0d9ac4e90d99</field>
	<field name="filename">a4e9b8065fdd743ca61dcfa82ffbc7cfecdc93</field>
	<field name="filename_full">.\grit/test/dot_git/objects/34/a4e9b8065fdd743ca61dcfa82ffbc7cfecdc93</field>
	<field name="filename">35</field>
	<field name="filename_full">.\grit/test/dot_git/objects/35</field>
	<field name="filename">82158a912c79ee8d48eba6196c3613b1e34e57</field>
	<field name="filename_full">.\grit/test/dot_git/objects/35/82158a912c79ee8d48eba6196c3613b1e34e57</field>
	<field name="filename">dbdfe43f8ad52f5d396abb7a7014bc453803a8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/35/dbdfe43f8ad52f5d396abb7a7014bc453803a8</field>
	<field name="filename">e17670f8b2bc0f9a260d34aa83bd40a9d738e3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/35/e17670f8b2bc0f9a260d34aa83bd40a9d738e3</field>
	<field name="filename">36</field>
	<field name="filename_full">.\grit/test/dot_git/objects/36</field>
	<field name="filename">37c7a23088ef2dabae477f385cdaa65c70a251</field>
	<field name="filename_full">.\grit/test/dot_git/objects/36/37c7a23088ef2dabae477f385cdaa65c70a251</field>
	<field name="filename">5e358e24b22ca327750961b28dbfba0330d53f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/36/5e358e24b22ca327750961b28dbfba0330d53f</field>
	<field name="filename">840b2a85f282cb11294190666a52f764da2e35</field>
	<field name="filename_full">.\grit/test/dot_git/objects/36/840b2a85f282cb11294190666a52f764da2e35</field>
	<field name="filename">855d1bea32e3d3f7e0f0ae135e85cc9e9a2671</field>
	<field name="filename_full">.\grit/test/dot_git/objects/36/855d1bea32e3d3f7e0f0ae135e85cc9e9a2671</field>
	<field name="filename">dba981988940ffe26fd7a818d1216360ade56d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/36/dba981988940ffe26fd7a818d1216360ade56d</field>
	<field name="filename">e81104a0508fea06062a796fd85f457e829380</field>
	<field name="filename_full">.\grit/test/dot_git/objects/36/e81104a0508fea06062a796fd85f457e829380</field>
	<field name="filename">f8ebd8d58b3ce1a337024e6b71107591eaa634</field>
	<field name="filename_full">.\grit/test/dot_git/objects/36/f8ebd8d58b3ce1a337024e6b71107591eaa634</field>
	<field name="filename">37</field>
	<field name="filename_full">.\grit/test/dot_git/objects/37</field>
	<field name="filename">175959911a8e8032e07935cde93b873f2466f3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/37/175959911a8e8032e07935cde93b873f2466f3</field>
	<field name="filename">593280ce24318d5ff8eb1448ae06c83772afe4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/37/593280ce24318d5ff8eb1448ae06c83772afe4</field>
	<field name="filename">6ea43a79070bdea30e0508edf49ee891279559</field>
	<field name="filename_full">.\grit/test/dot_git/objects/37/6ea43a79070bdea30e0508edf49ee891279559</field>
	<field name="filename">7c4c6c44acbdfd450bdd0eba55845ee885be82</field>
	<field name="filename_full">.\grit/test/dot_git/objects/37/7c4c6c44acbdfd450bdd0eba55845ee885be82</field>
	<field name="filename">a7c60c6a9466823e09acaf6c8cdfb9e0ca79a5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/37/a7c60c6a9466823e09acaf6c8cdfb9e0ca79a5</field>
	<field name="filename">b6a48b7f3b475a48fe1cbe6c85e1e5c47caa32</field>
	<field name="filename_full">.\grit/test/dot_git/objects/37/b6a48b7f3b475a48fe1cbe6c85e1e5c47caa32</field>
	<field name="filename">e9dad721f3414c686125bef88f1de22eec34f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/37/e9dad721f3414c686125bef88f1de22eec34f1</field>
	<field name="filename">38</field>
	<field name="filename_full">.\grit/test/dot_git/objects/38</field>
	<field name="filename">2f4decb47b8d35ced4b1c386f9ea8a38147897</field>
	<field name="filename_full">.\grit/test/dot_git/objects/38/2f4decb47b8d35ced4b1c386f9ea8a38147897</field>
	<field name="filename">507ac81bcab18fff9a4062c508b3ae1c3ed2b4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/38/507ac81bcab18fff9a4062c508b3ae1c3ed2b4</field>
	<field name="filename">5b7e7fbe895f4c9e866899c8a9dd413c687e3f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/38/5b7e7fbe895f4c9e866899c8a9dd413c687e3f</field>
	<field name="filename">5f9658195f704e1f20ae167f23c3a91871dba2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/38/5f9658195f704e1f20ae167f23c3a91871dba2</field>
	<field name="filename">6eb8dab973c5baa669c4627287f608a602a837</field>
	<field name="filename_full">.\grit/test/dot_git/objects/38/6eb8dab973c5baa669c4627287f608a602a837</field>
	<field name="filename">965f6e6489e6a9c0011c367ffba2b988512f50</field>
	<field name="filename_full">.\grit/test/dot_git/objects/38/965f6e6489e6a9c0011c367ffba2b988512f50</field>
	<field name="filename">d6fa611eb2c06126f711eb64f036ffa83331fe</field>
	<field name="filename_full">.\grit/test/dot_git/objects/38/d6fa611eb2c06126f711eb64f036ffa83331fe</field>
	<field name="filename">39</field>
	<field name="filename_full">.\grit/test/dot_git/objects/39</field>
	<field name="filename">414f3aeb1c46b4829d41c2b5a41bc243137ab6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/39/414f3aeb1c46b4829d41c2b5a41bc243137ab6</field>
	<field name="filename">49bf564f18107bb9c42f7c78e93c935d749db2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/39/49bf564f18107bb9c42f7c78e93c935d749db2</field>
	<field name="filename">693b227a583b222dd22eacfd16c948e40e8c19</field>
	<field name="filename_full">.\grit/test/dot_git/objects/39/693b227a583b222dd22eacfd16c948e40e8c19</field>
	<field name="filename">d92ab22590d648ed6efea996048876bf599c0a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/39/d92ab22590d648ed6efea996048876bf599c0a</field>
	<field name="filename">dbd7e9d354ee652f7f5ca117f867696c32fd73</field>
	<field name="filename_full">.\grit/test/dot_git/objects/39/dbd7e9d354ee652f7f5ca117f867696c32fd73</field>
	<field name="filename">3a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3a</field>
	<field name="filename">6030afdfb2890fd10a19d4fba1395d7b24f828</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3a/6030afdfb2890fd10a19d4fba1395d7b24f828</field>
	<field name="filename">9edce0b66cad4c011fb35c90e80b796ba5610f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3a/9edce0b66cad4c011fb35c90e80b796ba5610f</field>
	<field name="filename">3b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3b</field>
	<field name="filename">004186dc696853e8af1c478a961fd4b8ec0531</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3b/004186dc696853e8af1c478a961fd4b8ec0531</field>
	<field name="filename">1fd96da523e9922a1f2b126bbcbc65c7ee9c71</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3b/1fd96da523e9922a1f2b126bbcbc65c7ee9c71</field>
	<field name="filename">494f98fb24ee05c63c63cfaafa730bd933f9ea</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3b/494f98fb24ee05c63c63cfaafa730bd933f9ea</field>
	<field name="filename">5bf78ab1d4b5f3d36129b66f1c4a00cc52dcd9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3b/5bf78ab1d4b5f3d36129b66f1c4a00cc52dcd9</field>
	<field name="filename">5cc49cd62921d1abc9eaac373c29ea6fa604c9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3b/5cc49cd62921d1abc9eaac373c29ea6fa604c9</field>
	<field name="filename">79e6461579ba7cc976cea73d36a0c7ac56ff57</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3b/79e6461579ba7cc976cea73d36a0c7ac56ff57</field>
	<field name="filename">d1a9b888fb95bf4ce7da5ba1d0f7db711a07ad</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3b/d1a9b888fb95bf4ce7da5ba1d0f7db711a07ad</field>
	<field name="filename">3c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3c</field>
	<field name="filename">135209062a3ccd2032092ab2457eb3980b249f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3c/135209062a3ccd2032092ab2457eb3980b249f</field>
	<field name="filename">612dfb7e6530546a433262c4ccddc633da823a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3c/612dfb7e6530546a433262c4ccddc633da823a</field>
	<field name="filename">631958129f12cd496c2c918ff76c04e3aec471</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3c/631958129f12cd496c2c918ff76c04e3aec471</field>
	<field name="filename">681414cda7c8200292d9c37baef74b8e55b25e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3c/681414cda7c8200292d9c37baef74b8e55b25e</field>
	<field name="filename">3d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3d</field>
	<field name="filename">68199aa3c3ae3e55fad81d987bb954265da64d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3d/68199aa3c3ae3e55fad81d987bb954265da64d</field>
	<field name="filename">6fb637c4c133a62712c2f5c5bc5d6c918b257b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3d/6fb637c4c133a62712c2f5c5bc5d6c918b257b</field>
	<field name="filename">8cf6e46dbc2863435a7c0befa9f0f9b72f2b40</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3d/8cf6e46dbc2863435a7c0befa9f0f9b72f2b40</field>
	<field name="filename">c1b8ad89993a94b8b8af627ecefb656f450b3a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3d/c1b8ad89993a94b8b8af627ecefb656f450b3a</field>
	<field name="filename">e0ed396b3309d3135dd608633c7e24d7eb7a78</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3d/e0ed396b3309d3135dd608633c7e24d7eb7a78</field>
	<field name="filename">3e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3e</field>
	<field name="filename">4e5142403fdafa5daaf580ad2754bd5469f297</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3e/4e5142403fdafa5daaf580ad2754bd5469f297</field>
	<field name="filename">8b951715d51b517615319e74f1ff5f143bdd33</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3e/8b951715d51b517615319e74f1ff5f143bdd33</field>
	<field name="filename">c671d1b0661dec389ec97ac49729be98a98363</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3e/c671d1b0661dec389ec97ac49729be98a98363</field>
	<field name="filename">3f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3f</field>
	<field name="filename">09b8a94def39594ff66018a0267e3a095f0166</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3f/09b8a94def39594ff66018a0267e3a095f0166</field>
	<field name="filename">a4e130fa18c92e3030d4accb5d3e0cadd40157</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3f/a4e130fa18c92e3030d4accb5d3e0cadd40157</field>
	<field name="filename">a8b0bb7b1158b3d75cb01a338c688465266ae8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3f/a8b0bb7b1158b3d75cb01a338c688465266ae8</field>
	<field name="filename">ab2e2576d21e160f65e0f037ef49932153b750</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3f/ab2e2576d21e160f65e0f037ef49932153b750</field>
	<field name="filename">ef1de16cfa99882a900d682c98bf4cdbb0bd1e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/3f/ef1de16cfa99882a900d682c98bf4cdbb0bd1e</field>
	<field name="filename">40</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40</field>
	<field name="filename">1b901ae82016d0e387f3369e2c73b9729fa960</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40/1b901ae82016d0e387f3369e2c73b9729fa960</field>
	<field name="filename">5da6eab49ad6c40202515218685cc5e47ba191</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40/5da6eab49ad6c40202515218685cc5e47ba191</field>
	<field name="filename">878bdc3b0b546884c23cc56e36bb01bca26360</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40/878bdc3b0b546884c23cc56e36bb01bca26360</field>
	<field name="filename">98e7e0b3ddb23cbb02faed6443bb662103cca9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40/98e7e0b3ddb23cbb02faed6443bb662103cca9</field>
	<field name="filename">b5472e26b885b5578a748a7199a49f78fc640f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40/b5472e26b885b5578a748a7199a49f78fc640f</field>
	<field name="filename">c2094b4c5f49c7a75493c3b60718f692238689</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40/c2094b4c5f49c7a75493c3b60718f692238689</field>
	<field name="filename">fbcace81729947e3b6a50db55f20e3b0b8619c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40/fbcace81729947e3b6a50db55f20e3b0b8619c</field>
	<field name="filename">fccf8916dbf1a607b69cb308affb800b24eff8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/40/fccf8916dbf1a607b69cb308affb800b24eff8</field>
	<field name="filename">41</field>
	<field name="filename_full">.\grit/test/dot_git/objects/41</field>
	<field name="filename">773794cb94bc0b504c25fe2c7160a4297ac722</field>
	<field name="filename_full">.\grit/test/dot_git/objects/41/773794cb94bc0b504c25fe2c7160a4297ac722</field>
	<field name="filename">96d4ceab2df8250b126c1fefe537aed40ba3b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/41/96d4ceab2df8250b126c1fefe537aed40ba3b8</field>
	<field name="filename">42</field>
	<field name="filename_full">.\grit/test/dot_git/objects/42</field>
	<field name="filename">3bd8e89cc0374ecbac89cb81f4d7994971373e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/42/3bd8e89cc0374ecbac89cb81f4d7994971373e</field>
	<field name="filename">55d57961f71cbbf37c4895cf2e7944cfb3c920</field>
	<field name="filename_full">.\grit/test/dot_git/objects/42/55d57961f71cbbf37c4895cf2e7944cfb3c920</field>
	<field name="filename">77d827856344ecab7a8cd9b4cc8de189a058b6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/42/77d827856344ecab7a8cd9b4cc8de189a058b6</field>
	<field name="filename">8b046f3d44ee60a2707cd0ec870f214d52b51d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/42/8b046f3d44ee60a2707cd0ec870f214d52b51d</field>
	<field name="filename">e9f36ecb27ec85cd80085f1e9848158af142cc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/42/e9f36ecb27ec85cd80085f1e9848158af142cc</field>
	<field name="filename">ea225300e8cf78bb8dee7867cd9b9dd62a2e42</field>
	<field name="filename_full">.\grit/test/dot_git/objects/42/ea225300e8cf78bb8dee7867cd9b9dd62a2e42</field>
	<field name="filename">43</field>
	<field name="filename_full">.\grit/test/dot_git/objects/43</field>
	<field name="filename">66fbe9656ed24eac8afa838af2e6872e0c0f50</field>
	<field name="filename_full">.\grit/test/dot_git/objects/43/66fbe9656ed24eac8afa838af2e6872e0c0f50</field>
	<field name="filename">67a306774650effecbaf8cd100f2d01d53c736</field>
	<field name="filename_full">.\grit/test/dot_git/objects/43/67a306774650effecbaf8cd100f2d01d53c736</field>
	<field name="filename">990427a4d4cf451298aa2adff627c97c7fbbba</field>
	<field name="filename_full">.\grit/test/dot_git/objects/43/990427a4d4cf451298aa2adff627c97c7fbbba</field>
	<field name="filename">44</field>
	<field name="filename_full">.\grit/test/dot_git/objects/44</field>
	<field name="filename">4120068cf48a97010e1291f7a6b148dc7db3fe</field>
	<field name="filename_full">.\grit/test/dot_git/objects/44/4120068cf48a97010e1291f7a6b148dc7db3fe</field>
	<field name="filename">6235527422ab47a85897515acf1ba002f7d621</field>
	<field name="filename_full">.\grit/test/dot_git/objects/44/6235527422ab47a85897515acf1ba002f7d621</field>
	<field name="filename">c1bb76bef6677159624272045dbbd9e1be3de6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/44/c1bb76bef6677159624272045dbbd9e1be3de6</field>
	<field name="filename">45</field>
	<field name="filename_full">.\grit/test/dot_git/objects/45</field>
	<field name="filename">7135f1291992d204581e4f70019268d2b41f88</field>
	<field name="filename_full">.\grit/test/dot_git/objects/45/7135f1291992d204581e4f70019268d2b41f88</field>
	<field name="filename">7629071e6056bf4a8595a6f171b3404892d528</field>
	<field name="filename_full">.\grit/test/dot_git/objects/45/7629071e6056bf4a8595a6f171b3404892d528</field>
	<field name="filename">46</field>
	<field name="filename_full">.\grit/test/dot_git/objects/46</field>
	<field name="filename">ccdb048ecf2b9452dc2e0174dfdba426df0f62</field>
	<field name="filename_full">.\grit/test/dot_git/objects/46/ccdb048ecf2b9452dc2e0174dfdba426df0f62</field>
	<field name="filename">d3b63432ebd26da44b9b5f4463ecab8610003c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/46/d3b63432ebd26da44b9b5f4463ecab8610003c</field>
	<field name="filename">47</field>
	<field name="filename_full">.\grit/test/dot_git/objects/47</field>
	<field name="filename">07d2feacccdc27e3ae08b6557313c66ad792cb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/47/07d2feacccdc27e3ae08b6557313c66ad792cb</field>
	<field name="filename">36537c04c8c3d07d91d2b3d7d3ec9f772bc208</field>
	<field name="filename_full">.\grit/test/dot_git/objects/47/36537c04c8c3d07d91d2b3d7d3ec9f772bc208</field>
	<field name="filename">5cda8f04478f1f3eccdfe350cef3beb5854267</field>
	<field name="filename_full">.\grit/test/dot_git/objects/47/5cda8f04478f1f3eccdfe350cef3beb5854267</field>
	<field name="filename">f94fe43e503475c4699b9bab535949d45786da</field>
	<field name="filename_full">.\grit/test/dot_git/objects/47/f94fe43e503475c4699b9bab535949d45786da</field>
	<field name="filename">48</field>
	<field name="filename_full">.\grit/test/dot_git/objects/48</field>
	<field name="filename">18f5a5bf96cc367861b358578bad5d14bc1ad9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/48/18f5a5bf96cc367861b358578bad5d14bc1ad9</field>
	<field name="filename">49</field>
	<field name="filename_full">.\grit/test/dot_git/objects/49</field>
	<field name="filename">9167ba61ed6a925dbf1d801a417fed31325e79</field>
	<field name="filename_full">.\grit/test/dot_git/objects/49/9167ba61ed6a925dbf1d801a417fed31325e79</field>
	<field name="filename">c183e5076a69d95cb3267d65b15f07e8ef3dd0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/49/c183e5076a69d95cb3267d65b15f07e8ef3dd0</field>
	<field name="filename">4a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4a</field>
	<field name="filename">4960fbcaa4f2b5f540c2417a0e6e3e13cd21e5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4a/4960fbcaa4f2b5f540c2417a0e6e3e13cd21e5</field>
	<field name="filename">4aadbb8d70d1a8f1e0494d93c51cf0a70c73c7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4a/4aadbb8d70d1a8f1e0494d93c51cf0a70c73c7</field>
	<field name="filename">4b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4b</field>
	<field name="filename">69268fd027874cdc84e08be1a7b0adabe29bd6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4b/69268fd027874cdc84e08be1a7b0adabe29bd6</field>
	<field name="filename">6a031b5bca40f2d1197e0d0a8c053e48f2d1b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4b/6a031b5bca40f2d1197e0d0a8c053e48f2d1b8</field>
	<field name="filename">ac1a816ea4c330c0a60a7faead02c80d216bf9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4b/ac1a816ea4c330c0a60a7faead02c80d216bf9</field>
	<field name="filename">c83809c12606b8673503ea595bc9dc926a4f85</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4b/c83809c12606b8673503ea595bc9dc926a4f85</field>
	<field name="filename">4c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4c</field>
	<field name="filename">5d14c6b35b4b9f9f8a10db253e3a61968fe0d5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4c/5d14c6b35b4b9f9f8a10db253e3a61968fe0d5</field>
	<field name="filename">721af72f40368c4af46c04956fe6553505b03e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4c/721af72f40368c4af46c04956fe6553505b03e</field>
	<field name="filename">765b6172fefd3aa2f2462f40b2c5614f855e33</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4c/765b6172fefd3aa2f2462f40b2c5614f855e33</field>
	<field name="filename">82aff6d42a4a658102f617678bfd9653e0a997</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4c/82aff6d42a4a658102f617678bfd9653e0a997</field>
	<field name="filename">c3aff3a2c0395c6acba1f57f3adf77a254847f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4c/c3aff3a2c0395c6acba1f57f3adf77a254847f</field>
	<field name="filename">c4d71390cf1c9fbe9543b5da0cb0506fc354da</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4c/c4d71390cf1c9fbe9543b5da0cb0506fc354da</field>
	<field name="filename">ee78c5ee3ab8591996a1b2f03fd20c78a33491</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4c/ee78c5ee3ab8591996a1b2f03fd20c78a33491</field>
	<field name="filename">4d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4d</field>
	<field name="filename">15668f43bd3d20dea783448a37421254211974</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4d/15668f43bd3d20dea783448a37421254211974</field>
	<field name="filename">251e90cddd2da086b1a094a40877f94699c97b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4d/251e90cddd2da086b1a094a40877f94699c97b</field>
	<field name="filename">35b41a2bcd2d028a9abffa2218239d0b1a04dd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4d/35b41a2bcd2d028a9abffa2218239d0b1a04dd</field>
	<field name="filename">4af31ee8fb34570f7c50474042246adf5f9536</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4d/4af31ee8fb34570f7c50474042246adf5f9536</field>
	<field name="filename">d750e01c939c69940c3633ec65c18c97e9480f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4d/d750e01c939c69940c3633ec65c18c97e9480f</field>
	<field name="filename">fbecaffa3aab6f4f8823db875466a4e079d311</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4d/fbecaffa3aab6f4f8823db875466a4e079d311</field>
	<field name="filename">4e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4e</field>
	<field name="filename">0942f5895107d26ed935f94720ce8fcb5677f7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4e/0942f5895107d26ed935f94720ce8fcb5677f7</field>
	<field name="filename">1ba5a8835b0208f7b4b8832a3ac1f11c5923ad</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4e/1ba5a8835b0208f7b4b8832a3ac1f11c5923ad</field>
	<field name="filename">6593b191405aec3d286b1e5e61ef864a47e779</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4e/6593b191405aec3d286b1e5e61ef864a47e779</field>
	<field name="filename">749569e29fd394f47f679262bf138307352c19</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4e/749569e29fd394f47f679262bf138307352c19</field>
	<field name="filename">9d21828e2e5003af0be5bb895350c428e6cfac</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4e/9d21828e2e5003af0be5bb895350c428e6cfac</field>
	<field name="filename">f86eb244bbbde9b793fd8cfab92042adb51485</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4e/f86eb244bbbde9b793fd8cfab92042adb51485</field>
	<field name="filename">4f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4f</field>
	<field name="filename">09b8bf59198a887fb97de69dc6d8385ee74756</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4f/09b8bf59198a887fb97de69dc6d8385ee74756</field>
	<field name="filename">72728413e0e66b7281b979dce17eadc2fd8c60</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4f/72728413e0e66b7281b979dce17eadc2fd8c60</field>
	<field name="filename">ccb01f2d6a0ba681a5cc489af24adacfdab09a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4f/ccb01f2d6a0ba681a5cc489af24adacfdab09a</field>
	<field name="filename">f1303d44eba1b583ea2a3b7765153ee1743e61</field>
	<field name="filename_full">.\grit/test/dot_git/objects/4f/f1303d44eba1b583ea2a3b7765153ee1743e61</field>
	<field name="filename">50</field>
	<field name="filename_full">.\grit/test/dot_git/objects/50</field>
	<field name="filename">1b7e3e4924d35febd00c13edf3cb513695b09b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/50/1b7e3e4924d35febd00c13edf3cb513695b09b</field>
	<field name="filename">3e3076ad906d21bda16fa7dcd22eab19847c96</field>
	<field name="filename_full">.\grit/test/dot_git/objects/50/3e3076ad906d21bda16fa7dcd22eab19847c96</field>
	<field name="filename">40f4c67674acda890725edcd0425d02093107c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/50/40f4c67674acda890725edcd0425d02093107c</field>
	<field name="filename">87e423df619ef636e056e28a24f8cb7b873adf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/50/87e423df619ef636e056e28a24f8cb7b873adf</field>
	<field name="filename">51</field>
	<field name="filename_full">.\grit/test/dot_git/objects/51</field>
	<field name="filename">28cc1329ea4d1a14910c23fe2b76d669c27dce</field>
	<field name="filename_full">.\grit/test/dot_git/objects/51/28cc1329ea4d1a14910c23fe2b76d669c27dce</field>
	<field name="filename">48455670cac62caf07b4104b898982a2ee1d27</field>
	<field name="filename_full">.\grit/test/dot_git/objects/51/48455670cac62caf07b4104b898982a2ee1d27</field>
	<field name="filename">84bca98dfa4da277688eb0cf5d4c3c30049dbc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/51/84bca98dfa4da277688eb0cf5d4c3c30049dbc</field>
	<field name="filename">52</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52</field>
	<field name="filename">0dad6b8078f0ec22714905c569a55adb18207c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52/0dad6b8078f0ec22714905c569a55adb18207c</field>
	<field name="filename">7c32e1f12197b30c91a0b0c47492ee5f84d116</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52/7c32e1f12197b30c91a0b0c47492ee5f84d116</field>
	<field name="filename">985c69fce3578762db2c549414d93c5344973f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52/985c69fce3578762db2c549414d93c5344973f</field>
	<field name="filename">a0ed389b902d699b002b4b974d5a422f5d648f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52/a0ed389b902d699b002b4b974d5a422f5d648f</field>
	<field name="filename">c074ceaeeae3ad8faba5eaa883b29d47e3753d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52/c074ceaeeae3ad8faba5eaa883b29d47e3753d</field>
	<field name="filename">e6e4c8d61116b7306af1e3a83330e9b2f2b22e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52/e6e4c8d61116b7306af1e3a83330e9b2f2b22e</field>
	<field name="filename">ebe29d5aab2f2d13bff0300809349e47a93578</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52/ebe29d5aab2f2d13bff0300809349e47a93578</field>
	<field name="filename">f056f557e9c34c1d410e38f28fb0ff3eb8cf8a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/52/f056f557e9c34c1d410e38f28fb0ff3eb8cf8a</field>
	<field name="filename">53</field>
	<field name="filename_full">.\grit/test/dot_git/objects/53</field>
	<field name="filename">029523a88fbcc802bc09d177b250779077da61</field>
	<field name="filename_full">.\grit/test/dot_git/objects/53/029523a88fbcc802bc09d177b250779077da61</field>
	<field name="filename">94a7335809300349d81816fcd5c7e4c838025b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/53/94a7335809300349d81816fcd5c7e4c838025b</field>
	<field name="filename">bed2e68961f68a0d28589ab78ac3cddea26870</field>
	<field name="filename_full">.\grit/test/dot_git/objects/53/bed2e68961f68a0d28589ab78ac3cddea26870</field>
	<field name="filename">d7b4bf2a0de4f29efbcf9cc5151e6599bfb180</field>
	<field name="filename_full">.\grit/test/dot_git/objects/53/d7b4bf2a0de4f29efbcf9cc5151e6599bfb180</field>
	<field name="filename">e7f70cb60a4a2c42e0c16f9eac862d527ef2b5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/53/e7f70cb60a4a2c42e0c16f9eac862d527ef2b5</field>
	<field name="filename">54</field>
	<field name="filename_full">.\grit/test/dot_git/objects/54</field>
	<field name="filename">1264963de31abc20ae319ffb81afb894a58777</field>
	<field name="filename_full">.\grit/test/dot_git/objects/54/1264963de31abc20ae319ffb81afb894a58777</field>
	<field name="filename">55</field>
	<field name="filename_full">.\grit/test/dot_git/objects/55</field>
	<field name="filename">1240c0e157f1f2758ca49851278b209229067a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/55/1240c0e157f1f2758ca49851278b209229067a</field>
	<field name="filename">4dd421736514dbff8ee54bcd0fdb14c6066ec5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/55/4dd421736514dbff8ee54bcd0fdb14c6066ec5</field>
	<field name="filename">551f97b57dda2e947f0fd75097a712f3c72fa4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/55/551f97b57dda2e947f0fd75097a712f3c72fa4</field>
	<field name="filename">9b8493ad088486436a0e5569abd24005bd00b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/55/9b8493ad088486436a0e5569abd24005bd00b8</field>
	<field name="filename">a588a07006a47eaf9805311e73a5c6c8516344</field>
	<field name="filename_full">.\grit/test/dot_git/objects/55/a588a07006a47eaf9805311e73a5c6c8516344</field>
	<field name="filename">b1da2f93e556f8ff2ab9063d73b1ff633f2954</field>
	<field name="filename_full">.\grit/test/dot_git/objects/55/b1da2f93e556f8ff2ab9063d73b1ff633f2954</field>
	<field name="filename">56</field>
	<field name="filename_full">.\grit/test/dot_git/objects/56</field>
	<field name="filename">3e1a6828c118fda28f11a33f9349bc15dd2607</field>
	<field name="filename_full">.\grit/test/dot_git/objects/56/3e1a6828c118fda28f11a33f9349bc15dd2607</field>
	<field name="filename">47e47c36c08268426e558565baf40ab240fe9e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/56/47e47c36c08268426e558565baf40ab240fe9e</field>
	<field name="filename">cfafc365c69aa55f9558a59e6d909d2f6822d9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/56/cfafc365c69aa55f9558a59e6d909d2f6822d9</field>
	<field name="filename">d26caca2e437e35d35cf42f782f8c74b283df2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/56/d26caca2e437e35d35cf42f782f8c74b283df2</field>
	<field name="filename">d65dce3016a197a757b693799847d2fddbb04e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/56/d65dce3016a197a757b693799847d2fddbb04e</field>
	<field name="filename">57</field>
	<field name="filename_full">.\grit/test/dot_git/objects/57</field>
	<field name="filename">639e8ddac5fff2b7693c462538babc53ef81d4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/57/639e8ddac5fff2b7693c462538babc53ef81d4</field>
	<field name="filename">771c0727c589e983019a5a076190d156c5ef1c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/57/771c0727c589e983019a5a076190d156c5ef1c</field>
	<field name="filename">e4351700dc0a81ae1aa812484eb0551b1a0866</field>
	<field name="filename_full">.\grit/test/dot_git/objects/57/e4351700dc0a81ae1aa812484eb0551b1a0866</field>
	<field name="filename">58</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58</field>
	<field name="filename">223b18290bf0265b04b3697f729dba40f9e7cc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/223b18290bf0265b04b3697f729dba40f9e7cc</field>
	<field name="filename">40f249cdfffd086dbad61feea0c3a8a4b3d109</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/40f249cdfffd086dbad61feea0c3a8a4b3d109</field>
	<field name="filename">4b8f537c2d89e0e47d6bbde2627ea6f01d4a7f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/4b8f537c2d89e0e47d6bbde2627ea6f01d4a7f</field>
	<field name="filename">5c2c53d923fa6b480ae2ddc2b820b317b1403d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/5c2c53d923fa6b480ae2ddc2b820b317b1403d</field>
	<field name="filename">628e6483b6cc5cc721f1ee6d398bd0c2a87312</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/628e6483b6cc5cc721f1ee6d398bd0c2a87312</field>
	<field name="filename">74dd25ed52fa87b8597015a538b56ab0100d55</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/74dd25ed52fa87b8597015a538b56ab0100d55</field>
	<field name="filename">8455d11d4347b9ac17d31205e8f638533727f4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/8455d11d4347b9ac17d31205e8f638533727f4</field>
	<field name="filename">872e956be186c8fc87efaad3175d4ad9324283</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/872e956be186c8fc87efaad3175d4ad9324283</field>
	<field name="filename">b73b8c03710dbc09303ca0a6a6bf0041481ac8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/b73b8c03710dbc09303ca0a6a6bf0041481ac8</field>
	<field name="filename">f04c947cbdd1f0c2782c1c5575328680790193</field>
	<field name="filename_full">.\grit/test/dot_git/objects/58/f04c947cbdd1f0c2782c1c5575328680790193</field>
	<field name="filename">59</field>
	<field name="filename_full">.\grit/test/dot_git/objects/59</field>
	<field name="filename">032046844377888d7f0d53e8bf49e469321ebf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/59/032046844377888d7f0d53e8bf49e469321ebf</field>
	<field name="filename">96606c30d29c0bc97f67b18a0f255f87cc2da3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/59/96606c30d29c0bc97f67b18a0f255f87cc2da3</field>
	<field name="filename">eb45a3f0a6b80dbbb7b99024e55227a4086eba</field>
	<field name="filename_full">.\grit/test/dot_git/objects/59/eb45a3f0a6b80dbbb7b99024e55227a4086eba</field>
	<field name="filename">ee1a70e83c28f2d74843b91e39e557340e6172</field>
	<field name="filename_full">.\grit/test/dot_git/objects/59/ee1a70e83c28f2d74843b91e39e557340e6172</field>
	<field name="filename">ef600ad21001772c04e540918f28c00ea71b39</field>
	<field name="filename_full">.\grit/test/dot_git/objects/59/ef600ad21001772c04e540918f28c00ea71b39</field>
	<field name="filename">5a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5a</field>
	<field name="filename">6c2633eb0410a8651550d1f894c0a06fd4f92d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5a/6c2633eb0410a8651550d1f894c0a06fd4f92d</field>
	<field name="filename">5b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5b</field>
	<field name="filename">02a248683c285d22af6640765232a018cd666c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5b/02a248683c285d22af6640765232a018cd666c</field>
	<field name="filename">2741fde089f266afca1adcfdc4eeb8dfe4a463</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5b/2741fde089f266afca1adcfdc4eeb8dfe4a463</field>
	<field name="filename">9e2e35bffc027b09677112d4bd1b3af4d5c313</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5b/9e2e35bffc027b09677112d4bd1b3af4d5c313</field>
	<field name="filename">c6f75b8462a5d6190fdd50f3e74cf9e1dfeed3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5b/c6f75b8462a5d6190fdd50f3e74cf9e1dfeed3</field>
	<field name="filename">f84617e57e85ca06eb64271e0cabfdf8cd925f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5b/f84617e57e85ca06eb64271e0cabfdf8cd925f</field>
	<field name="filename">fd1435a75583e9dd95536f2da3882f41604727</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5b/fd1435a75583e9dd95536f2da3882f41604727</field>
	<field name="filename">5c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5c</field>
	<field name="filename">2c0c973c27c8ee488d48bfd12b6e96d202381c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5c/2c0c973c27c8ee488d48bfd12b6e96d202381c</field>
	<field name="filename">72f12ea25d302ad4a4ceb9f5f9f033cbf3fffc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5c/72f12ea25d302ad4a4ceb9f5f9f033cbf3fffc</field>
	<field name="filename">8279a64dcfe94e59973fd0125cf5824296623a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5c/8279a64dcfe94e59973fd0125cf5824296623a</field>
	<field name="filename">a47fc1a9590937f34809ea48f5bd873b218317</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5c/a47fc1a9590937f34809ea48f5bd873b218317</field>
	<field name="filename">5d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d</field>
	<field name="filename">6109a9e5ef1f941a39144f14340ceef80ff331</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d/6109a9e5ef1f941a39144f14340ceef80ff331</field>
	<field name="filename">66d8da0c12ac0eca4e8c6e766c82b74593ec88</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d/66d8da0c12ac0eca4e8c6e766c82b74593ec88</field>
	<field name="filename">84fe98507e47d78953bd0208ae063f06e52b1f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d/84fe98507e47d78953bd0208ae063f06e52b1f</field>
	<field name="filename">a88f7992de649d8eae9529095b419e8a70f026</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d/a88f7992de649d8eae9529095b419e8a70f026</field>
	<field name="filename">c9b501f6b70d5aa3d6420fa5f35bb0a2154a6a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d/c9b501f6b70d5aa3d6420fa5f35bb0a2154a6a</field>
	<field name="filename">e68783db60cc4b7361b8639a73dda527b50b58</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d/e68783db60cc4b7361b8639a73dda527b50b58</field>
	<field name="filename">ed8819f036921e27f2668819236725c1bc793e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d/ed8819f036921e27f2668819236725c1bc793e</field>
	<field name="filename">fc38afe33e85878cd25a50ad3f18949372afbe</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5d/fc38afe33e85878cd25a50ad3f18949372afbe</field>
	<field name="filename">5e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5e</field>
	<field name="filename">2e8449f6aea6b4ca05a1bca0478c1ddfd5535a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5e/2e8449f6aea6b4ca05a1bca0478c1ddfd5535a</field>
	<field name="filename">329b884e07932517bf9909303f6017cb178a25</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5e/329b884e07932517bf9909303f6017cb178a25</field>
	<field name="filename">79da1a7446822b46659edf25e9144816fa0454</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5e/79da1a7446822b46659edf25e9144816fa0454</field>
	<field name="filename">d3c8d603d0ee1d52e0d512123e11bc892ec244</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5e/d3c8d603d0ee1d52e0d512123e11bc892ec244</field>
	<field name="filename">5f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5f</field>
	<field name="filename">04dc6aa3c9ac971fb0c6720602be9c120c16f4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5f/04dc6aa3c9ac971fb0c6720602be9c120c16f4</field>
	<field name="filename">701c07e50ba10b912455198fcfc2392e29bd44</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5f/701c07e50ba10b912455198fcfc2392e29bd44</field>
	<field name="filename">7950617f2d778d6209a11cb13e511ae4fb845f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5f/7950617f2d778d6209a11cb13e511ae4fb845f</field>
	<field name="filename">88d05fb1efcdb4d1c825b3590f6a941d878048</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5f/88d05fb1efcdb4d1c825b3590f6a941d878048</field>
	<field name="filename">c8689d7e4cb9dc91900539ff0562130cf90fdb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5f/c8689d7e4cb9dc91900539ff0562130cf90fdb</field>
	<field name="filename">ec1ca382b811bf51abc319eb929cd7553842e8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/5f/ec1ca382b811bf51abc319eb929cd7553842e8</field>
	<field name="filename">60</field>
	<field name="filename_full">.\grit/test/dot_git/objects/60</field>
	<field name="filename">390f7ddecc01fafb62b7d891f93ea23498acb8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/60/390f7ddecc01fafb62b7d891f93ea23498acb8</field>
	<field name="filename">7d0c6725b82a2b8ad5977fdf08f7319cfb5b2b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/60/7d0c6725b82a2b8ad5977fdf08f7319cfb5b2b</field>
	<field name="filename">61</field>
	<field name="filename_full">.\grit/test/dot_git/objects/61</field>
	<field name="filename">0bed6eb24528c64369a7eb731801d1111bdf4d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/61/0bed6eb24528c64369a7eb731801d1111bdf4d</field>
	<field name="filename">45457b008cd93e22a44f4cfee2b65f05808d17</field>
	<field name="filename_full">.\grit/test/dot_git/objects/61/45457b008cd93e22a44f4cfee2b65f05808d17</field>
	<field name="filename">7d5fec3e4ee86080adc1dedd4ef91cc1b515d4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/61/7d5fec3e4ee86080adc1dedd4ef91cc1b515d4</field>
	<field name="filename">62</field>
	<field name="filename_full">.\grit/test/dot_git/objects/62</field>
	<field name="filename">d812d2a42d5ad62cbcef99a81749d1ed68f2c2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/62/d812d2a42d5ad62cbcef99a81749d1ed68f2c2</field>
	<field name="filename">63</field>
	<field name="filename_full">.\grit/test/dot_git/objects/63</field>
	<field name="filename">142041870ce53f5ef4451b8cf021151e145054</field>
	<field name="filename_full">.\grit/test/dot_git/objects/63/142041870ce53f5ef4451b8cf021151e145054</field>
	<field name="filename">2ff9f2fc143cb67362b8267d57ff969d91ce85</field>
	<field name="filename_full">.\grit/test/dot_git/objects/63/2ff9f2fc143cb67362b8267d57ff969d91ce85</field>
	<field name="filename">5e6c9e4f53250d4aae886ead0a080d81e0af2c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/63/5e6c9e4f53250d4aae886ead0a080d81e0af2c</field>
	<field name="filename">64</field>
	<field name="filename_full">.\grit/test/dot_git/objects/64</field>
	<field name="filename">29532bf470fad3153093c7f4b10f69ee82ae18</field>
	<field name="filename_full">.\grit/test/dot_git/objects/64/29532bf470fad3153093c7f4b10f69ee82ae18</field>
	<field name="filename">2b8924b35c87dd48f07bbdb6d0deb1ae5495dc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/64/2b8924b35c87dd48f07bbdb6d0deb1ae5495dc</field>
	<field name="filename">3cc80fe2609914350d4a5bde3cc1c4d7197dc2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/64/3cc80fe2609914350d4a5bde3cc1c4d7197dc2</field>
	<field name="filename">53d33435bcf98c2736530f3fdd4f74a2cfb974</field>
	<field name="filename_full">.\grit/test/dot_git/objects/64/53d33435bcf98c2736530f3fdd4f74a2cfb974</field>
	<field name="filename">e717a84fb544375169f554be6b922aba692aa9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/64/e717a84fb544375169f554be6b922aba692aa9</field>
	<field name="filename">ec7cc059b0db49a529e51823891aef4d8bf338</field>
	<field name="filename_full">.\grit/test/dot_git/objects/64/ec7cc059b0db49a529e51823891aef4d8bf338</field>
	<field name="filename">ef0dfa8ef722d4caae716111efb647a1060405</field>
	<field name="filename_full">.\grit/test/dot_git/objects/64/ef0dfa8ef722d4caae716111efb647a1060405</field>
	<field name="filename">65</field>
	<field name="filename_full">.\grit/test/dot_git/objects/65</field>
	<field name="filename">46414b519e280abb855f6231e8da5287c7a47d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/65/46414b519e280abb855f6231e8da5287c7a47d</field>
	<field name="filename">d911ebcec541a3d3aecfde6d067b979e6e5086</field>
	<field name="filename_full">.\grit/test/dot_git/objects/65/d911ebcec541a3d3aecfde6d067b979e6e5086</field>
	<field name="filename">fded76255bcab79ffa0f0a8d0c914b4056b380</field>
	<field name="filename_full">.\grit/test/dot_git/objects/65/fded76255bcab79ffa0f0a8d0c914b4056b380</field>
	<field name="filename">66</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66</field>
	<field name="filename">1b95aeb34878aeacb70d74bf1c577b2cc461c3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/1b95aeb34878aeacb70d74bf1c577b2cc461c3</field>
	<field name="filename">34746a6fe80824066823779491b252ae012bd6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/34746a6fe80824066823779491b252ae012bd6</field>
	<field name="filename">51ea0653b01a5f73d9ae1593c2d8a7369a74d9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/51ea0653b01a5f73d9ae1593c2d8a7369a74d9</field>
	<field name="filename">5fa9d3c28c07aa174637aca8252f88e7ed15ff</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/5fa9d3c28c07aa174637aca8252f88e7ed15ff</field>
	<field name="filename">7e57234226564739a618858668734a6b244876</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/7e57234226564739a618858668734a6b244876</field>
	<field name="filename">893c143a41615e9d2690f179308fc2c9ea2e92</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/893c143a41615e9d2690f179308fc2c9ea2e92</field>
	<field name="filename">9224346dd756bf1d344d5a8b233805fa7e46e1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/9224346dd756bf1d344d5a8b233805fa7e46e1</field>
	<field name="filename">99b0c4524bcdf045b66498ef281f863fc10628</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/99b0c4524bcdf045b66498ef281f863fc10628</field>
	<field name="filename">de9d57e1401ecd2cca3cd6487fb4ef348f5911</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/de9d57e1401ecd2cca3cd6487fb4ef348f5911</field>
	<field name="filename">e81f2947ee43f489386e4839edbc51bbaa3200</field>
	<field name="filename_full">.\grit/test/dot_git/objects/66/e81f2947ee43f489386e4839edbc51bbaa3200</field>
	<field name="filename">67</field>
	<field name="filename_full">.\grit/test/dot_git/objects/67</field>
	<field name="filename">3f9b7a23a3fffe64f9ce4701914a110d70172b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/67/3f9b7a23a3fffe64f9ce4701914a110d70172b</field>
	<field name="filename">948a3f3783988c41844a3e3cba519563a6b6ae</field>
	<field name="filename_full">.\grit/test/dot_git/objects/67/948a3f3783988c41844a3e3cba519563a6b6ae</field>
	<field name="filename">9a2f922a0937fc209a3ae77bffcc9fda6c49d0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/67/9a2f922a0937fc209a3ae77bffcc9fda6c49d0</field>
	<field name="filename">68</field>
	<field name="filename_full">.\grit/test/dot_git/objects/68</field>
	<field name="filename">0d86dd159ecd96257a223e3e36f820ececa886</field>
	<field name="filename_full">.\grit/test/dot_git/objects/68/0d86dd159ecd96257a223e3e36f820ececa886</field>
	<field name="filename">ad8c20d09837654709a9511a22d719631606d4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/68/ad8c20d09837654709a9511a22d719631606d4</field>
	<field name="filename">69</field>
	<field name="filename_full">.\grit/test/dot_git/objects/69</field>
	<field name="filename">51fae70af8ff7ee84d7c3f9f0bdc99214451ed</field>
	<field name="filename_full">.\grit/test/dot_git/objects/69/51fae70af8ff7ee84d7c3f9f0bdc99214451ed</field>
	<field name="filename">b1ef658dcf275374265786e3ef979e1ce7acad</field>
	<field name="filename_full">.\grit/test/dot_git/objects/69/b1ef658dcf275374265786e3ef979e1ce7acad</field>
	<field name="filename">d8022883cf48368b3559b6e8ce2ba460e620fa</field>
	<field name="filename_full">.\grit/test/dot_git/objects/69/d8022883cf48368b3559b6e8ce2ba460e620fa</field>
	<field name="filename">6a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6a</field>
	<field name="filename">0f0474e45585c06d7caac652d252483187d68e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6a/0f0474e45585c06d7caac652d252483187d68e</field>
	<field name="filename">17ba4e3597af94f36b95350d0cde8d1a580db8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6a/17ba4e3597af94f36b95350d0cde8d1a580db8</field>
	<field name="filename">20b5c1026c8229c32f870c92e8f1031da099e8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6a/20b5c1026c8229c32f870c92e8f1031da099e8</field>
	<field name="filename">4e6a2f37fc02e35ef674d98097c8661c37360c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6a/4e6a2f37fc02e35ef674d98097c8661c37360c</field>
	<field name="filename">a4e1aa5e7dbd47c73b28ed8ca30bcab93b4638</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6a/a4e1aa5e7dbd47c73b28ed8ca30bcab93b4638</field>
	<field name="filename">bc261d2e17d6200800890bf6db1e9bd0d9e764</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6a/bc261d2e17d6200800890bf6db1e9bd0d9e764</field>
	<field name="filename">6b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6b</field>
	<field name="filename">7b8ca7b28c4c62f8a25ccccb4d6ade9e46c2d7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6b/7b8ca7b28c4c62f8a25ccccb4d6ade9e46c2d7</field>
	<field name="filename">86465bf8bfad93a003413d0fe62af740f02f94</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6b/86465bf8bfad93a003413d0fe62af740f02f94</field>
	<field name="filename">8c15931c3bc81f0825cbfbeeca79c8a6c3fe82</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6b/8c15931c3bc81f0825cbfbeeca79c8a6c3fe82</field>
	<field name="filename">91775915c89f4141223d3ff5648281347276d1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6b/91775915c89f4141223d3ff5648281347276d1</field>
	<field name="filename">c9cacf63f0e9783c9222583b3f836a1fd14243</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6b/c9cacf63f0e9783c9222583b3f836a1fd14243</field>
	<field name="filename">6c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c</field>
	<field name="filename">023c8d73917e5c90651fb720269884befdb306</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c/023c8d73917e5c90651fb720269884befdb306</field>
	<field name="filename">1c2608eaf29388ff986d825f413aefacde71b6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c/1c2608eaf29388ff986d825f413aefacde71b6</field>
	<field name="filename">4b8c2fd3da22ef73e392683f926ae3b7494e57</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c/4b8c2fd3da22ef73e392683f926ae3b7494e57</field>
	<field name="filename">57ae690bc5271210392920898240c13f4e5634</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c/57ae690bc5271210392920898240c13f4e5634</field>
	<field name="filename">b49e0e6182741e6fd69d9cf9c162a1bd26be8c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c/b49e0e6182741e6fd69d9cf9c162a1bd26be8c</field>
	<field name="filename">b6584d6d4c398766ba42bd0a4f3cb620b62b95</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c/b6584d6d4c398766ba42bd0a4f3cb620b62b95</field>
	<field name="filename">d7d640a01480625cdf36af25696eea32a7a5ce</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c/d7d640a01480625cdf36af25696eea32a7a5ce</field>
	<field name="filename">e9e816cf0f060838d5f34ecf284ad2458f806f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6c/e9e816cf0f060838d5f34ecf284ad2458f806f</field>
	<field name="filename">6d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6d</field>
	<field name="filename">50eaf75755f91cd174bd97a6fb26574d42a972</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6d/50eaf75755f91cd174bd97a6fb26574d42a972</field>
	<field name="filename">7b878255abaea31a1bd43cfacd89727a40b334</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6d/7b878255abaea31a1bd43cfacd89727a40b334</field>
	<field name="filename">6e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6e</field>
	<field name="filename">770404d1e88f7b87a687bdba3e4063e1b84c43</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6e/770404d1e88f7b87a687bdba3e4063e1b84c43</field>
	<field name="filename">9dc33da171c918556c6474b9c1ff075a4b4667</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6e/9dc33da171c918556c6474b9c1ff075a4b4667</field>
	<field name="filename">af969270949b97cde160323221579ebf7d0ae6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6e/af969270949b97cde160323221579ebf7d0ae6</field>
	<field name="filename">ea8c4874e378d50b39180173efd8540a3dad17</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6e/ea8c4874e378d50b39180173efd8540a3dad17</field>
	<field name="filename">fe28fff834a94fbc20cac51fe9cd65ecc78d43</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6e/fe28fff834a94fbc20cac51fe9cd65ecc78d43</field>
	<field name="filename">6f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6f</field>
	<field name="filename">6906254fa5d16d54cd4511e79acc3ee79da96c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6f/6906254fa5d16d54cd4511e79acc3ee79da96c</field>
	<field name="filename">ba35bc25c85a6950fe9ad5c4713fee174dcd1e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/6f/ba35bc25c85a6950fe9ad5c4713fee174dcd1e</field>
	<field name="filename">70</field>
	<field name="filename_full">.\grit/test/dot_git/objects/70</field>
	<field name="filename">03498f1263cfdbc14d0ba3f5107959c4ccff7a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/70/03498f1263cfdbc14d0ba3f5107959c4ccff7a</field>
	<field name="filename">7d0fbd934e645980235d52112ce9ed8a8da14c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/70/7d0fbd934e645980235d52112ce9ed8a8da14c</field>
	<field name="filename">9df040a86df6a593c7f3247202fb9d2103914b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/70/9df040a86df6a593c7f3247202fb9d2103914b</field>
	<field name="filename">a5bb43f72b4a6075e0e2bf83e5abafee417d01</field>
	<field name="filename_full">.\grit/test/dot_git/objects/70/a5bb43f72b4a6075e0e2bf83e5abafee417d01</field>
	<field name="filename">71</field>
	<field name="filename_full">.\grit/test/dot_git/objects/71</field>
	<field name="filename">1cf6f726379a9c1a83eea1fae4ec3a10af28f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/71/1cf6f726379a9c1a83eea1fae4ec3a10af28f1</field>
	<field name="filename">8053589f8cff63551986b4961853f16903eda2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/71/8053589f8cff63551986b4961853f16903eda2</field>
	<field name="filename">a6696da9143512b4f2b6d7474d58835c9dea6d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/71/a6696da9143512b4f2b6d7474d58835c9dea6d</field>
	<field name="filename">b079961daac90fe8402177b87a08fa87a86ab7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/71/b079961daac90fe8402177b87a08fa87a86ab7</field>
	<field name="filename">be442fd1a2b656e262f5a50268e57f3d64ec68</field>
	<field name="filename_full">.\grit/test/dot_git/objects/71/be442fd1a2b656e262f5a50268e57f3d64ec68</field>
	<field name="filename">eb51ed930e26754304f1470cfde1d1675cf2be</field>
	<field name="filename_full">.\grit/test/dot_git/objects/71/eb51ed930e26754304f1470cfde1d1675cf2be</field>
	<field name="filename">72</field>
	<field name="filename_full">.\grit/test/dot_git/objects/72</field>
	<field name="filename">1cf10ace0fad67e9d7ef5024bbfdea99d54b6d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/72/1cf10ace0fad67e9d7ef5024bbfdea99d54b6d</field>
	<field name="filename">944ef1b06abd709ae708d6be3426937f248a32</field>
	<field name="filename_full">.\grit/test/dot_git/objects/72/944ef1b06abd709ae708d6be3426937f248a32</field>
	<field name="filename">c02e7e07d2284fe144183529f9b5ca45027a99</field>
	<field name="filename_full">.\grit/test/dot_git/objects/72/c02e7e07d2284fe144183529f9b5ca45027a99</field>
	<field name="filename">ec1f22a7b22aca941d9483e3b9fec79b46c8c2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/72/ec1f22a7b22aca941d9483e3b9fec79b46c8c2</field>
	<field name="filename">73</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73</field>
	<field name="filename">1501ae418cdc7babb9a86f3cb869daf11c28e8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/1501ae418cdc7babb9a86f3cb869daf11c28e8</field>
	<field name="filename">167b43c845d98eaa2040c701334f0c6f24a69c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/167b43c845d98eaa2040c701334f0c6f24a69c</field>
	<field name="filename">5942ed3013eb862658960cf891e4c7de0f511e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/5942ed3013eb862658960cf891e4c7de0f511e</field>
	<field name="filename">64a83cdea4b92b1604c498d9e82f1f16a80778</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/64a83cdea4b92b1604c498d9e82f1f16a80778</field>
	<field name="filename">6b8e522a9076b3622c0f45f54b4ae2b033ce8f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/6b8e522a9076b3622c0f45f54b4ae2b033ce8f</field>
	<field name="filename">84eef4cb81eca27a0e7996bf7305f77438ae9e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/84eef4cb81eca27a0e7996bf7305f77438ae9e</field>
	<field name="filename">d04ec8b76b7eb2cacdd6fdd5c34bd975ebb04e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/d04ec8b76b7eb2cacdd6fdd5c34bd975ebb04e</field>
	<field name="filename">e65a8a571f4319984cf694e45f37186f55fd0a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/e65a8a571f4319984cf694e45f37186f55fd0a</field>
	<field name="filename">f11a5cf43de10f70cbf9cc1dfd1f34fbf918e3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/73/f11a5cf43de10f70cbf9cc1dfd1f34fbf918e3</field>
	<field name="filename">74</field>
	<field name="filename_full">.\grit/test/dot_git/objects/74</field>
	<field name="filename">30b0ca149b99aad6bec0e5ffdab3f602648ceb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/74/30b0ca149b99aad6bec0e5ffdab3f602648ceb</field>
	<field name="filename">8a7d9c0d07f08f5ad23a0188cd017e2f1d9730</field>
	<field name="filename_full">.\grit/test/dot_git/objects/74/8a7d9c0d07f08f5ad23a0188cd017e2f1d9730</field>
	<field name="filename">e48401ad6085171109f933862cb87c98cf1132</field>
	<field name="filename_full">.\grit/test/dot_git/objects/74/e48401ad6085171109f933862cb87c98cf1132</field>
	<field name="filename">75</field>
	<field name="filename_full">.\grit/test/dot_git/objects/75</field>
	<field name="filename">20a2be3072026e93bafbcb83245de447c02211</field>
	<field name="filename_full">.\grit/test/dot_git/objects/75/20a2be3072026e93bafbcb83245de447c02211</field>
	<field name="filename">7a9ec68a0a196a196ac5b42c13a45de2a39e3b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/75/7a9ec68a0a196a196ac5b42c13a45de2a39e3b</field>
	<field name="filename">f3bbdeec9b0ce7b4dbf652348f7105099df310</field>
	<field name="filename_full">.\grit/test/dot_git/objects/75/f3bbdeec9b0ce7b4dbf652348f7105099df310</field>
	<field name="filename">76</field>
	<field name="filename_full">.\grit/test/dot_git/objects/76</field>
	<field name="filename">517e7150248161747a113dd311b5f2e5112b7e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/76/517e7150248161747a113dd311b5f2e5112b7e</field>
	<field name="filename">940ef6ba3d8d1048e6059d48417279b74e057f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/76/940ef6ba3d8d1048e6059d48417279b74e057f</field>
	<field name="filename">aa89f0b0bc7e92b92758b7e6520a8dfd086739</field>
	<field name="filename_full">.\grit/test/dot_git/objects/76/aa89f0b0bc7e92b92758b7e6520a8dfd086739</field>
	<field name="filename">ac881b1ec4cd0b8f3ed71bc90f915ac465042c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/76/ac881b1ec4cd0b8f3ed71bc90f915ac465042c</field>
	<field name="filename">b3f0be5ec5ff6c63e471f4dc696917d64de92d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/76/b3f0be5ec5ff6c63e471f4dc696917d64de92d</field>
	<field name="filename">d54fdb3b93105642dd779a429b81a32d4a4d07</field>
	<field name="filename_full">.\grit/test/dot_git/objects/76/d54fdb3b93105642dd779a429b81a32d4a4d07</field>
	<field name="filename">77</field>
	<field name="filename_full">.\grit/test/dot_git/objects/77</field>
	<field name="filename">aa887449c28a922a660b2bb749e4127f7664e5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/77/aa887449c28a922a660b2bb749e4127f7664e5</field>
	<field name="filename">edfa1c893d3e8d80881ff5eb56dc9d10fd944b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/77/edfa1c893d3e8d80881ff5eb56dc9d10fd944b</field>
	<field name="filename">78</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78</field>
	<field name="filename">06987ac105edba10fe27c9a9f415dab7c0f9b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/06987ac105edba10fe27c9a9f415dab7c0f9b8</field>
	<field name="filename">3367a2b50a733782aec243f1e8760effd62769</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/3367a2b50a733782aec243f1e8760effd62769</field>
	<field name="filename">38858f15204b6c4b0f076c47d0c825350a845f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/38858f15204b6c4b0f076c47d0c825350a845f</field>
	<field name="filename">447092f23b8719ca1d548075f46174d1f18269</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/447092f23b8719ca1d548075f46174d1f18269</field>
	<field name="filename">591e22e8e9fd665bf9bf955ecd7601bc10efc5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/591e22e8e9fd665bf9bf955ecd7601bc10efc5</field>
	<field name="filename">99ce846a293ff465fd391e790a8c7e6d896cbf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/99ce846a293ff465fd391e790a8c7e6d896cbf</field>
	<field name="filename">d03cddc9d41d27792e9c84ce3174ee141294c9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/d03cddc9d41d27792e9c84ce3174ee141294c9</field>
	<field name="filename">e0f291158261fcdb038e8cd7c09903b4c95729</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/e0f291158261fcdb038e8cd7c09903b4c95729</field>
	<field name="filename">e118de9e47c4652608412c27425c01764317b5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/78/e118de9e47c4652608412c27425c01764317b5</field>
	<field name="filename">79</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79</field>
	<field name="filename">0005c92fc8f75b3d194ae031bb89b041eecb04</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79/0005c92fc8f75b3d194ae031bb89b041eecb04</field>
	<field name="filename">0e7b517e808fb9ddbc67ac1e6b4c02bd4f302a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79/0e7b517e808fb9ddbc67ac1e6b4c02bd4f302a</field>
	<field name="filename">657d266b1abff32fb3177c9e383f670dc285c0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79/657d266b1abff32fb3177c9e383f670dc285c0</field>
	<field name="filename">6a9d3b5c3ad98586fa0e68f91ddb9d317600ab</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79/6a9d3b5c3ad98586fa0e68f91ddb9d317600ab</field>
	<field name="filename">8078f16e07ac653bd09edb381b77fd70aa434f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79/8078f16e07ac653bd09edb381b77fd70aa434f</field>
	<field name="filename">9bfeaa86d66c4e1638f9c777cd823329ce532e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79/9bfeaa86d66c4e1638f9c777cd823329ce532e</field>
	<field name="filename">b2b708e1b11d83d8d169bae09d8291698d5365</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79/b2b708e1b11d83d8d169bae09d8291698d5365</field>
	<field name="filename">d5f65d307915105523c1267ee2457c853f6d76</field>
	<field name="filename_full">.\grit/test/dot_git/objects/79/d5f65d307915105523c1267ee2457c853f6d76</field>
	<field name="filename">7a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7a</field>
	<field name="filename">087349e9f350ece8e7fa7715da5e84927e9705</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7a/087349e9f350ece8e7fa7715da5e84927e9705</field>
	<field name="filename">5e762fa8f7fa3e2302f1ad4c0710b6910812c1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7a/5e762fa8f7fa3e2302f1ad4c0710b6910812c1</field>
	<field name="filename">b4406c6679ad4d2a6d7abb029f46b35b1bd3ec</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7a/b4406c6679ad4d2a6d7abb029f46b35b1bd3ec</field>
	<field name="filename">e93eb82d94273605ea4ffa808223f3517751f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7a/e93eb82d94273605ea4ffa808223f3517751f1</field>
	<field name="filename">7b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7b</field>
	<field name="filename">0eb3a3b0d48710afc0fb2f7b95cf949c17db45</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7b/0eb3a3b0d48710afc0fb2f7b95cf949c17db45</field>
	<field name="filename">3c2f5c49cc882758b2dfebcda96f14bf04ba11</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7b/3c2f5c49cc882758b2dfebcda96f14bf04ba11</field>
	<field name="filename">95db1c259d8fca0aa9d641dfc85127b079c311</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7b/95db1c259d8fca0aa9d641dfc85127b079c311</field>
	<field name="filename">bf33d461c4840401abc9cb8b37287c7997e9cf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7b/bf33d461c4840401abc9cb8b37287c7997e9cf</field>
	<field name="filename">7c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7c</field>
	<field name="filename">04a6027ad8768258e2dbbb82b069fa1f061e6f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7c/04a6027ad8768258e2dbbb82b069fa1f061e6f</field>
	<field name="filename">7d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7d</field>
	<field name="filename">3a818a79464316e03c53b11b684e797e9d06ed</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7d/3a818a79464316e03c53b11b684e797e9d06ed</field>
	<field name="filename">bfba85b625779105f0d853f89522971346b3ef</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7d/bfba85b625779105f0d853f89522971346b3ef</field>
	<field name="filename">cfb401bdfd9817a0b3ca08ada41bf0c1080802</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7d/cfb401bdfd9817a0b3ca08ada41bf0c1080802</field>
	<field name="filename">7e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7e</field>
	<field name="filename">013cd6934d110979c95b17ad9b796264919b52</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7e/013cd6934d110979c95b17ad9b796264919b52</field>
	<field name="filename">1c4e68dcc2fb435310e397e1269e257f1db6b4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7e/1c4e68dcc2fb435310e397e1269e257f1db6b4</field>
	<field name="filename">3f8ceb97f84e983cbae9934eda025babbb393a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7e/3f8ceb97f84e983cbae9934eda025babbb393a</field>
	<field name="filename">4639a2cb181a6592f431d42db83cf640a563d1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7e/4639a2cb181a6592f431d42db83cf640a563d1</field>
	<field name="filename">8b4499db8aeeb2b1b285657113076d643b5f5d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7e/8b4499db8aeeb2b1b285657113076d643b5f5d</field>
	<field name="filename">7f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7f</field>
	<field name="filename">200467dab592a0a0f1e72777bb2404ef00d57e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7f/200467dab592a0a0f1e72777bb2404ef00d57e</field>
	<field name="filename">4a452ac9fc4b6751b454035df3f357c458b150</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7f/4a452ac9fc4b6751b454035df3f357c458b150</field>
	<field name="filename">8c688c758239f302451b0bc10679e547003b5e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7f/8c688c758239f302451b0bc10679e547003b5e</field>
	<field name="filename">d9cd76d00c54c434d003a49058592b6f0c10c1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7f/d9cd76d00c54c434d003a49058592b6f0c10c1</field>
	<field name="filename">e607b5531e290bd50f1f70ea236d0306a882a9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/7f/e607b5531e290bd50f1f70ea236d0306a882a9</field>
	<field name="filename">80</field>
	<field name="filename_full">.\grit/test/dot_git/objects/80</field>
	<field name="filename">056ae72df1345efa2dd3e216360ca326943fb9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/80/056ae72df1345efa2dd3e216360ca326943fb9</field>
	<field name="filename">8ac3c39d4453622e036118e256f502689d4067</field>
	<field name="filename_full">.\grit/test/dot_git/objects/80/8ac3c39d4453622e036118e256f502689d4067</field>
	<field name="filename">dd878d113eee55fd606afc60099d24ba50e670</field>
	<field name="filename_full">.\grit/test/dot_git/objects/80/dd878d113eee55fd606afc60099d24ba50e670</field>
	<field name="filename">81</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81</field>
	<field name="filename">17c407e1439f789727b5acdfa809c67bf29ddd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81/17c407e1439f789727b5acdfa809c67bf29ddd</field>
	<field name="filename">21bb4a8880254f69d3ce36b1e85de59f85d9bc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81/21bb4a8880254f69d3ce36b1e85de59f85d9bc</field>
	<field name="filename">28628b8e0eb3e167d58b1a393db319bc379fe9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81/28628b8e0eb3e167d58b1a393db319bc379fe9</field>
	<field name="filename">a18c36ebe04e406ab84ccc911d79e65e14d1c0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81/a18c36ebe04e406ab84ccc911d79e65e14d1c0</field>
	<field name="filename">b45795bd079c07ed01170a19069372bc6bb885</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81/b45795bd079c07ed01170a19069372bc6bb885</field>
	<field name="filename">c78b8d7ecacc9aea1ca93221f8b6cbef2ffde7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81/c78b8d7ecacc9aea1ca93221f8b6cbef2ffde7</field>
	<field name="filename">db1993b56df3c9e2511209eecc3339df0a416e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81/db1993b56df3c9e2511209eecc3339df0a416e</field>
	<field name="filename">f3aa336cc7f79b9765daf032f084059eb2b635</field>
	<field name="filename_full">.\grit/test/dot_git/objects/81/f3aa336cc7f79b9765daf032f084059eb2b635</field>
	<field name="filename">82</field>
	<field name="filename_full">.\grit/test/dot_git/objects/82</field>
	<field name="filename">0d6dbc4c5d6aa2ac39e9f6e18d334ea3cafa44</field>
	<field name="filename_full">.\grit/test/dot_git/objects/82/0d6dbc4c5d6aa2ac39e9f6e18d334ea3cafa44</field>
	<field name="filename">def912edf146e3f30dd02ec78c07356aefdfa5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/82/def912edf146e3f30dd02ec78c07356aefdfa5</field>
	<field name="filename">83</field>
	<field name="filename_full">.\grit/test/dot_git/objects/83</field>
	<field name="filename">1a6e4e570910039b5359a9cdb5e6b42ff4c423</field>
	<field name="filename_full">.\grit/test/dot_git/objects/83/1a6e4e570910039b5359a9cdb5e6b42ff4c423</field>
	<field name="filename">6dca6265fb655643b769aa1dd9d24de45713c4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/83/6dca6265fb655643b769aa1dd9d24de45713c4</field>
	<field name="filename">797cb2aabfcc30a94aba8ae9ba396b2a16c3a6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/83/797cb2aabfcc30a94aba8ae9ba396b2a16c3a6</field>
	<field name="filename">a11c45ea6d699f2a874701bc231495df320ef8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/83/a11c45ea6d699f2a874701bc231495df320ef8</field>
	<field name="filename">b2a44866c05489569466edd0b64fd64c35f3bf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/83/b2a44866c05489569466edd0b64fd64c35f3bf</field>
	<field name="filename">84</field>
	<field name="filename_full">.\grit/test/dot_git/objects/84</field>
	<field name="filename">8b08ba949f0d0f64d00a3318775e7f3becf164</field>
	<field name="filename_full">.\grit/test/dot_git/objects/84/8b08ba949f0d0f64d00a3318775e7f3becf164</field>
	<field name="filename">85</field>
	<field name="filename_full">.\grit/test/dot_git/objects/85</field>
	<field name="filename">12f2fa7f4b87784c64cb6615f1fbad7926abf2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/85/12f2fa7f4b87784c64cb6615f1fbad7926abf2</field>
	<field name="filename">1c599e01cab929963ee07bb8911477da3817bd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/85/1c599e01cab929963ee07bb8911477da3817bd</field>
	<field name="filename">4e76fadf16d5005f334dbaac7a951bf690c310</field>
	<field name="filename_full">.\grit/test/dot_git/objects/85/4e76fadf16d5005f334dbaac7a951bf690c310</field>
	<field name="filename">80c640aa9c03061a2607afd70a52d4a0fe21b3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/85/80c640aa9c03061a2607afd70a52d4a0fe21b3</field>
	<field name="filename">b40f2911319215ea768a7d599e267a465e2b85</field>
	<field name="filename_full">.\grit/test/dot_git/objects/85/b40f2911319215ea768a7d599e267a465e2b85</field>
	<field name="filename">bb8a9e19a9a179bd9f5c2056588e6e25274288</field>
	<field name="filename_full">.\grit/test/dot_git/objects/85/bb8a9e19a9a179bd9f5c2056588e6e25274288</field>
	<field name="filename">e5fdbc2cefd10f0aa7042e092bd5f4c8c823d3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/85/e5fdbc2cefd10f0aa7042e092bd5f4c8c823d3</field>
	<field name="filename">86</field>
	<field name="filename_full">.\grit/test/dot_git/objects/86</field>
	<field name="filename">165d83745d61a99aa3961957d191e038b2f5a6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/86/165d83745d61a99aa3961957d191e038b2f5a6</field>
	<field name="filename">1b019631332e20abcedcd44efb78b4bc245797</field>
	<field name="filename_full">.\grit/test/dot_git/objects/86/1b019631332e20abcedcd44efb78b4bc245797</field>
	<field name="filename">4a495e2f411c12a0a5df886d2a3bc0c36edf8b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/86/4a495e2f411c12a0a5df886d2a3bc0c36edf8b</field>
	<field name="filename">a7b47629e8ae1c822c8014a342d1d041609d8c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/86/a7b47629e8ae1c822c8014a342d1d041609d8c</field>
	<field name="filename">87</field>
	<field name="filename_full">.\grit/test/dot_git/objects/87</field>
	<field name="filename">26f79534faaea1e04860001c426e9ea4082a88</field>
	<field name="filename_full">.\grit/test/dot_git/objects/87/26f79534faaea1e04860001c426e9ea4082a88</field>
	<field name="filename">e2e8f0df7fdf8605ba86ecd97d8e7b5590893c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/87/e2e8f0df7fdf8605ba86ecd97d8e7b5590893c</field>
	<field name="filename">88</field>
	<field name="filename_full">.\grit/test/dot_git/objects/88</field>
	<field name="filename">33b49921fe5b49266199aa3eba316a80c9e61b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/88/33b49921fe5b49266199aa3eba316a80c9e61b</field>
	<field name="filename">a86c6983316e48805a13bbb54fa0f9c80248b2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/88/a86c6983316e48805a13bbb54fa0f9c80248b2</field>
	<field name="filename">89</field>
	<field name="filename_full">.\grit/test/dot_git/objects/89</field>
	<field name="filename">353c81b260c81a3340ce0a1b92da0d94d8f6de</field>
	<field name="filename_full">.\grit/test/dot_git/objects/89/353c81b260c81a3340ce0a1b92da0d94d8f6de</field>
	<field name="filename">6cdba0f0e33856711cb64067e30256894fe40c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/89/6cdba0f0e33856711cb64067e30256894fe40c</field>
	<field name="filename">d0fc07bb62c543b73721d9eb8e76375317777c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/89/d0fc07bb62c543b73721d9eb8e76375317777c</field>
	<field name="filename">e93573ff69db29a5a7d7f77319a743e8afa784</field>
	<field name="filename_full">.\grit/test/dot_git/objects/89/e93573ff69db29a5a7d7f77319a743e8afa784</field>
	<field name="filename">8a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8a</field>
	<field name="filename">0d30f5ec46a905b14597f5f1a50526339313f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8a/0d30f5ec46a905b14597f5f1a50526339313f1</field>
	<field name="filename">4e031f65e18814ff506beee5de5576aca31aeb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8a/4e031f65e18814ff506beee5de5576aca31aeb</field>
	<field name="filename">8a57d37adad012752dbba3c6e1063a374b66a6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8a/8a57d37adad012752dbba3c6e1063a374b66a6</field>
	<field name="filename">ac2492e118b62b049858e49286eda99b70424c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8a/ac2492e118b62b049858e49286eda99b70424c</field>
	<field name="filename">8b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8b</field>
	<field name="filename">039964bc11de4db51deada1676b0a8e7c80fbf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8b/039964bc11de4db51deada1676b0a8e7c80fbf</field>
	<field name="filename">3cdab3baad4295363739c4116a96d8321a67c7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8b/3cdab3baad4295363739c4116a96d8321a67c7</field>
	<field name="filename">8e7f353094009e7fc3b360ecc266081fa7e72d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8b/8e7f353094009e7fc3b360ecc266081fa7e72d</field>
	<field name="filename">a8d47b778c172e3fa94f59d715d3ccfec9eab8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8b/a8d47b778c172e3fa94f59d715d3ccfec9eab8</field>
	<field name="filename">e6f34ad98804d1d0d39d41d63a06d736050494</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8b/e6f34ad98804d1d0d39d41d63a06d736050494</field>
	<field name="filename">ea8baddf15affc95414c402dfff718790816ee</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8b/ea8baddf15affc95414c402dfff718790816ee</field>
	<field name="filename">8c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8c</field>
	<field name="filename">a7f29a74c0245e6d5ffe19047290e89c53c2e3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8c/a7f29a74c0245e6d5ffe19047290e89c53c2e3</field>
	<field name="filename">b1801bab79dbed4c457f7c56a4243b19a572a1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8c/b1801bab79dbed4c457f7c56a4243b19a572a1</field>
	<field name="filename">b23bbdc76c2644bcc177e96c648f49b04f2a62</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8c/b23bbdc76c2644bcc177e96c648f49b04f2a62</field>
	<field name="filename">be10141cdef6c19f769fe5feb9f97f218a751c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8c/be10141cdef6c19f769fe5feb9f97f218a751c</field>
	<field name="filename">cc9b07c5a8c07bb3170758dcd76bfd26631f05</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8c/cc9b07c5a8c07bb3170758dcd76bfd26631f05</field>
	<field name="filename">8d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8d</field>
	<field name="filename">2896b596358c8d3fe2bde06f71b74322e6c69f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8d/2896b596358c8d3fe2bde06f71b74322e6c69f</field>
	<field name="filename">86c5f852a8cde3e1500f0bc7e4b75fa16478bc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8d/86c5f852a8cde3e1500f0bc7e4b75fa16478bc</field>
	<field name="filename">94435b58a834245eb3e98204f6981949febda4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8d/94435b58a834245eb3e98204f6981949febda4</field>
	<field name="filename">9939f789c32f715831c70529faa0ed8bdaeaef</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8d/9939f789c32f715831c70529faa0ed8bdaeaef</field>
	<field name="filename">c2a6356dbcaa309b457d54ecc297fe9abe4cac</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8d/c2a6356dbcaa309b457d54ecc297fe9abe4cac</field>
	<field name="filename">e21b364f1831a676486d65deea2bfbe141962c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8d/e21b364f1831a676486d65deea2bfbe141962c</field>
	<field name="filename">fad1edfb99419586b830f19f9e96ce9d241c49</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8d/fad1edfb99419586b830f19f9e96ce9d241c49</field>
	<field name="filename">8e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8e</field>
	<field name="filename">f9baa02195f51e8d2322fb9304c8631acc126d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8e/f9baa02195f51e8d2322fb9304c8631acc126d</field>
	<field name="filename">8f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8f</field>
	<field name="filename">1becb8995005a7e1b22260e5d6d674249f094c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8f/1becb8995005a7e1b22260e5d6d674249f094c</field>
	<field name="filename">1d9f4bc14deac99f49eddae61ef2c3db7ab5c4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8f/1d9f4bc14deac99f49eddae61ef2c3db7ab5c4</field>
	<field name="filename">270405010cb4b04ee17d650e27bedf52ebc104</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8f/270405010cb4b04ee17d650e27bedf52ebc104</field>
	<field name="filename">33d0578b63742b37657963d10bdbc3a30ac874</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8f/33d0578b63742b37657963d10bdbc3a30ac874</field>
	<field name="filename">67e2313d82205d121e809ba1095930ded3e3c7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8f/67e2313d82205d121e809ba1095930ded3e3c7</field>
	<field name="filename">a525c77fec13ec6c2178840912c6c37b8c3cce</field>
	<field name="filename_full">.\grit/test/dot_git/objects/8f/a525c77fec13ec6c2178840912c6c37b8c3cce</field>
	<field name="filename">90</field>
	<field name="filename_full">.\grit/test/dot_git/objects/90</field>
	<field name="filename">00a6cdf5f075a5b745726b97a7b27f1e669c47</field>
	<field name="filename_full">.\grit/test/dot_git/objects/90/00a6cdf5f075a5b745726b97a7b27f1e669c47</field>
	<field name="filename">6fb7baecb35dff873248bae5084a74f59b4912</field>
	<field name="filename_full">.\grit/test/dot_git/objects/90/6fb7baecb35dff873248bae5084a74f59b4912</field>
	<field name="filename">87b71f5562c7c842fd3001419f5676f28385b4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/90/87b71f5562c7c842fd3001419f5676f28385b4</field>
	<field name="filename">91</field>
	<field name="filename_full">.\grit/test/dot_git/objects/91</field>
	<field name="filename">9f3cce611b8364e605830f3dbb059d36b223df</field>
	<field name="filename_full">.\grit/test/dot_git/objects/91/9f3cce611b8364e605830f3dbb059d36b223df</field>
	<field name="filename">a3a5989e366c3037fbd7e917c49a36dcfbf79e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/91/a3a5989e366c3037fbd7e917c49a36dcfbf79e</field>
	<field name="filename">92</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92</field>
	<field name="filename">06fce962ca848ff0d6c4a9bf28e92b4a694c87</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92/06fce962ca848ff0d6c4a9bf28e92b4a694c87</field>
	<field name="filename">10addf8611cebd99b28d8ecc01dd90006cf8e3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92/10addf8611cebd99b28d8ecc01dd90006cf8e3</field>
	<field name="filename">1f3eccb5f75c6b81f9044aedd151dd391eef10</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92/1f3eccb5f75c6b81f9044aedd151dd391eef10</field>
	<field name="filename">214a8582931848b8146baf317db76dee9cfac1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92/214a8582931848b8146baf317db76dee9cfac1</field>
	<field name="filename">4b409ce9b20af189cf2a6ce930be8d977d3d3b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92/4b409ce9b20af189cf2a6ce930be8d977d3d3b</field>
	<field name="filename">6bfd86bcaf51e3926756ffce7b877665a2e87f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92/6bfd86bcaf51e3926756ffce7b877665a2e87f</field>
	<field name="filename">d6e4952a99f3b26a0848f5d121f618d9a36c9e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92/d6e4952a99f3b26a0848f5d121f618d9a36c9e</field>
	<field name="filename">ffbe0beb74ed54fe13db418914b436f8b155b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/92/ffbe0beb74ed54fe13db418914b436f8b155b8</field>
	<field name="filename">93</field>
	<field name="filename_full">.\grit/test/dot_git/objects/93</field>
	<field name="filename">a8d9a44e349e3b8eb1138d58aed8574dd1e5eb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/93/a8d9a44e349e3b8eb1138d58aed8574dd1e5eb</field>
	<field name="filename">e09a95f21568d850e6dce849a3a637c9459c01</field>
	<field name="filename_full">.\grit/test/dot_git/objects/93/e09a95f21568d850e6dce849a3a637c9459c01</field>
	<field name="filename">94</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94</field>
	<field name="filename">2831545ab1b5a6c47998d5204e8fa4a13af252</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94/2831545ab1b5a6c47998d5204e8fa4a13af252</field>
	<field name="filename">319883d8329892c2a817a819b2208369000d09</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94/319883d8329892c2a817a819b2208369000d09</field>
	<field name="filename">9d05d450c007f882ca5bf52552966f40af5e96</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94/9d05d450c007f882ca5bf52552966f40af5e96</field>
	<field name="filename">b0a3aa0d0e1faea2587a2ea7f60d8b4720dc54</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94/b0a3aa0d0e1faea2587a2ea7f60d8b4720dc54</field>
	<field name="filename">c860430bed915b713e537a4b1a1327df976c1c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94/c860430bed915b713e537a4b1a1327df976c1c</field>
	<field name="filename">ccb02ffd3754e3db0024925d5c15fa1292aae1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94/ccb02ffd3754e3db0024925d5c15fa1292aae1</field>
	<field name="filename">f4167ce48b9a84a94dce037146cd1e6cccd1d1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94/f4167ce48b9a84a94dce037146cd1e6cccd1d1</field>
	<field name="filename">f6073254faf452d56d37160580fa2480b0e42b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/94/f6073254faf452d56d37160580fa2480b0e42b</field>
	<field name="filename">95</field>
	<field name="filename_full">.\grit/test/dot_git/objects/95</field>
	<field name="filename">49f8c5b4d118463f75816da93143d538be3f45</field>
	<field name="filename_full">.\grit/test/dot_git/objects/95/49f8c5b4d118463f75816da93143d538be3f45</field>
	<field name="filename">c29e184a0ec7c5fa0a2d4ecd105f17bec6218b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/95/c29e184a0ec7c5fa0a2d4ecd105f17bec6218b</field>
	<field name="filename">efe1bd08e0b7b1469b4773c14dc728d5068b7e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/95/efe1bd08e0b7b1469b4773c14dc728d5068b7e</field>
	<field name="filename">96</field>
	<field name="filename_full">.\grit/test/dot_git/objects/96</field>
	<field name="filename">39d45833816298a7e113f5e6bf048fb3fba7dd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/96/39d45833816298a7e113f5e6bf048fb3fba7dd</field>
	<field name="filename">3bce669afa5f95366b27bf12345f9c3a7e91f0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/96/3bce669afa5f95366b27bf12345f9c3a7e91f0</field>
	<field name="filename">738a9834afe2e2e8abee5b78a8b88ffa9fca0c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/96/738a9834afe2e2e8abee5b78a8b88ffa9fca0c</field>
	<field name="filename">97</field>
	<field name="filename_full">.\grit/test/dot_git/objects/97</field>
	<field name="filename">71f107d373b028c2b73e2e169218951f772028</field>
	<field name="filename_full">.\grit/test/dot_git/objects/97/71f107d373b028c2b73e2e169218951f772028</field>
	<field name="filename">bc5e8c3cff57c5ad09ee02a39e90a0de08109d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/97/bc5e8c3cff57c5ad09ee02a39e90a0de08109d</field>
	<field name="filename">ec7d3e32843a7a846c3b24332d812a05d28fff</field>
	<field name="filename_full">.\grit/test/dot_git/objects/97/ec7d3e32843a7a846c3b24332d812a05d28fff</field>
	<field name="filename">98</field>
	<field name="filename_full">.\grit/test/dot_git/objects/98</field>
	<field name="filename">1c454cda632d2c1729c5dd8ff72dbf33c2e819</field>
	<field name="filename_full">.\grit/test/dot_git/objects/98/1c454cda632d2c1729c5dd8ff72dbf33c2e819</field>
	<field name="filename">36cd7a87f3baa9c004d7ed277baef050b2ce3d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/98/36cd7a87f3baa9c004d7ed277baef050b2ce3d</field>
	<field name="filename">4ab69b9f09ba4087a503628badb3bfb001e417</field>
	<field name="filename_full">.\grit/test/dot_git/objects/98/4ab69b9f09ba4087a503628badb3bfb001e417</field>
	<field name="filename">b806b34a110411575eee9d45f949a72ac27c7a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/98/b806b34a110411575eee9d45f949a72ac27c7a</field>
	<field name="filename">eae78c5916391dc2553c50c60bb6360bc4a298</field>
	<field name="filename_full">.\grit/test/dot_git/objects/98/eae78c5916391dc2553c50c60bb6360bc4a298</field>
	<field name="filename">99</field>
	<field name="filename_full">.\grit/test/dot_git/objects/99</field>
	<field name="filename">6e0688dd70cbbf10bf760f392d8d52629a51c3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/99/6e0688dd70cbbf10bf760f392d8d52629a51c3</field>
	<field name="filename">d7785e7d61fe9f201fdd8d0443e390d77d2ab2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/99/d7785e7d61fe9f201fdd8d0443e390d77d2ab2</field>
	<field name="filename">9a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9a</field>
	<field name="filename">24db0198f7b9980743fb18ff030428bb4e0da8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9a/24db0198f7b9980743fb18ff030428bb4e0da8</field>
	<field name="filename">6864cba7ee98c5f4813ae96ca60385916b449b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9a/6864cba7ee98c5f4813ae96ca60385916b449b</field>
	<field name="filename">9060f4b2cf886595f6eb374d5de37755ae8cd0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9a/9060f4b2cf886595f6eb374d5de37755ae8cd0</field>
	<field name="filename">d1e4b62307d64b0e86ca3b178fedde4e078376</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9a/d1e4b62307d64b0e86ca3b178fedde4e078376</field>
	<field name="filename">9b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9b</field>
	<field name="filename">1ffc7e40c8e14632213cdaf588378e9ba8e90b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9b/1ffc7e40c8e14632213cdaf588378e9ba8e90b</field>
	<field name="filename">70d75286c8218b28f623a9b0801b0b952ffb8b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9b/70d75286c8218b28f623a9b0801b0b952ffb8b</field>
	<field name="filename">7786e50a3bc4bdfb9c85ac9ab526ee5030fc34</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9b/7786e50a3bc4bdfb9c85ac9ab526ee5030fc34</field>
	<field name="filename">a5af0916c41313afd8ab1ad808e9e810157f50</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9b/a5af0916c41313afd8ab1ad808e9e810157f50</field>
	<field name="filename">cba3f8ce0858c3a3d79d049995b3b7431cbe2c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9b/cba3f8ce0858c3a3d79d049995b3b7431cbe2c</field>
	<field name="filename">9c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9c</field>
	<field name="filename">08a48040fa6f5532bcc3a66a79a423a99e7f2a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9c/08a48040fa6f5532bcc3a66a79a423a99e7f2a</field>
	<field name="filename">0e612a10196a3ab25264a807d2501bcd520540</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9c/0e612a10196a3ab25264a807d2501bcd520540</field>
	<field name="filename">13d94648123c351a208389b375ef220832086c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9c/13d94648123c351a208389b375ef220832086c</field>
	<field name="filename">274162674c99d986363d19a31379b999666765</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9c/274162674c99d986363d19a31379b999666765</field>
	<field name="filename">5810283f7b71f0e6658f83fa3cea4c42add182</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9c/5810283f7b71f0e6658f83fa3cea4c42add182</field>
	<field name="filename">757047550f98256fe4c212d42a404ca75826ba</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9c/757047550f98256fe4c212d42a404ca75826ba</field>
	<field name="filename">a4d54b87ae030f69c6a1652b06458229163bff</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9c/a4d54b87ae030f69c6a1652b06458229163bff</field>
	<field name="filename">9d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9d</field>
	<field name="filename">4cb25621a8fd3751691b5320a63acc0cb71359</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9d/4cb25621a8fd3751691b5320a63acc0cb71359</field>
	<field name="filename">637db3c6cfa5434f11a71cee9da87c7b8fcfcc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9d/637db3c6cfa5434f11a71cee9da87c7b8fcfcc</field>
	<field name="filename">b04ec7ffa80fec3f65b02ee882a872e61fa363</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9d/b04ec7ffa80fec3f65b02ee882a872e61fa363</field>
	<field name="filename">bdbf17f96c75b31237c301b704a7b11036793d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9d/bdbf17f96c75b31237c301b704a7b11036793d</field>
	<field name="filename">ddf2d703b7acb646470caf3f9b320f8171a952</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9d/ddf2d703b7acb646470caf3f9b320f8171a952</field>
	<field name="filename">9e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9e</field>
	<field name="filename">0ac6b7a43e94f49694ff169d9e4f55700668c1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9e/0ac6b7a43e94f49694ff169d9e4f55700668c1</field>
	<field name="filename">5651973373448a7621f2b50a6c7719fc731717</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9e/5651973373448a7621f2b50a6c7719fc731717</field>
	<field name="filename">a045ac20cfcc8c99e5a096926516d940810219</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9e/a045ac20cfcc8c99e5a096926516d940810219</field>
	<field name="filename">cfabcf37cf5ca8f1d9e4be940d38a0ca374592</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9e/cfabcf37cf5ca8f1d9e4be940d38a0ca374592</field>
	<field name="filename">9f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9f</field>
	<field name="filename">17dfcb0f307446f1a9f5f4f265fd03f01e5337</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9f/17dfcb0f307446f1a9f5f4f265fd03f01e5337</field>
	<field name="filename">625cc941888266a5ace9ea0f7b6de8056648bb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9f/625cc941888266a5ace9ea0f7b6de8056648bb</field>
	<field name="filename">94c114fbd1a011d99783c2df5dc97db923fd27</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9f/94c114fbd1a011d99783c2df5dc97db923fd27</field>
	<field name="filename">9b08b0ed1e63325c5669c54b1666cf00231856</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9f/9b08b0ed1e63325c5669c54b1666cf00231856</field>
	<field name="filename">a2a086398a284a5ec686601a80f23a81d579f6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9f/a2a086398a284a5ec686601a80f23a81d579f6</field>
	<field name="filename">a6e958bf96ddee6b71a2905bdd4b13bb35bbc3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9f/a6e958bf96ddee6b71a2905bdd4b13bb35bbc3</field>
	<field name="filename">ace5ebf66d7a4990759a6b23d593b27c560371</field>
	<field name="filename_full">.\grit/test/dot_git/objects/9f/ace5ebf66d7a4990759a6b23d593b27c560371</field>
	<field name="filename">a0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a0</field>
	<field name="filename">1626c862e48de9548a21ee3877c96266a9f247</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a0/1626c862e48de9548a21ee3877c96266a9f247</field>
	<field name="filename">292a1e42c64c9738088223f119740f9bcf25a4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a0/292a1e42c64c9738088223f119740f9bcf25a4</field>
	<field name="filename">2fea10783145b59d53157dfa950e1624506160</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a0/2fea10783145b59d53157dfa950e1624506160</field>
	<field name="filename">7705679876a805028101587259fd8f496e8c07</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a0/7705679876a805028101587259fd8f496e8c07</field>
	<field name="filename">89b4d1cc2b3887c816f5ba51ce48d90ea53e4a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a0/89b4d1cc2b3887c816f5ba51ce48d90ea53e4a</field>
	<field name="filename">931153ab2b7eadad5cccf57e8cfe67051a902a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a0/931153ab2b7eadad5cccf57e8cfe67051a902a</field>
	<field name="filename">94901cc0f4e3f9c311214bc2f9a1e0cf9a0c18</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a0/94901cc0f4e3f9c311214bc2f9a1e0cf9a0c18</field>
	<field name="filename">a1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a1</field>
	<field name="filename">31034466bff753545671326d45a76592e59f86</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a1/31034466bff753545671326d45a76592e59f86</field>
	<field name="filename">3905543ce8634d5206f155d887818c261a34ca</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a1/3905543ce8634d5206f155d887818c261a34ca</field>
	<field name="filename">5c431db0bd54892a5b5965a68c4f313174a415</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a1/5c431db0bd54892a5b5965a68c4f313174a415</field>
	<field name="filename">65317959fbd09503f7cc9c0cf917a2bf74d426</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a1/65317959fbd09503f7cc9c0cf917a2bf74d426</field>
	<field name="filename">a2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a2</field>
	<field name="filename">83d38a51ccde7f05bf3b2cdbb374d3e794e3e4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a2/83d38a51ccde7f05bf3b2cdbb374d3e794e3e4</field>
	<field name="filename">a52fd45454e98d600a73080db9be8da494fd05</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a2/a52fd45454e98d600a73080db9be8da494fd05</field>
	<field name="filename">d4e7e0f4d030940b4a62cf905c7f18c9f3ed08</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a2/d4e7e0f4d030940b4a62cf905c7f18c9f3ed08</field>
	<field name="filename">e10f1f8af34131fa4e48a41d0331684ca13a80</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a2/e10f1f8af34131fa4e48a41d0331684ca13a80</field>
	<field name="filename">f5e090e38fba14a1d0f776716ddc761952863d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a2/f5e090e38fba14a1d0f776716ddc761952863d</field>
	<field name="filename">a3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a3</field>
	<field name="filename">5cd0e0eff6610786f61c335565d72d9fa3ae69</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a3/5cd0e0eff6610786f61c335565d72d9fa3ae69</field>
	<field name="filename">961f321293662cee00c6b53f0fcfa1b91275cf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a3/961f321293662cee00c6b53f0fcfa1b91275cf</field>
	<field name="filename">ed9657784be802136449dfd07e5a9586c7826f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a3/ed9657784be802136449dfd07e5a9586c7826f</field>
	<field name="filename">a4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a4</field>
	<field name="filename">89242712c5cb4eddb40a7969e8e9c12db7b594</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a4/89242712c5cb4eddb40a7969e8e9c12db7b594</field>
	<field name="filename">8bbf51254111dea6d206b753781fbef82f8f63</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a4/8bbf51254111dea6d206b753781fbef82f8f63</field>
	<field name="filename">8dbab8aaf71f35784363f7bd5fe0bbdc91219a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a4/8dbab8aaf71f35784363f7bd5fe0bbdc91219a</field>
	<field name="filename">949eb5bfc411c724532a24a2070e16fafbdbf8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a4/949eb5bfc411c724532a24a2070e16fafbdbf8</field>
	<field name="filename">a5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a5</field>
	<field name="filename">0da2e9910b2748aafc830288ff86192291e594</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a5/0da2e9910b2748aafc830288ff86192291e594</field>
	<field name="filename">3312cdadae43ef320f56980491d2db43649ccc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a5/3312cdadae43ef320f56980491d2db43649ccc</field>
	<field name="filename">7dfa71d8353c05d3c96880fc4c1c2a18168a0a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a5/7dfa71d8353c05d3c96880fc4c1c2a18168a0a</field>
	<field name="filename">825bc61ad69802743867bafa342c5922fe23bc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a5/825bc61ad69802743867bafa342c5922fe23bc</field>
	<field name="filename">9c6325fc1e9e00808f2f077f2ba382c8e71140</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a5/9c6325fc1e9e00808f2f077f2ba382c8e71140</field>
	<field name="filename">a096c8f88729e302bc0dcfcde69bd1d6cee54b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a5/a096c8f88729e302bc0dcfcde69bd1d6cee54b</field>
	<field name="filename">a6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6</field>
	<field name="filename">25a89a89cfe2916a812c0a19bbf7c88d2bc6c5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6/25a89a89cfe2916a812c0a19bbf7c88d2bc6c5</field>
	<field name="filename">5cf40f373fb2652f724aa1fe552cfb1cac8f9c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6/5cf40f373fb2652f724aa1fe552cfb1cac8f9c</field>
	<field name="filename">61101de591928518b26e5cf19f976173af84b1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6/61101de591928518b26e5cf19f976173af84b1</field>
	<field name="filename">79381688bf42ef8c52ff13d7ad10fd357b716b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6/79381688bf42ef8c52ff13d7ad10fd357b716b</field>
	<field name="filename">7dc709250bd465ac07b180985de98f5eb176b5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6/7dc709250bd465ac07b180985de98f5eb176b5</field>
	<field name="filename">8e7f06b20e91283fa2729f9f442dee40816d5e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6/8e7f06b20e91283fa2729f9f442dee40816d5e</field>
	<field name="filename">b63376a6c6208c700d28f4152f06561a8591f5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6/b63376a6c6208c700d28f4152f06561a8591f5</field>
	<field name="filename">cc9707d22121121c4c436961f25ad3136c7a2d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a6/cc9707d22121121c4c436961f25ad3136c7a2d</field>
	<field name="filename">a7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a7</field>
	<field name="filename">56e607bf1b1f234346348f600ee9216a5687f6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a7/56e607bf1b1f234346348f600ee9216a5687f6</field>
	<field name="filename">b17990b0ddd4909d8a765c5ddbe50e9cb135ca</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a7/b17990b0ddd4909d8a765c5ddbe50e9cb135ca</field>
	<field name="filename">f6425fdc0d6eab1f94942603f9101a9eb010f3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a7/f6425fdc0d6eab1f94942603f9101a9eb010f3</field>
	<field name="filename">a8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a8</field>
	<field name="filename">26a873283fed2746f1f9f934f71db6d9a5e040</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a8/26a873283fed2746f1f9f934f71db6d9a5e040</field>
	<field name="filename">2dc65e43b5f13287fe61d9c0d535319e10d1fb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a8/2dc65e43b5f13287fe61d9c0d535319e10d1fb</field>
	<field name="filename">92c736936baf76e90a8400e13180846943dd65</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a8/92c736936baf76e90a8400e13180846943dd65</field>
	<field name="filename">a74a93cf26ee794cebc9f1440c56882b0124e7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a8/a74a93cf26ee794cebc9f1440c56882b0124e7</field>
	<field name="filename">b7e0fbece9a52e5539e4ab8f80e14504344410</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a8/b7e0fbece9a52e5539e4ab8f80e14504344410</field>
	<field name="filename">f3b83e0ed58f5a7c58fd673eeca588942bcde5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a8/f3b83e0ed58f5a7c58fd673eeca588942bcde5</field>
	<field name="filename">a9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a9</field>
	<field name="filename">35f4bb2d641436ab22510afdb2ddf59f953521</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a9/35f4bb2d641436ab22510afdb2ddf59f953521</field>
	<field name="filename">a1da34ff670558c1aa7d3c6e285cc5fb9b76db</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a9/a1da34ff670558c1aa7d3c6e285cc5fb9b76db</field>
	<field name="filename">b871f8f8bee8e9236b0e47333a0fce672b1445</field>
	<field name="filename_full">.\grit/test/dot_git/objects/a9/b871f8f8bee8e9236b0e47333a0fce672b1445</field>
	<field name="filename">aa</field>
	<field name="filename_full">.\grit/test/dot_git/objects/aa</field>
	<field name="filename">74200714ce8190b38211795f974b4410f5a9d0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/aa/74200714ce8190b38211795f974b4410f5a9d0</field>
	<field name="filename">957bcdd3c48f838e0e613c3066ce09399423dc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/aa/957bcdd3c48f838e0e613c3066ce09399423dc</field>
	<field name="filename">ca7266c757878ce0f80a5edd9651afc32624c5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/aa/ca7266c757878ce0f80a5edd9651afc32624c5</field>
	<field name="filename">ab</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ab</field>
	<field name="filename">a5708519a06e49c3801a27e54e710f30fb13d4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ab/a5708519a06e49c3801a27e54e710f30fb13d4</field>
	<field name="filename">c19c8c3819bbaa4964ca4f7fafc32d97834920</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ab/c19c8c3819bbaa4964ca4f7fafc32d97834920</field>
	<field name="filename">ac</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ac</field>
	<field name="filename">44d394114272dc8ced750155b89a4ea7feec8e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ac/44d394114272dc8ced750155b89a4ea7feec8e</field>
	<field name="filename">9ba205c42662c60238be9f5997d10c2df68d05</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ac/9ba205c42662c60238be9f5997d10c2df68d05</field>
	<field name="filename">e84f11ee83b490c7b0421c3815da52172e6106</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ac/e84f11ee83b490c7b0421c3815da52172e6106</field>
	<field name="filename">f6144115985ce9f37dbe5f56f4f5d96875b518</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ac/f6144115985ce9f37dbe5f56f4f5d96875b518</field>
	<field name="filename">ad</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ad</field>
	<field name="filename">065db654ef09714c6463e2f13e6e936ca8a4b1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ad/065db654ef09714c6463e2f13e6e936ca8a4b1</field>
	<field name="filename">ac6394aaa5f63348d12c6d7c556cc5895bdb5e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ad/ac6394aaa5f63348d12c6d7c556cc5895bdb5e</field>
	<field name="filename">be3ad1cfaed6ae867ff4c780e57b24aba92bb6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ad/be3ad1cfaed6ae867ff4c780e57b24aba92bb6</field>
	<field name="filename">ae</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ae</field>
	<field name="filename">45e5b88fcd45b55efa1e8a1f60e6525897430f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ae/45e5b88fcd45b55efa1e8a1f60e6525897430f</field>
	<field name="filename">51c7beb1d82b967d1ec70d43dc2546880e902c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ae/51c7beb1d82b967d1ec70d43dc2546880e902c</field>
	<field name="filename">88cc08586ab2baad34a00de9aed2be4e8ec297</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ae/88cc08586ab2baad34a00de9aed2be4e8ec297</field>
	<field name="filename">aa7324c31d374eac09744a5e1cf3eb5c11b1ef</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ae/aa7324c31d374eac09744a5e1cf3eb5c11b1ef</field>
	<field name="filename">af</field>
	<field name="filename_full">.\grit/test/dot_git/objects/af</field>
	<field name="filename">37cb1d947f50b5a9c4ea7c68dcfeb67ad66f8a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/af/37cb1d947f50b5a9c4ea7c68dcfeb67ad66f8a</field>
	<field name="filename">4976e0ea1364d59c64bfcf0482d50e0e238d16</field>
	<field name="filename_full">.\grit/test/dot_git/objects/af/4976e0ea1364d59c64bfcf0482d50e0e238d16</field>
	<field name="filename">6752006c8dfaea112143bd2692f439719162b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/af/6752006c8dfaea112143bd2692f439719162b8</field>
	<field name="filename">a1dfabcd436cf7af4deaf13e00180ef5368940</field>
	<field name="filename_full">.\grit/test/dot_git/objects/af/a1dfabcd436cf7af4deaf13e00180ef5368940</field>
	<field name="filename">ae8e12352682bf9d015dce28e338a451c5f55e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/af/ae8e12352682bf9d015dce28e338a451c5f55e</field>
	<field name="filename">d4d958e849a246bd3413f2cc02e7910f19f058</field>
	<field name="filename_full">.\grit/test/dot_git/objects/af/d4d958e849a246bd3413f2cc02e7910f19f058</field>
	<field name="filename">b0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b0</field>
	<field name="filename">1401ffc98de4b600588fcfcd09a3961d162c69</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b0/1401ffc98de4b600588fcfcd09a3961d162c69</field>
	<field name="filename">3531d097981c72b9c99aca10eca9c50a70d466</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b0/3531d097981c72b9c99aca10eca9c50a70d466</field>
	<field name="filename">c2e6b2e88b854dab551433cb113e3daf4c4e3e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b0/c2e6b2e88b854dab551433cb113e3daf4c4e3e</field>
	<field name="filename">fb915abf0e5be77c6c2400cffbbfd9c3bdcd00</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b0/fb915abf0e5be77c6c2400cffbbfd9c3bdcd00</field>
	<field name="filename">b1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b1</field>
	<field name="filename">35bf729745de0027719d613c8adef1007eaf6e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b1/35bf729745de0027719d613c8adef1007eaf6e</field>
	<field name="filename">c0001ea8e43861235f34cd4d21853ca458158e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b1/c0001ea8e43861235f34cd4d21853ca458158e</field>
	<field name="filename">fc231270ad6b6edc230aa22b4c10267198b9e6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b1/fc231270ad6b6edc230aa22b4c10267198b9e6</field>
	<field name="filename">b2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b2</field>
	<field name="filename">1d54ab7d3ec8d8a3c91c997ed9538777e46188</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b2/1d54ab7d3ec8d8a3c91c997ed9538777e46188</field>
	<field name="filename">1f05a2f9d51a8ef2c143fb7b8282fc53be06dd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b2/1f05a2f9d51a8ef2c143fb7b8282fc53be06dd</field>
	<field name="filename">226c9a893eb2e71e0ff33742968479cd50b131</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b2/226c9a893eb2e71e0ff33742968479cd50b131</field>
	<field name="filename">5dce6bbfa5e52108459b9a89b16def6963aec0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b2/5dce6bbfa5e52108459b9a89b16def6963aec0</field>
	<field name="filename">c2a902e25e522df67b8577b8bb8ddf9aa25098</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b2/c2a902e25e522df67b8577b8bb8ddf9aa25098</field>
	<field name="filename">b3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b3</field>
	<field name="filename">6d57789486dabe2309bd7819f7793ef2e7487c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b3/6d57789486dabe2309bd7819f7793ef2e7487c</field>
	<field name="filename">d79746ef32b978c65e1654d7ccddb89baa216d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b3/d79746ef32b978c65e1654d7ccddb89baa216d</field>
	<field name="filename">b4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b4</field>
	<field name="filename">07761d8d0840acc0c147dce23dcf7b741e3238</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b4/07761d8d0840acc0c147dce23dcf7b741e3238</field>
	<field name="filename">1467a894bdbe6be958a5de6984dd9c6dcb176b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b4/1467a894bdbe6be958a5de6984dd9c6dcb176b</field>
	<field name="filename">3d94c5a8e399fff7661187411c2f3702898160</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b4/3d94c5a8e399fff7661187411c2f3702898160</field>
	<field name="filename">f07cbe632b5fb7ffe7c25e2a2ed215268ef15f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b4/f07cbe632b5fb7ffe7c25e2a2ed215268ef15f</field>
	<field name="filename">f32e4ada1229dbc85db12ed3f93d15056252ec</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b4/f32e4ada1229dbc85db12ed3f93d15056252ec</field>
	<field name="filename">fd01bf7d2194b58ffc3a8e703bcdef5b3046bc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b4/fd01bf7d2194b58ffc3a8e703bcdef5b3046bc</field>
	<field name="filename">b5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b5</field>
	<field name="filename">297f606fed8450572f35e6e34df7c81d2840e5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b5/297f606fed8450572f35e6e34df7c81d2840e5</field>
	<field name="filename">9047a78a3d6a92deac583900b77af84d0ada54</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b5/9047a78a3d6a92deac583900b77af84d0ada54</field>
	<field name="filename">b60fcbee8f46d6b1efa206e139255ae33b81cc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b5/b60fcbee8f46d6b1efa206e139255ae33b81cc</field>
	<field name="filename">e9a82adb2f8bfe4b02ee14b46c32eeb453d53a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b5/e9a82adb2f8bfe4b02ee14b46c32eeb453d53a</field>
	<field name="filename">fe7fc1265ffab1b6441b88055a7638688ba013</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b5/fe7fc1265ffab1b6441b88055a7638688ba013</field>
	<field name="filename">b6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b6</field>
	<field name="filename">33e336e94e1090bd7e19773972b1bf177d18bb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b6/33e336e94e1090bd7e19773972b1bf177d18bb</field>
	<field name="filename">9a6fedabd2d05896b06986e7ac8f69f6d32903</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b6/9a6fedabd2d05896b06986e7ac8f69f6d32903</field>
	<field name="filename">e387967dd4d8cc2a590dae48327dd7b1225992</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b6/e387967dd4d8cc2a590dae48327dd7b1225992</field>
	<field name="filename">b7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b7</field>
	<field name="filename">0c8fd36430fb1e0b02119d7f802c2144fa2a41</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b7/0c8fd36430fb1e0b02119d7f802c2144fa2a41</field>
	<field name="filename">2772427161ca37e13344c1a9573dfdde28a881</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b7/2772427161ca37e13344c1a9573dfdde28a881</field>
	<field name="filename">6a1914a9461f6e66a4fc5a32b890f38b3dbe89</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b7/6a1914a9461f6e66a4fc5a32b890f38b3dbe89</field>
	<field name="filename">90eae3127d5f3c9d501885ae9e17f342b25298</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b7/90eae3127d5f3c9d501885ae9e17f342b25298</field>
	<field name="filename">f932bd02b3e0a4228ee7b55832749028d345de</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b7/f932bd02b3e0a4228ee7b55832749028d345de</field>
	<field name="filename">b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b8</field>
	<field name="filename">2e9938dbcadfcb79efff23a12763d6ec48f19d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b8/2e9938dbcadfcb79efff23a12763d6ec48f19d</field>
	<field name="filename">46d2f4cb2a5adfb0c4f46e73f53a074e76c2f6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b8/46d2f4cb2a5adfb0c4f46e73f53a074e76c2f6</field>
	<field name="filename">562d355858f20a0043c4b8adf03d7ad64b71e6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b8/562d355858f20a0043c4b8adf03d7ad64b71e6</field>
	<field name="filename">a5e1b3d5334ec5484f1299b77526b187a94c25</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b8/a5e1b3d5334ec5484f1299b77526b187a94c25</field>
	<field name="filename">a73a8761cd544a512ec2d4461953db8ce95bd2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b8/a73a8761cd544a512ec2d4461953db8ce95bd2</field>
	<field name="filename">b9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b9</field>
	<field name="filename">04b1fddfc7870be76bb238721ce91ee589856a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b9/04b1fddfc7870be76bb238721ce91ee589856a</field>
	<field name="filename">695b896e6e9cb7944d01b7161c394f558618b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b9/695b896e6e9cb7944d01b7161c394f558618b8</field>
	<field name="filename">751e8e983d7cf18c3a165a82158a7ad242cbcb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b9/751e8e983d7cf18c3a165a82158a7ad242cbcb</field>
	<field name="filename">79812846dd07c8f72f80075e482764f84e6da2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b9/79812846dd07c8f72f80075e482764f84e6da2</field>
	<field name="filename">82edbe57b1cb1a9cbe7c5866406978172b994c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b9/82edbe57b1cb1a9cbe7c5866406978172b994c</field>
	<field name="filename">e18f001d183fcf54debaf1b2995d31a2f60de8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b9/e18f001d183fcf54debaf1b2995d31a2f60de8</field>
	<field name="filename">fe6cfc99544168ab86a9e5326d2278651204c9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/b9/fe6cfc99544168ab86a9e5326d2278651204c9</field>
	<field name="filename">ba</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ba</field>
	<field name="filename">017639ed43f1604c4bdc3f06cafce7b6678d4a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ba/017639ed43f1604c4bdc3f06cafce7b6678d4a</field>
	<field name="filename">3f83d47153b9bc59a4051c30c1dd037a6eeedd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ba/3f83d47153b9bc59a4051c30c1dd037a6eeedd</field>
	<field name="filename">8e143dc8770a08a289c15e575adc55c5a4bb54</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ba/8e143dc8770a08a289c15e575adc55c5a4bb54</field>
	<field name="filename">bdcc3cacd23b79d9fc2bdf3c0b4fc18fb539a5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ba/bdcc3cacd23b79d9fc2bdf3c0b4fc18fb539a5</field>
	<field name="filename">c7b8660ab69c5728f49b9e63751ad1d86ef5d3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ba/c7b8660ab69c5728f49b9e63751ad1d86ef5d3</field>
	<field name="filename">bb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bb</field>
	<field name="filename">332bf8f4417e45a74d87c762665d27562d4e95</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bb/332bf8f4417e45a74d87c762665d27562d4e95</field>
	<field name="filename">9eeafff7d803955a2f4984b2334f43143eede9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bb/9eeafff7d803955a2f4984b2334f43143eede9</field>
	<field name="filename">d2a60494d609583a1117447158a329e1629022</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bb/d2a60494d609583a1117447158a329e1629022</field>
	<field name="filename">bc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bc</field>
	<field name="filename">ba8937bbe9b916c050151ab09d43fa735de698</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bc/ba8937bbe9b916c050151ab09d43fa735de698</field>
	<field name="filename">bd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bd</field>
	<field name="filename">0ff2ff68bff3d9c961ac3c549e888204d51ceb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bd/0ff2ff68bff3d9c961ac3c549e888204d51ceb</field>
	<field name="filename">1d7e6252aaa69a1a67688101117881c20c6ce2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bd/1d7e6252aaa69a1a67688101117881c20c6ce2</field>
	<field name="filename">451870911b60ed681e43d21a079858da8263bd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bd/451870911b60ed681e43d21a079858da8263bd</field>
	<field name="filename">4bd34e5de499f1c7cfeb5c7355ea9074d7c3d2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bd/4bd34e5de499f1c7cfeb5c7355ea9074d7c3d2</field>
	<field name="filename">5ae9aa537db33ac612a1eb89ea18f3a0f6a6eb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bd/5ae9aa537db33ac612a1eb89ea18f3a0f6a6eb</field>
	<field name="filename">76610f714db7ccae84d520a1b354a404f7d860</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bd/76610f714db7ccae84d520a1b354a404f7d860</field>
	<field name="filename">d8251cf5343dafc1ab05b6a939de869802a157</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bd/d8251cf5343dafc1ab05b6a939de869802a157</field>
	<field name="filename">be</field>
	<field name="filename_full">.\grit/test/dot_git/objects/be</field>
	<field name="filename">0ff545481a8562aa83969dea21653fc932f809</field>
	<field name="filename_full">.\grit/test/dot_git/objects/be/0ff545481a8562aa83969dea21653fc932f809</field>
	<field name="filename">1f6f33eed717448edf483296f6c2aa558fb937</field>
	<field name="filename_full">.\grit/test/dot_git/objects/be/1f6f33eed717448edf483296f6c2aa558fb937</field>
	<field name="filename">8cb297061306048ddd8c190161745ee928e49e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/be/8cb297061306048ddd8c190161745ee928e49e</field>
	<field name="filename">96f23efa55a1c4cdcd2da6735566571ef94302</field>
	<field name="filename_full">.\grit/test/dot_git/objects/be/96f23efa55a1c4cdcd2da6735566571ef94302</field>
	<field name="filename">df2c64a1d0b97f039e8bc0d80722f020adfb70</field>
	<field name="filename_full">.\grit/test/dot_git/objects/be/df2c64a1d0b97f039e8bc0d80722f020adfb70</field>
	<field name="filename">bf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bf</field>
	<field name="filename">1f2fa6fd19e57dde89b415269effcd3ac68540</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bf/1f2fa6fd19e57dde89b415269effcd3ac68540</field>
	<field name="filename">2c69e3ff4f9c3abc2c8711a4d9b94fad30e9f0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bf/2c69e3ff4f9c3abc2c8711a4d9b94fad30e9f0</field>
	<field name="filename">83cc523b783450eb66980b493d415097aeea79</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bf/83cc523b783450eb66980b493d415097aeea79</field>
	<field name="filename">d2fc2cdbf316abd7da4ef8d8d8b4536613eeb0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/bf/d2fc2cdbf316abd7da4ef8d8d8b4536613eeb0</field>
	<field name="filename">c0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0</field>
	<field name="filename">090cbbfd98cfdbcbe152dd50bfc71e243e8e74</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0/090cbbfd98cfdbcbe152dd50bfc71e243e8e74</field>
	<field name="filename">489424bfdca21656c06c22b37165a8e72ab8f3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0/489424bfdca21656c06c22b37165a8e72ab8f3</field>
	<field name="filename">529776901fd212c4534feca9ddf0af66962bbc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0/529776901fd212c4534feca9ddf0af66962bbc</field>
	<field name="filename">7b369a37b99a56c3d73682e076d610cc66f9ea</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0/7b369a37b99a56c3d73682e076d610cc66f9ea</field>
	<field name="filename">7e0a3d15fac47b3a4b1628b959a16577ff3388</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0/7e0a3d15fac47b3a4b1628b959a16577ff3388</field>
	<field name="filename">85faa2f50c6d1e7dba1494be5589adadf67c1b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0/85faa2f50c6d1e7dba1494be5589adadf67c1b</field>
	<field name="filename">a0771d3e3ca04f47b010867ac7a4a42408da0d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0/a0771d3e3ca04f47b010867ac7a4a42408da0d</field>
	<field name="filename">bff5fee2b3e7ced9f6db56394af1aad1ea7ed8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c0/bff5fee2b3e7ced9f6db56394af1aad1ea7ed8</field>
	<field name="filename">c1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c1</field>
	<field name="filename">4f6e2efdd2993b0bb6b3f247eb50310762bbfb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c1/4f6e2efdd2993b0bb6b3f247eb50310762bbfb</field>
	<field name="filename">c96e82e7c4ceed6a5e2d54f1e471eb914d1b02</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c1/c96e82e7c4ceed6a5e2d54f1e471eb914d1b02</field>
	<field name="filename">ccd31fd431573003f6492034e888f7d9f0b9b8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c1/ccd31fd431573003f6492034e888f7d9f0b9b8</field>
	<field name="filename">f6b5ee610aeb6ac999ad6dfba1252f17d06d76</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c1/f6b5ee610aeb6ac999ad6dfba1252f17d06d76</field>
	<field name="filename">c2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c2</field>
	<field name="filename">85fb81c97b0ad4b5e31d6c88f7d2de1a999bf6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c2/85fb81c97b0ad4b5e31d6c88f7d2de1a999bf6</field>
	<field name="filename">c11d80b63f7583f569ccedf8956daf4dcd7738</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c2/c11d80b63f7583f569ccedf8956daf4dcd7738</field>
	<field name="filename">c80f4043230f63b99f68ba1b31cd3af0e6151a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c2/c80f4043230f63b99f68ba1b31cd3af0e6151a</field>
	<field name="filename">dcc243dd5586cdefe67c1a47922f2b33515e84</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c2/dcc243dd5586cdefe67c1a47922f2b33515e84</field>
	<field name="filename">c3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c3</field>
	<field name="filename">0c8c756c092cc3c5260805b630973786a0c740</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c3/0c8c756c092cc3c5260805b630973786a0c740</field>
	<field name="filename">465a138d3eb08fd7f3ddf6682e1ff5afee196d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c3/465a138d3eb08fd7f3ddf6682e1ff5afee196d</field>
	<field name="filename">927974367ccc76ff45e65f64691f866843eda9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c3/927974367ccc76ff45e65f64691f866843eda9</field>
	<field name="filename">d90063e61a4f18f0c67f40875c3fbef7679c37</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c3/d90063e61a4f18f0c67f40875c3fbef7679c37</field>
	<field name="filename">c4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c4</field>
	<field name="filename">346031a7f6dd0445b2bb6c8ecfb4b210f71c02</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c4/346031a7f6dd0445b2bb6c8ecfb4b210f71c02</field>
	<field name="filename">a254452489221950ff79204a3fef57bed8f22c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c4/a254452489221950ff79204a3fef57bed8f22c</field>
	<field name="filename">cce53174e22a2c0a4ad14d953df1ffa2fb6798</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c4/cce53174e22a2c0a4ad14d953df1ffa2fb6798</field>
	<field name="filename">e1178df3417161a08166519c671cc7eb9d13da</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c4/e1178df3417161a08166519c671cc7eb9d13da</field>
	<field name="filename">c5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c5</field>
	<field name="filename">316e5a772e358243b305cd39185907ba4000e8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c5/316e5a772e358243b305cd39185907ba4000e8</field>
	<field name="filename">4397c1097a4bb0139266faf7f87af3829969fa</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c5/4397c1097a4bb0139266faf7f87af3829969fa</field>
	<field name="filename">4fed0d4c2cbdbae8e0e7153d36a0570181dc57</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c5/4fed0d4c2cbdbae8e0e7153d36a0570181dc57</field>
	<field name="filename">5a0b537cb1897139a0423c262c5896633c8ec2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c5/5a0b537cb1897139a0423c262c5896633c8ec2</field>
	<field name="filename">ad873781f7507ecbdff12ebf2892aa63829165</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c5/ad873781f7507ecbdff12ebf2892aa63829165</field>
	<field name="filename">b18055a68d5dad811238d2c06ae311503c2bba</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c5/b18055a68d5dad811238d2c06ae311503c2bba</field>
	<field name="filename">c6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c6</field>
	<field name="filename">1481cac83e3ade196547455a29355a04eada79</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c6/1481cac83e3ade196547455a29355a04eada79</field>
	<field name="filename">2a36758a44d5314d84f2a0e5519a12fa788c52</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c6/2a36758a44d5314d84f2a0e5519a12fa788c52</field>
	<field name="filename">9bf949c1ad67d6b982e2a963f5f6f6338efe03</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c6/9bf949c1ad67d6b982e2a963f5f6f6338efe03</field>
	<field name="filename">c29d8b2626547f47c454e3132643e911a9dca7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c6/c29d8b2626547f47c454e3132643e911a9dca7</field>
	<field name="filename">e98d328fadcc7fd967d0600ddc285e0a1c40c8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c6/e98d328fadcc7fd967d0600ddc285e0a1c40c8</field>
	<field name="filename">f25e80b8bcf0a21db2bea368b9e444c19bc0bf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c6/f25e80b8bcf0a21db2bea368b9e444c19bc0bf</field>
	<field name="filename">fe7a87983e74b52fa926fa439dc86267ad0ece</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c6/fe7a87983e74b52fa926fa439dc86267ad0ece</field>
	<field name="filename">c7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c7</field>
	<field name="filename">3ab753abf0ab07061c6e5c9f18f723c8839eea</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c7/3ab753abf0ab07061c6e5c9f18f723c8839eea</field>
	<field name="filename">7d84a29d341be904705ff97f40060d896d32a2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c7/7d84a29d341be904705ff97f40060d896d32a2</field>
	<field name="filename">c8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c8</field>
	<field name="filename">7eab9bd090b6e7f3777681b5cd11f4ea7a0fdb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c8/7eab9bd090b6e7f3777681b5cd11f4ea7a0fdb</field>
	<field name="filename">b4c9d59ca1c0115f3ad4bb89d46dccdcf4a00c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c8/b4c9d59ca1c0115f3ad4bb89d46dccdcf4a00c</field>
	<field name="filename">c9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c9</field>
	<field name="filename">0f97abc5e730138e977fa4b3049e6a8417b8c6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c9/0f97abc5e730138e977fa4b3049e6a8417b8c6</field>
	<field name="filename">378208eb8e4d7b44ff1d4ed8b24b2a3cec63ac</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c9/378208eb8e4d7b44ff1d4ed8b24b2a3cec63ac</field>
	<field name="filename">67cea0a628ff0f9b85d59003b56ab3db1ab2b4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c9/67cea0a628ff0f9b85d59003b56ab3db1ab2b4</field>
	<field name="filename">868012bd4ec4530b50ec581eb4464640583367</field>
	<field name="filename_full">.\grit/test/dot_git/objects/c9/868012bd4ec4530b50ec581eb4464640583367</field>
	<field name="filename">ca</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ca</field>
	<field name="filename">296a4122a0f6c4412532bd8cb785eb477d670a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ca/296a4122a0f6c4412532bd8cb785eb477d670a</field>
	<field name="filename">8a30f5a7f0f163bbe3b6f0abf18a6c83b0687a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ca/8a30f5a7f0f163bbe3b6f0abf18a6c83b0687a</field>
	<field name="filename">c661c85aa6405085fb561e4f5a1dbd62c89e0c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ca/c661c85aa6405085fb561e4f5a1dbd62c89e0c</field>
	<field name="filename">cb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb</field>
	<field name="filename">025c8d5557e85215123582995ce4f29ba8cf58</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb/025c8d5557e85215123582995ce4f29ba8cf58</field>
	<field name="filename">089cd89a7d7686d284d8761201649346b5aa1c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb/089cd89a7d7686d284d8761201649346b5aa1c</field>
	<field name="filename">2d623b0705dab9033b26ba6b1d26347c9c7dc6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb/2d623b0705dab9033b26ba6b1d26347c9c7dc6</field>
	<field name="filename">7524872ad0434e6ae1b9a467161d71cd052b20</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb/7524872ad0434e6ae1b9a467161d71cd052b20</field>
	<field name="filename">865cdf59ba7e39d8a5130ff81b2c753dc87ed6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb/865cdf59ba7e39d8a5130ff81b2c753dc87ed6</field>
	<field name="filename">9af18c3753abd34f1bffd77af3c02e8975e24c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb/9af18c3753abd34f1bffd77af3c02e8975e24c</field>
	<field name="filename">b903f44f2508c6204f58f812977dcc8cf9cefe</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb/b903f44f2508c6204f58f812977dcc8cf9cefe</field>
	<field name="filename">c8b3ec01bb98eb90e9988fe0005ecbc2dd33e8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cb/c8b3ec01bb98eb90e9988fe0005ecbc2dd33e8</field>
	<field name="filename">cc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cc</field>
	<field name="filename">04ea7b08f3c688db2d08837cd02cc314dcc993</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cc/04ea7b08f3c688db2d08837cd02cc314dcc993</field>
	<field name="filename">21f81d7720b48f4c536e38de9228f590f747a2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cc/21f81d7720b48f4c536e38de9228f590f747a2</field>
	<field name="filename">5a59d08bd7e2ffe3e7b4476d809edab4038bb2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cc/5a59d08bd7e2ffe3e7b4476d809edab4038bb2</field>
	<field name="filename">70a2b9b33e50633e146745b14be7b827a1b3fd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cc/70a2b9b33e50633e146745b14be7b827a1b3fd</field>
	<field name="filename">76d7de880e9bc84ff2b42cbfd394d0e3a61113</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cc/76d7de880e9bc84ff2b42cbfd394d0e3a61113</field>
	<field name="filename">a47071801b43a39ca8d0a88f2201ad30ebedc9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cc/a47071801b43a39ca8d0a88f2201ad30ebedc9</field>
	<field name="filename">fdeb08df97d990299a7cf523c0f26be1a17b72</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cc/fdeb08df97d990299a7cf523c0f26be1a17b72</field>
	<field name="filename">cd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cd</field>
	<field name="filename">34920bf0e591f952d46919b31ac464091c5ec6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cd/34920bf0e591f952d46919b31ac464091c5ec6</field>
	<field name="filename">3d162097c26b24b58f1d41cac56b871d945629</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cd/3d162097c26b24b58f1d41cac56b871d945629</field>
	<field name="filename">4b54aa066e4907be838d76250968a49d9a54a5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cd/4b54aa066e4907be838d76250968a49d9a54a5</field>
	<field name="filename">b5ce2c133787835ca0b75e3dddd4482d7d40ce</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cd/b5ce2c133787835ca0b75e3dddd4482d7d40ce</field>
	<field name="filename">ce</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ce</field>
	<field name="filename">37aab31d5b51592d153e85dc31a1164f2c74d5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ce/37aab31d5b51592d153e85dc31a1164f2c74d5</field>
	<field name="filename">c2177c534977032173305e028aec34b2b15244</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ce/c2177c534977032173305e028aec34b2b15244</field>
	<field name="filename">d71400e6918863c98829c3257274047aa86c3e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ce/d71400e6918863c98829c3257274047aa86c3e</field>
	<field name="filename">cf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cf</field>
	<field name="filename">19fd85e7967177d5419c4d07398f990c33545d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cf/19fd85e7967177d5419c4d07398f990c33545d</field>
	<field name="filename">1c5abec20238b4fda0b8fb9c9fcc0314198010</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cf/1c5abec20238b4fda0b8fb9c9fcc0314198010</field>
	<field name="filename">217f62ca6f13caa821e5f364e2db97d4139adc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cf/217f62ca6f13caa821e5f364e2db97d4139adc</field>
	<field name="filename">940d627bfd8f62d084bc351a17e70f138754e7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cf/940d627bfd8f62d084bc351a17e70f138754e7</field>
	<field name="filename">ba8a784564e61ab02beec0546e2b7deb1dedf8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cf/ba8a784564e61ab02beec0546e2b7deb1dedf8</field>
	<field name="filename">c1d07a120f8fa9812c821a93c6eea7b5f3f849</field>
	<field name="filename_full">.\grit/test/dot_git/objects/cf/c1d07a120f8fa9812c821a93c6eea7b5f3f849</field>
	<field name="filename">d0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d0</field>
	<field name="filename">609bbcf9b21b5488a3d0ec2cac298072d39773</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d0/609bbcf9b21b5488a3d0ec2cac298072d39773</field>
	<field name="filename">b8e19994cff4866d3464f604a44f5856436e67</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d0/b8e19994cff4866d3464f604a44f5856436e67</field>
	<field name="filename">b95097a4a97decfb88616ac5fa995bf8fd2353</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d0/b95097a4a97decfb88616ac5fa995bf8fd2353</field>
	<field name="filename">c74daaca46f35c1ff78c5b600826deb5649524</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d0/c74daaca46f35c1ff78c5b600826deb5649524</field>
	<field name="filename">d1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1</field>
	<field name="filename">13634b1167576fe27292c3857813ef5cc4a669</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1/13634b1167576fe27292c3857813ef5cc4a669</field>
	<field name="filename">152cb07487bd11c9f63843437b277d51e07205</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1/152cb07487bd11c9f63843437b277d51e07205</field>
	<field name="filename">5036828e61ea14859aa7d1bfcebd0e3b0eb881</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1/5036828e61ea14859aa7d1bfcebd0e3b0eb881</field>
	<field name="filename">55f8b40aab911804bdc6375d9db0c585fd16ae</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1/55f8b40aab911804bdc6375d9db0c585fd16ae</field>
	<field name="filename">624b21caf0eee83ec682d312cf477e88f750d3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1/624b21caf0eee83ec682d312cf477e88f750d3</field>
	<field name="filename">7653ab881d8ca2930b87b7456a41cf8745a4c2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1/7653ab881d8ca2930b87b7456a41cf8745a4c2</field>
	<field name="filename">d689918ec50ffe164a1eed435b6e3afb281aa0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1/d689918ec50ffe164a1eed435b6e3afb281aa0</field>
	<field name="filename">f010bd414b89ab2d70d95f819b913dfe421a14</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d1/f010bd414b89ab2d70d95f819b913dfe421a14</field>
	<field name="filename">d2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d2</field>
	<field name="filename">110dfef12479935cf619a11136153f94ca9b67</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d2/110dfef12479935cf619a11136153f94ca9b67</field>
	<field name="filename">2e791be92d7cb52fb20e5734ace4423d1832b5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d2/2e791be92d7cb52fb20e5734ace4423d1832b5</field>
	<field name="filename">563757320e1557299ad7249cd23523f065e654</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d2/563757320e1557299ad7249cd23523f065e654</field>
	<field name="filename">7b6ed3f2298528545a2d5fec952ab8468c52b4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d2/7b6ed3f2298528545a2d5fec952ab8468c52b4</field>
	<field name="filename">d47b0e111aa46550e107f7c2d0342dab5fec54</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d2/d47b0e111aa46550e107f7c2d0342dab5fec54</field>
	<field name="filename">ef2754d3f4498e5f39093a13bb7b63f5ac53e0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d2/ef2754d3f4498e5f39093a13bb7b63f5ac53e0</field>
	<field name="filename">d3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d3</field>
	<field name="filename">60d56c0dc32d09a1dac7d14227c0dc502e0315</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d3/60d56c0dc32d09a1dac7d14227c0dc502e0315</field>
	<field name="filename">6adf3899666534d3dfdbb7cb56ae6cd67c775f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d3/6adf3899666534d3dfdbb7cb56ae6cd67c775f</field>
	<field name="filename">e2f80ca20952878e5d2b113eea12af3b86548e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d3/e2f80ca20952878e5d2b113eea12af3b86548e</field>
	<field name="filename">d4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d4</field>
	<field name="filename">15fea0f0ad0b7894d6bef5705377f0bbdf14b1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d4/15fea0f0ad0b7894d6bef5705377f0bbdf14b1</field>
	<field name="filename">47e353cbaaa11b404fc0f03d3cabe71cdf4938</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d4/47e353cbaaa11b404fc0f03d3cabe71cdf4938</field>
	<field name="filename">c1f16003f3a9dbd786ff9c76fd870f6410219e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d4/c1f16003f3a9dbd786ff9c76fd870f6410219e</field>
	<field name="filename">c52892a65b126bd009552425629d3ddeac187c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d4/c52892a65b126bd009552425629d3ddeac187c</field>
	<field name="filename">d5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d5</field>
	<field name="filename">23191505a04e561b83f1d2d4161d0464fb7cc4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d5/23191505a04e561b83f1d2d4161d0464fb7cc4</field>
	<field name="filename">50ee25ecdea090a474e46047f5fb53c608225c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d5/50ee25ecdea090a474e46047f5fb53c608225c</field>
	<field name="filename">b2e50283d7c08ba11cff41cf969bc409e25b04</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d5/b2e50283d7c08ba11cff41cf969bc409e25b04</field>
	<field name="filename">d6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d6</field>
	<field name="filename">8924f19dad96912e1a653946aedca73e4f1515</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d6/8924f19dad96912e1a653946aedca73e4f1515</field>
	<field name="filename">8d89dbe9dd68f50039dce10c47e26f09515a49</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d6/8d89dbe9dd68f50039dce10c47e26f09515a49</field>
	<field name="filename">a96d9347d002e1f4c994f6e706c92cacf34c1b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d6/a96d9347d002e1f4c994f6e706c92cacf34c1b</field>
	<field name="filename">fa111185d38e869024040461d97e3fb1f2a3dd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d6/fa111185d38e869024040461d97e3fb1f2a3dd</field>
	<field name="filename">d7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7</field>
	<field name="filename">06308dfda94ed1d1fa3b4e166204a3b3b821de</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7/06308dfda94ed1d1fa3b4e166204a3b3b821de</field>
	<field name="filename">3109da898b1130ebf23ac384cd19f037244f2c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7/3109da898b1130ebf23ac384cd19f037244f2c</field>
	<field name="filename">3cb7a250d50941a792fa4b7ce8967d8d19f172</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7/3cb7a250d50941a792fa4b7ce8967d8d19f172</field>
	<field name="filename">769d5114d138fe191f89c4762207cf09ee6ff6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7/769d5114d138fe191f89c4762207cf09ee6ff6</field>
	<field name="filename">7e88e54007ca7054c80e4a553dfc9497033190</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7/7e88e54007ca7054c80e4a553dfc9497033190</field>
	<field name="filename">9588e68ca46be7ff40142a916384bb2e747a23</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7/9588e68ca46be7ff40142a916384bb2e747a23</field>
	<field name="filename">a66b7d6053a49c44d0be8431be4e3f83d2fca6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7/a66b7d6053a49c44d0be8431be4e3f83d2fca6</field>
	<field name="filename">b6c50da9b2013a2b68a58ad248a5ee86e3e413</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d7/b6c50da9b2013a2b68a58ad248a5ee86e3e413</field>
	<field name="filename">d8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d8</field>
	<field name="filename">263d0d2544145f915010a759217b3cca42372d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d8/263d0d2544145f915010a759217b3cca42372d</field>
	<field name="filename">32e468be4f1fc8898bf2e5273f1edbe96df5a1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d8/32e468be4f1fc8898bf2e5273f1edbe96df5a1</field>
	<field name="filename">5761603253c1244d71de61bbaede916abbc31e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d8/5761603253c1244d71de61bbaede916abbc31e</field>
	<field name="filename">73fa62a4ffb5d5a75d21432ffa8d1f6579024d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d8/73fa62a4ffb5d5a75d21432ffa8d1f6579024d</field>
	<field name="filename">abe3ca243a8ff9bba26b084100087bfcb4cc76</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d8/abe3ca243a8ff9bba26b084100087bfcb4cc76</field>
	<field name="filename">c9929f8fd838bb3b382e0d59d64d98fde2c1c6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d8/c9929f8fd838bb3b382e0d59d64d98fde2c1c6</field>
	<field name="filename">d9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d9</field>
	<field name="filename">257b8d55aa73dd51720e85768d217c9305f3ff</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d9/257b8d55aa73dd51720e85768d217c9305f3ff</field>
	<field name="filename">8d313fdd7d2bfa25bc440ac7419b65548d0ccb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d9/8d313fdd7d2bfa25bc440ac7419b65548d0ccb</field>
	<field name="filename">a1d623cba5e02e877ab45f642d103ef8d5b3b0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d9/a1d623cba5e02e877ab45f642d103ef8d5b3b0</field>
	<field name="filename">f86d513707635a11cbd37ea1bd2a7963122c0b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/d9/f86d513707635a11cbd37ea1bd2a7963122c0b</field>
	<field name="filename">da</field>
	<field name="filename_full">.\grit/test/dot_git/objects/da</field>
	<field name="filename">1669b4371b10947264cb338e9a1cbedc0ad569</field>
	<field name="filename_full">.\grit/test/dot_git/objects/da/1669b4371b10947264cb338e9a1cbedc0ad569</field>
	<field name="filename">2906f8045e1fdb88e00041682e7bd681a8ad1d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/da/2906f8045e1fdb88e00041682e7bd681a8ad1d</field>
	<field name="filename">a1ae72d1b50ea84156ab4609e643a070bdef4e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/da/a1ae72d1b50ea84156ab4609e643a070bdef4e</field>
	<field name="filename">a957a7309b9c4151fbed3db2467a05a20af896</field>
	<field name="filename_full">.\grit/test/dot_git/objects/da/a957a7309b9c4151fbed3db2467a05a20af896</field>
	<field name="filename">d96db2312b0af8967b04f7071ef98dab98eda4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/da/d96db2312b0af8967b04f7071ef98dab98eda4</field>
	<field name="filename">fd8a6599574a188701e2efd965b5a9907925ee</field>
	<field name="filename_full">.\grit/test/dot_git/objects/da/fd8a6599574a188701e2efd965b5a9907925ee</field>
	<field name="filename">db</field>
	<field name="filename_full">.\grit/test/dot_git/objects/db</field>
	<field name="filename">0101ef085f8c71eb0f4a1ec982d292924a5d7e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/db/0101ef085f8c71eb0f4a1ec982d292924a5d7e</field>
	<field name="filename">41697c57c3d294a776b4d42156868d6af91432</field>
	<field name="filename_full">.\grit/test/dot_git/objects/db/41697c57c3d294a776b4d42156868d6af91432</field>
	<field name="filename">668e5f99bf481aa0c196091e4922238fdaf341</field>
	<field name="filename_full">.\grit/test/dot_git/objects/db/668e5f99bf481aa0c196091e4922238fdaf341</field>
	<field name="filename">c9ba300c9939793123d04c4cb1b1f0b25e6bb3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/db/c9ba300c9939793123d04c4cb1b1f0b25e6bb3</field>
	<field name="filename">d625cae0863ef56c00c09d7954dea8165650db</field>
	<field name="filename_full">.\grit/test/dot_git/objects/db/d625cae0863ef56c00c09d7954dea8165650db</field>
	<field name="filename">dff42a58d11af46dd1361105de13ae6cfcddf2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/db/dff42a58d11af46dd1361105de13ae6cfcddf2</field>
	<field name="filename">fed0396f4690e49a9326015f0986f0d88e9bf8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/db/fed0396f4690e49a9326015f0986f0d88e9bf8</field>
	<field name="filename">dc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dc</field>
	<field name="filename">0bcf3df4f74fa898ab5541c38e38b405dbcaa9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dc/0bcf3df4f74fa898ab5541c38e38b405dbcaa9</field>
	<field name="filename">13b3e9e0c9f064e50c432158e3b038dc36b63e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dc/13b3e9e0c9f064e50c432158e3b038dc36b63e</field>
	<field name="filename">5de731e66fa25fa825ef4d2d550914c50e3592</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dc/5de731e66fa25fa825ef4d2d550914c50e3592</field>
	<field name="filename">7dadd3e76635500988a1805b414074cca37470</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dc/7dadd3e76635500988a1805b414074cca37470</field>
	<field name="filename">80b6e1a79803154171b8b54021280c79345b03</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dc/80b6e1a79803154171b8b54021280c79345b03</field>
	<field name="filename">a70d64a067eb0739bd71b8725d8e34fbc1ed0a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dc/a70d64a067eb0739bd71b8725d8e34fbc1ed0a</field>
	<field name="filename">dd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dd</field>
	<field name="filename">018cf1e22bb55a7603eb7b5dc40dd794df96f5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dd/018cf1e22bb55a7603eb7b5dc40dd794df96f5</field>
	<field name="filename">0d926603e93d455d1986c28adb6596062580f0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dd/0d926603e93d455d1986c28adb6596062580f0</field>
	<field name="filename">7efbb77e82a842d13c91288c372e26fc701ed6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/dd/7efbb77e82a842d13c91288c372e26fc701ed6</field>
	<field name="filename">de</field>
	<field name="filename_full">.\grit/test/dot_git/objects/de</field>
	<field name="filename">6582afb45f6095e001f58add5ea7c10e9dcb6d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/de/6582afb45f6095e001f58add5ea7c10e9dcb6d</field>
	<field name="filename">b2346f42ba644e6768541b5eded5d381c26158</field>
	<field name="filename_full">.\grit/test/dot_git/objects/de/b2346f42ba644e6768541b5eded5d381c26158</field>
	<field name="filename">e78dfdbff2d10b632252914a27b087c133c6c0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/de/e78dfdbff2d10b632252914a27b087c133c6c0</field>
	<field name="filename">df</field>
	<field name="filename_full">.\grit/test/dot_git/objects/df</field>
	<field name="filename">bda7c78373c97807758e7385e980ea1969a6a6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/df/bda7c78373c97807758e7385e980ea1969a6a6</field>
	<field name="filename">eb56c9ad7ffe4aa3119f378720dea2e4c7b663</field>
	<field name="filename_full">.\grit/test/dot_git/objects/df/eb56c9ad7ffe4aa3119f378720dea2e4c7b663</field>
	<field name="filename">eeb6e6ca48947e35b882ae04bdcc7cbc992d99</field>
	<field name="filename_full">.\grit/test/dot_git/objects/df/eeb6e6ca48947e35b882ae04bdcc7cbc992d99</field>
	<field name="filename">e0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e0</field>
	<field name="filename">2bcf0380749a290c327fad97bfb383ca54bcb3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e0/2bcf0380749a290c327fad97bfb383ca54bcb3</field>
	<field name="filename">34f8ea24c4f0e5a5ad74291148ab8a94843dcf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e0/34f8ea24c4f0e5a5ad74291148ab8a94843dcf</field>
	<field name="filename">e1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e1</field>
	<field name="filename">c2a8f7843b588275eda6f3c8e321e23e74fd96</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e1/c2a8f7843b588275eda6f3c8e321e23e74fd96</field>
	<field name="filename">e2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e2</field>
	<field name="filename">496eb77be920be74b1e9685a737a0f774d4fcf</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e2/496eb77be920be74b1e9685a737a0f774d4fcf</field>
	<field name="filename">4cc74b1f91acd0cc01b6cc413319155934735f</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e2/4cc74b1f91acd0cc01b6cc413319155934735f</field>
	<field name="filename">52fa762a251d01725a8d4c5becb136e9955fe8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e2/52fa762a251d01725a8d4c5becb136e9955fe8</field>
	<field name="filename">56e219e2898ef4e259472205a4cfb3fb782f3b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e2/56e219e2898ef4e259472205a4cfb3fb782f3b</field>
	<field name="filename">a696dd7cc6a5870130b7111fd0d768101aef73</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e2/a696dd7cc6a5870130b7111fd0d768101aef73</field>
	<field name="filename">c9f53517ee568ac02ce2b8f2633e8b0a9f513e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e2/c9f53517ee568ac02ce2b8f2633e8b0a9f513e</field>
	<field name="filename">e3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e3</field>
	<field name="filename">2412d181cced969cb0259656bed360e07e1c3a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e3/2412d181cced969cb0259656bed360e07e1c3a</field>
	<field name="filename">3e78cb3c472bc6e1566146f6758851ce2677b6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e3/3e78cb3c472bc6e1566146f6758851ce2677b6</field>
	<field name="filename">8017572b5eae23f041a40cb49292213e603cd2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e3/8017572b5eae23f041a40cb49292213e603cd2</field>
	<field name="filename">a3038573f3b1246def8ef1a1614f054bedf997</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e3/a3038573f3b1246def8ef1a1614f054bedf997</field>
	<field name="filename">e846396d26e98aa34d26c7417e851f46801f9a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e3/e846396d26e98aa34d26c7417e851f46801f9a</field>
	<field name="filename">e4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e4</field>
	<field name="filename">2c5d4e90496dec671202ade0099d0ab93beb9d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e4/2c5d4e90496dec671202ade0099d0ab93beb9d</field>
	<field name="filename">36cb7f50f0d742c0e0aa972092ec9bebb7f576</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e4/36cb7f50f0d742c0e0aa972092ec9bebb7f576</field>
	<field name="filename">45223b62c0dfe199d2db14b439c5eb1f10edd4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e4/45223b62c0dfe199d2db14b439c5eb1f10edd4</field>
	<field name="filename">76515e4c1e9c034f44efea8cb96bc137cd4c94</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e4/76515e4c1e9c034f44efea8cb96bc137cd4c94</field>
	<field name="filename">c491a2a3369cd2dbb250ee51c77026a9f0e890</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e4/c491a2a3369cd2dbb250ee51c77026a9f0e890</field>
	<field name="filename">d1fc91a3740ecf260efeaaaf6e7376021900e1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e4/d1fc91a3740ecf260efeaaaf6e7376021900e1</field>
	<field name="filename">e9744dfabd3c54cddf8274d95ffe7e8d4ae1f6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e4/e9744dfabd3c54cddf8274d95ffe7e8d4ae1f6</field>
	<field name="filename">e5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e5</field>
	<field name="filename">3c62a8e65bcb441de67dd388f22d9e59ff41b4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e5/3c62a8e65bcb441de67dd388f22d9e59ff41b4</field>
	<field name="filename">b2c414dddbe9e0c485e4021afe939e6f760113</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e5/b2c414dddbe9e0c485e4021afe939e6f760113</field>
	<field name="filename">e6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e6</field>
	<field name="filename">04d431540c63ebb9387bd1506b7df63e3d4868</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e6/04d431540c63ebb9387bd1506b7df63e3d4868</field>
	<field name="filename">1b707b59d20dc125ae1c2383eb67e06ee6686e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e6/1b707b59d20dc125ae1c2383eb67e06ee6686e</field>
	<field name="filename">2bf8d52ea71f4bfa9f703291736740662a569e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e6/2bf8d52ea71f4bfa9f703291736740662a569e</field>
	<field name="filename">30c25e624543723c051a8cef0b7894a43b5d66</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e6/30c25e624543723c051a8cef0b7894a43b5d66</field>
	<field name="filename">d63855e008c8a3a126fe042e8411bf60c6d6a1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e6/d63855e008c8a3a126fe042e8411bf60c6d6a1</field>
	<field name="filename">e2baff2ba5e92ee6487187f4d0a47a6e981dc3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e6/e2baff2ba5e92ee6487187f4d0a47a6e981dc3</field>
	<field name="filename">e7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e7</field>
	<field name="filename">67e28974d0047a53f3880d1361822c2386873b</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e7/67e28974d0047a53f3880d1361822c2386873b</field>
	<field name="filename">681e997de80c7d57e2c8e09c50c990c55d3b1c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e7/681e997de80c7d57e2c8e09c50c990c55d3b1c</field>
	<field name="filename">68654a38ce8abc9f3b62d6860e386dc6188ed1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e7/68654a38ce8abc9f3b62d6860e386dc6188ed1</field>
	<field name="filename">7a296aa02490f6a8d2ee4cb61e3600cdd416be</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e7/7a296aa02490f6a8d2ee4cb61e3600cdd416be</field>
	<field name="filename">9953820104e86a400504a738d09a9af1a85d52</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e7/9953820104e86a400504a738d09a9af1a85d52</field>
	<field name="filename">ca677143058e804352ae7225ec7ee077e732cc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e7/ca677143058e804352ae7225ec7ee077e732cc</field>
	<field name="filename">e8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e8</field>
	<field name="filename">c36a5942eb01f7036ed8969f5845c4d5385896</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e8/c36a5942eb01f7036ed8969f5845c4d5385896</field>
	<field name="filename">cecd71bf2bf0ee79b8254de22260bcacabe3aa</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e8/cecd71bf2bf0ee79b8254de22260bcacabe3aa</field>
	<field name="filename">e9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9</field>
	<field name="filename">0d7972cddfcbed0e7efd7dac92cbe894c226f0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/0d7972cddfcbed0e7efd7dac92cbe894c226f0</field>
	<field name="filename">13e5150f7f6789f16afe8276c0c4cbd4e6d374</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/13e5150f7f6789f16afe8276c0c4cbd4e6d374</field>
	<field name="filename">2a43db63f1c8bd572270140e8771fd33d1e415</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/2a43db63f1c8bd572270140e8771fd33d1e415</field>
	<field name="filename">462ac46b53343c09ea5dcdc7ab53b28dbdaf95</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/462ac46b53343c09ea5dcdc7ab53b28dbdaf95</field>
	<field name="filename">4f08ad7175d17064b709e487cf3d16954fb204</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/4f08ad7175d17064b709e487cf3d16954fb204</field>
	<field name="filename">594eba936a7a228d42b65d700bebff95a4d7d9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/594eba936a7a228d42b65d700bebff95a4d7d9</field>
	<field name="filename">5d5db706850682b2798f7643e31f3f82cfa8e0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/5d5db706850682b2798f7643e31f3f82cfa8e0</field>
	<field name="filename">6f1622e59e32a89c727359f2c8c5e598d719c8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/6f1622e59e32a89c727359f2c8c5e598d719c8</field>
	<field name="filename">95e20b7c6ad21823aedc5d3646271bbb5565a9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/95e20b7c6ad21823aedc5d3646271bbb5565a9</field>
	<field name="filename">c97e96fc539a6586110b4698c64e8167f09b7d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/e9/c97e96fc539a6586110b4698c64e8167f09b7d</field>
	<field name="filename">ea</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ea</field>
	<field name="filename">35a4556f5a6f1e25e133e0c4928c1bd9994356</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ea/35a4556f5a6f1e25e133e0c4928c1bd9994356</field>
	<field name="filename">7d7232c2035543c3b0f349339d50157874b5f0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ea/7d7232c2035543c3b0f349339d50157874b5f0</field>
	<field name="filename">94f383c239922fd70cc0433e2f34484b630f52</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ea/94f383c239922fd70cc0433e2f34484b630f52</field>
	<field name="filename">eb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/eb</field>
	<field name="filename">0661fd2ee02af9e0c5c885028f147fbd5f13ab</field>
	<field name="filename_full">.\grit/test/dot_git/objects/eb/0661fd2ee02af9e0c5c885028f147fbd5f13ab</field>
	<field name="filename">275489327879906f5ced9f04220aa896534243</field>
	<field name="filename_full">.\grit/test/dot_git/objects/eb/275489327879906f5ced9f04220aa896534243</field>
	<field name="filename">8ca7d4157905fe359425a58c05c4c43ceb3911</field>
	<field name="filename_full">.\grit/test/dot_git/objects/eb/8ca7d4157905fe359425a58c05c4c43ceb3911</field>
	<field name="filename">9c34e472281434001fb733bb12dcef2a27fc1e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/eb/9c34e472281434001fb733bb12dcef2a27fc1e</field>
	<field name="filename">edf3022c32069f7c375fed501e27ce570a8df7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/eb/edf3022c32069f7c375fed501e27ce570a8df7</field>
	<field name="filename">ee5088c07150ab83f09d7f56b7317afdc0b447</field>
	<field name="filename_full">.\grit/test/dot_git/objects/eb/ee5088c07150ab83f09d7f56b7317afdc0b447</field>
	<field name="filename">ec</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ec</field>
	<field name="filename">256eeca5ef0eb92479e4b5dec684deb962e952</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ec/256eeca5ef0eb92479e4b5dec684deb962e952</field>
	<field name="filename">43985d3cabe16a0096836a5ad64317101bb0a6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ec/43985d3cabe16a0096836a5ad64317101bb0a6</field>
	<field name="filename">a0c428506f18dc36589e9464513f7157cd6e52</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ec/a0c428506f18dc36589e9464513f7157cd6e52</field>
	<field name="filename">c3c63aa7cd24a169698704dcbddd9dc19f81f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ec/c3c63aa7cd24a169698704dcbddd9dc19f81f1</field>
	<field name="filename">ed</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ed</field>
	<field name="filename">0facca8d7f95104e95cc6682f77c8171c5423a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ed/0facca8d7f95104e95cc6682f77c8171c5423a</field>
	<field name="filename">3d99d5dc459aca24614bb4ca672413aa41d64a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ed/3d99d5dc459aca24614bb4ca672413aa41d64a</field>
	<field name="filename">a08db954e49e1d794a7e74a81a2a5b2215a9a4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ed/a08db954e49e1d794a7e74a81a2a5b2215a9a4</field>
	<field name="filename">a3c8823fddd1f491948351df3757b624d5f3ef</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ed/a3c8823fddd1f491948351df3757b624d5f3ef</field>
	<field name="filename">c62f0fb7f82ee1ad7c29b42e513960fdcf13d9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ed/c62f0fb7f82ee1ad7c29b42e513960fdcf13d9</field>
	<field name="filename">ee</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ee</field>
	<field name="filename">0ca6cafabbf02988a2e023b35c1567f9b0795e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ee/0ca6cafabbf02988a2e023b35c1567f9b0795e</field>
	<field name="filename">2b012174a4a37234adb948bc56ec2ed55881fb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ee/2b012174a4a37234adb948bc56ec2ed55881fb</field>
	<field name="filename">88371bc4a42cb7980fdb7704be9f05fee3b0a3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ee/88371bc4a42cb7980fdb7704be9f05fee3b0a3</field>
	<field name="filename">ccc934cad8bb74624ed388988fe79c26e6900d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ee/ccc934cad8bb74624ed388988fe79c26e6900d</field>
	<field name="filename">de095009fcdde7b3bb4ddc21f3f479eb2331c2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ee/de095009fcdde7b3bb4ddc21f3f479eb2331c2</field>
	<field name="filename">e211414ed00e6b5b65d81179ea21d5c052addd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ee/e211414ed00e6b5b65d81179ea21d5c052addd</field>
	<field name="filename">e9df3d091825b2ce066c0fe717e2224f2f2931</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ee/e9df3d091825b2ce066c0fe717e2224f2f2931</field>
	<field name="filename">ef</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ef</field>
	<field name="filename">9d99db794a654d4c67527d277064481e996c5a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ef/9d99db794a654d4c67527d277064481e996c5a</field>
	<field name="filename">9e75f59ccadfd4c67c6853828b9bc34d974ec7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ef/9e75f59ccadfd4c67c6853828b9bc34d974ec7</field>
	<field name="filename">b165f0221d9739b6be5179ae3cecd633e45ce8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ef/b165f0221d9739b6be5179ae3cecd633e45ce8</field>
	<field name="filename">e949a5fd8eb03a7380b2eccb2fc7dcabef6899</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ef/e949a5fd8eb03a7380b2eccb2fc7dcabef6899</field>
	<field name="filename">f0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f0</field>
	<field name="filename">32303006cdfe5892e2f8f64cf0f972d351b9a3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f0/32303006cdfe5892e2f8f64cf0f972d351b9a3</field>
	<field name="filename">5fb20e635d8ae2ff50ccb6a984274e58058632</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f0/5fb20e635d8ae2ff50ccb6a984274e58058632</field>
	<field name="filename">6db1288baf0f8671f287ad5a2a91d943747068</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f0/6db1288baf0f8671f287ad5a2a91d943747068</field>
	<field name="filename">f6f7e25c4bdd0647932e859fca992ff37869b3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f0/f6f7e25c4bdd0647932e859fca992ff37869b3</field>
	<field name="filename">f87fe091f1256b42135c6e2e482cd3a078c7f9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f0/f87fe091f1256b42135c6e2e482cd3a078c7f9</field>
	<field name="filename">f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f1</field>
	<field name="filename">0267a9fd3a1baaf9ba9e869f23e9941f16a040</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f1/0267a9fd3a1baaf9ba9e869f23e9941f16a040</field>
	<field name="filename">0a750f2d5017a105d99d49dac1a86adcfef830</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f1/0a750f2d5017a105d99d49dac1a86adcfef830</field>
	<field name="filename">279e3559971fcd3ab535140d9f320796f48269</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f1/279e3559971fcd3ab535140d9f320796f48269</field>
	<field name="filename">43aeeecdd4c7736a3d9767acf598e9c5f10e9e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f1/43aeeecdd4c7736a3d9767acf598e9c5f10e9e</field>
	<field name="filename">bf0001951ac41581e708bacacc4bdb4deddf3c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f1/bf0001951ac41581e708bacacc4bdb4deddf3c</field>
	<field name="filename">f2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2</field>
	<field name="filename">0b59e485ec38019c363f3e1e89e0f804ed48ec</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/0b59e485ec38019c363f3e1e89e0f804ed48ec</field>
	<field name="filename">2d0c85fbcfc90bc51ef9a9131d03033ca11115</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/2d0c85fbcfc90bc51ef9a9131d03033ca11115</field>
	<field name="filename">41613e98ac4f7d57d45dfd8d7f38b7c8df99f3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/41613e98ac4f7d57d45dfd8d7f38b7c8df99f3</field>
	<field name="filename">46936f2d7e901199afad8bb7e1e3b27de590a6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/46936f2d7e901199afad8bb7e1e3b27de590a6</field>
	<field name="filename">4881f7c6a31653a8d979a9d57dc892987be60c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/4881f7c6a31653a8d979a9d57dc892987be60c</field>
	<field name="filename">4e3a795e54ee05df27ecd67f24d7033f954e2d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/4e3a795e54ee05df27ecd67f24d7033f954e2d</field>
	<field name="filename">55ce10804955454568678091a6f328ef66a8a6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/55ce10804955454568678091a6f328ef66a8a6</field>
	<field name="filename">7d9bd39b44bd80abd029a481c6a54617d0d170</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/7d9bd39b44bd80abd029a481c6a54617d0d170</field>
	<field name="filename">8d3bb5dd2c9be42f4ec9458808a4d8487c2e3e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/8d3bb5dd2c9be42f4ec9458808a4d8487c2e3e</field>
	<field name="filename">c90099c5e43ab88371cdccc411d0424b0a4fb9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/c90099c5e43ab88371cdccc411d0424b0a4fb9</field>
	<field name="filename">ce4153e5b1231e5603dea5772cd7a895d93923</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/ce4153e5b1231e5603dea5772cd7a895d93923</field>
	<field name="filename">e63e8292a9e5750c459398d54f3ad9a23c18d7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f2/e63e8292a9e5750c459398d54f3ad9a23c18d7</field>
	<field name="filename">f3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f3</field>
	<field name="filename">58447ff06a87a0aeac39e1945e3c635b328801</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f3/58447ff06a87a0aeac39e1945e3c635b328801</field>
	<field name="filename">7527fc3a9a67a11e982ac64d37b6f8ed68d297</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f3/7527fc3a9a67a11e982ac64d37b6f8ed68d297</field>
	<field name="filename">b578c9694e83744b094524cbd190f2763f4a12</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f3/b578c9694e83744b094524cbd190f2763f4a12</field>
	<field name="filename">f1411becc7ea375d82a8cd1e6581f112dcb7d0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f3/f1411becc7ea375d82a8cd1e6581f112dcb7d0</field>
	<field name="filename">f4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f4</field>
	<field name="filename">1be6d524d8db969348f7e3bdcc08908932bb4e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f4/1be6d524d8db969348f7e3bdcc08908932bb4e</field>
	<field name="filename">401b69f04ff4a08df8e03e7883feca260f30f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f4/401b69f04ff4a08df8e03e7883feca260f30f1</field>
	<field name="filename">e4a260042d8030185c55a6005496ca7735ac3e</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f4/e4a260042d8030185c55a6005496ca7735ac3e</field>
	<field name="filename">f5</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5</field>
	<field name="filename">0489c78cc3d06d797c82d871726716684fc61c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/0489c78cc3d06d797c82d871726716684fc61c</field>
	<field name="filename">3a1631d49cfdb0a257974b3ebc0b5bc79bde52</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/3a1631d49cfdb0a257974b3ebc0b5bc79bde52</field>
	<field name="filename">3d11ab42a370d97a2121c864b411aaca6f08dd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/3d11ab42a370d97a2121c864b411aaca6f08dd</field>
	<field name="filename">3eb189e857104b44de96b0a41436ebf60ffd78</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/3eb189e857104b44de96b0a41436ebf60ffd78</field>
	<field name="filename">42ce17ea0da75b3de894eb7d0ffd8b9efe97d2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/42ce17ea0da75b3de894eb7d0ffd8b9efe97d2</field>
	<field name="filename">69f066cdae3a13946f7ef9608677006ff387ed</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/69f066cdae3a13946f7ef9608677006ff387ed</field>
	<field name="filename">6b3f207a27f31f0d625926f822ca2e48d9d0d4</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/6b3f207a27f31f0d625926f822ca2e48d9d0d4</field>
	<field name="filename">923002632da369454a1dc158ea3c0306fdeeee</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/923002632da369454a1dc158ea3c0306fdeeee</field>
	<field name="filename">c3d3175f45e9bc0d22a18c23d05aa3efd495dd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f5/c3d3175f45e9bc0d22a18c23d05aa3efd495dd</field>
	<field name="filename">f6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f6</field>
	<field name="filename">2215251c1d9fd76bdfb6454446cb1826ee9246</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f6/2215251c1d9fd76bdfb6454446cb1826ee9246</field>
	<field name="filename">c9c0b559fd041a0a23d33ae4bb605f0dba7b58</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f6/c9c0b559fd041a0a23d33ae4bb605f0dba7b58</field>
	<field name="filename">f7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f7</field>
	<field name="filename">3b9daf41c4c1380be40168b5cb7a3fefb87728</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f7/3b9daf41c4c1380be40168b5cb7a3fefb87728</field>
	<field name="filename">f0d1e2900534942ca33db3655dca736cf511cd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f7/f0d1e2900534942ca33db3655dca736cf511cd</field>
	<field name="filename">f8</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f8</field>
	<field name="filename">1eec2ace52484d074b1db7a29b32c8b716d056</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f8/1eec2ace52484d074b1db7a29b32c8b716d056</field>
	<field name="filename">206296fd197c506a224e9bbee22a8dccd2d8b7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f8/206296fd197c506a224e9bbee22a8dccd2d8b7</field>
	<field name="filename">5c1f389f7a79aff1d3f05abb8dbff7e7c15ee0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f8/5c1f389f7a79aff1d3f05abb8dbff7e7c15ee0</field>
	<field name="filename">f75c70d9abddb176e61fe67520a0f0a168b8ee</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f8/f75c70d9abddb176e61fe67520a0f0a168b8ee</field>
	<field name="filename">f9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f9</field>
	<field name="filename">1286d73b748a0008e48f03362e4642cd5dc9b3</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f9/1286d73b748a0008e48f03362e4642cd5dc9b3</field>
	<field name="filename">f3fe3f0b327e5b7955a195e5d789791bcc08f1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/f9/f3fe3f0b327e5b7955a195e5d789791bcc08f1</field>
	<field name="filename">fa</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fa</field>
	<field name="filename">18b41bbe8588286eaa9e969516ad761d0e3014</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fa/18b41bbe8588286eaa9e969516ad761d0e3014</field>
	<field name="filename">3c45fbf74c431e978028feee0b2fdd5253a150</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fa/3c45fbf74c431e978028feee0b2fdd5253a150</field>
	<field name="filename">64d91bcda155c1622505ca91dde0fa694c04c1</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fa/64d91bcda155c1622505ca91dde0fa694c04c1</field>
	<field name="filename">b9a01ca267b7eec6fa6f215c34b9967d8565a7</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fa/b9a01ca267b7eec6fa6f215c34b9967d8565a7</field>
	<field name="filename">dd0862e018dbf21be3c6775acf9b93df85b8ae</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fa/dd0862e018dbf21be3c6775acf9b93df85b8ae</field>
	<field name="filename">fb</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fb</field>
	<field name="filename">646a3ac70216618af383ce1bec1e05692d81fd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fb/646a3ac70216618af383ce1bec1e05692d81fd</field>
	<field name="filename">720415bc5672ba589928d8ac63c5fcc7de2eb0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fb/720415bc5672ba589928d8ac63c5fcc7de2eb0</field>
	<field name="filename">c4ed43dfd3173f9707e3d7657809dc77c0bd9a</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fb/c4ed43dfd3173f9707e3d7657809dc77c0bd9a</field>
	<field name="filename">fc</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fc</field>
	<field name="filename">0bfccdebfaea6fbb28e5a6cea62f9a820ea817</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fc/0bfccdebfaea6fbb28e5a6cea62f9a820ea817</field>
	<field name="filename">ee3824a8d0213b9a3a940653e9fafaeaeeae1d</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fc/ee3824a8d0213b9a3a940653e9fafaeaeeae1d</field>
	<field name="filename">fd</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fd</field>
	<field name="filename">f213805d60b3c1736a8121b8388ff143363e58</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fd/f213805d60b3c1736a8121b8388ff143363e58</field>
	<field name="filename">fe</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fe</field>
	<field name="filename">790b61726b8a710b66df71b8999798d9a8e176</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fe/790b61726b8a710b66df71b8999798d9a8e176</field>
	<field name="filename">7efffeafed1ecd4679b5526d72a7dd3df140a9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fe/7efffeafed1ecd4679b5526d72a7dd3df140a9</field>
	<field name="filename">96440abd8d769d80037c7a8afcbf225156b604</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fe/96440abd8d769d80037c7a8afcbf225156b604</field>
	<field name="filename">a98a018892bd22aa0bf7de727097eafc66ecc2</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fe/a98a018892bd22aa0bf7de727097eafc66ecc2</field>
	<field name="filename">cd79941b5854d9a729c4b0752ebc23c49ae0f0</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fe/cd79941b5854d9a729c4b0752ebc23c49ae0f0</field>
	<field name="filename">d488d40a767dd69f1e6aa6ba060e8669666391</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fe/d488d40a767dd69f1e6aa6ba060e8669666391</field>
	<field name="filename">f69482cd45384aeccd1161cdbbf754a524a811</field>
	<field name="filename_full">.\grit/test/dot_git/objects/fe/f69482cd45384aeccd1161cdbbf754a524a811</field>
	<field name="filename">ff</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ff</field>
	<field name="filename">0f42a1d984cdcd4b647e713eaec668177fb1f6</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ff/0f42a1d984cdcd4b647e713eaec668177fb1f6</field>
	<field name="filename">2a1936f7883f44e7587a65dcbb5d18b03f3835</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ff/2a1936f7883f44e7587a65dcbb5d18b03f3835</field>
	<field name="filename">667b71fb08b0642e5a92087e763fc09096893c</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ff/667b71fb08b0642e5a92087e763fc09096893c</field>
	<field name="filename">97e5351d9fccccd047d798573c5a61771fc6c9</field>
	<field name="filename_full">.\grit/test/dot_git/objects/ff/97e5351d9fccccd047d798573c5a61771fc6c9</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git/objects/info</field>
	<field name="filename">alternates</field>
	<field name="filename_full">.\grit/test/dot_git/objects/info/alternates</field>
	<field name="filename">pack</field>
	<field name="filename_full">.\grit/test/dot_git/objects/pack</field>
	<field name="filename">pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.idx</field>
	<field name="filename_full">.\grit/test/dot_git/objects/pack/pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.idx</field>
	<field name="filename">pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.keep</field>
	<field name="filename_full">.\grit/test/dot_git/objects/pack/pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.keep</field>
	<field name="filename">pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.pack</field>
	<field name="filename_full">.\grit/test/dot_git/objects/pack/pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.pack</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/dot_git/refs</field>
	<field name="filename">heads</field>
	<field name="filename_full">.\grit/test/dot_git/refs/heads</field>
	<field name="filename">nonpack</field>
	<field name="filename_full">.\grit/test/dot_git/refs/heads/nonpack</field>
	<field name="filename">remotes</field>
	<field name="filename_full">.\grit/test/dot_git/refs/remotes</field>
	<field name="filename">origin</field>
	<field name="filename_full">.\grit/test/dot_git/refs/remotes/origin</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/dot_git/refs/remotes/origin/HEAD</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/dot_git/refs/remotes/origin/master</field>
	<field name="filename">tom</field>
	<field name="filename_full">.\grit/test/dot_git/refs/remotes/tom</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/dot_git/refs/remotes/tom/master</field>
	<field name="filename">tags</field>
	<field name="filename_full">.\grit/test/dot_git/refs/tags</field>
	<field name="filename">annotated</field>
	<field name="filename_full">.\grit/test/dot_git/refs/tags/annotated</field>
	<field name="filename">not_annotated</field>
	<field name="filename_full">.\grit/test/dot_git/refs/tags/not_annotated</field>
	<field name="filename">v0.7.0</field>
	<field name="filename_full">.\grit/test/dot_git/refs/tags/v0.7.0</field>
	<field name="filename">dot_git_clone</field>
	<field name="filename_full">.\grit/test/dot_git_clone</field>
	<field name="filename">config</field>
	<field name="filename_full">.\grit/test/dot_git_clone/config</field>
	<field name="filename">description</field>
	<field name="filename_full">.\grit/test/dot_git_clone/description</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/dot_git_clone/HEAD</field>
	<field name="filename">hooks</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks</field>
	<field name="filename">applypatch-msg</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/applypatch-msg</field>
	<field name="filename">commit-msg</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/commit-msg</field>
	<field name="filename">post-commit</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/post-commit</field>
	<field name="filename">post-receive</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/post-receive</field>
	<field name="filename">post-update</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/post-update</field>
	<field name="filename">pre-applypatch</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/pre-applypatch</field>
	<field name="filename">pre-commit</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/pre-commit</field>
	<field name="filename">pre-rebase</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/pre-rebase</field>
	<field name="filename">prepare-commit-msg</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/prepare-commit-msg</field>
	<field name="filename">update</field>
	<field name="filename_full">.\grit/test/dot_git_clone/hooks/update</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git_clone/info</field>
	<field name="filename">exclude</field>
	<field name="filename_full">.\grit/test/dot_git_clone/info/exclude</field>
	<field name="filename">objects</field>
	<field name="filename_full">.\grit/test/dot_git_clone/objects</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git_clone/objects/info</field>
	<field name="filename">alternates</field>
	<field name="filename_full">.\grit/test/dot_git_clone/objects/info/alternates</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs</field>
	<field name="filename">heads</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs/heads</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs/heads/master</field>
	<field name="filename">nonpack</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs/heads/nonpack</field>
	<field name="filename">testing</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs/heads/testing</field>
	<field name="filename">test</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs/heads/test</field>
	<field name="filename">chacon</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs/heads/test/chacon</field>
	<field name="filename">tags</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs/tags</field>
	<field name="filename">v0.7.0</field>
	<field name="filename_full">.\grit/test/dot_git_clone/refs/tags/v0.7.0</field>
	<field name="filename">dot_git_clone2</field>
	<field name="filename_full">.\grit/test/dot_git_clone2</field>
	<field name="filename">config</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/config</field>
	<field name="filename">description</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/description</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/HEAD</field>
	<field name="filename">hooks</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks</field>
	<field name="filename">applypatch-msg</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/applypatch-msg</field>
	<field name="filename">commit-msg</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/commit-msg</field>
	<field name="filename">post-commit</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/post-commit</field>
	<field name="filename">post-receive</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/post-receive</field>
	<field name="filename">post-update</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/post-update</field>
	<field name="filename">pre-applypatch</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/pre-applypatch</field>
	<field name="filename">pre-commit</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/pre-commit</field>
	<field name="filename">pre-rebase</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/pre-rebase</field>
	<field name="filename">prepare-commit-msg</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/prepare-commit-msg</field>
	<field name="filename">update</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/hooks/update</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/info</field>
	<field name="filename">exclude</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/info/exclude</field>
	<field name="filename">objects</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/objects</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/objects/info</field>
	<field name="filename">alternates</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/objects/info/alternates</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs</field>
	<field name="filename">heads</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs/heads</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs/heads/master</field>
	<field name="filename">nonpack</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs/heads/nonpack</field>
	<field name="filename">testing</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs/heads/testing</field>
	<field name="filename">test</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs/heads/test</field>
	<field name="filename">chacon</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs/heads/test/chacon</field>
	<field name="filename">tags</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs/tags</field>
	<field name="filename">v0.7.0</field>
	<field name="filename_full">.\grit/test/dot_git_clone2/refs/tags/v0.7.0</field>
	<field name="filename">dot_git_iv2</field>
	<field name="filename_full">.\grit/test/dot_git_iv2</field>
	<field name="filename">config</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/config</field>
	<field name="filename">description</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/description</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/HEAD</field>
	<field name="filename">index</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/index</field>
	<field name="filename">packed-refs</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/packed-refs</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/info</field>
	<field name="filename">exclude</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/info/exclude</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/info/refs</field>
	<field name="filename">objects</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/info</field>
	<field name="filename">alternates</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/info/alternates</field>
	<field name="filename">packs</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/info/packs</field>
	<field name="filename">pack</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/pack</field>
	<field name="filename">pack-4eb8bbafbe65e4f3841581537735fc5d448759c5.idx</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/pack/pack-4eb8bbafbe65e4f3841581537735fc5d448759c5.idx</field>
	<field name="filename">pack-4eb8bbafbe65e4f3841581537735fc5d448759c5.pack</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/pack/pack-4eb8bbafbe65e4f3841581537735fc5d448759c5.pack</field>
	<field name="filename">pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.idx</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/pack/pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.idx</field>
	<field name="filename">pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.keep</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/pack/pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.keep</field>
	<field name="filename">pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.pack</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/objects/pack/pack-c8881c2613522dc3ac69af9c7b4881a061aaec8c.pack</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/refs</field>
	<field name="filename">remotes</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/refs/remotes</field>
	<field name="filename">origin</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/refs/remotes/origin</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/dot_git_iv2/refs/remotes/origin/HEAD</field>
	<field name="filename">dot_git_spaces</field>
	<field name="filename_full">.\grit/test/dot_git_spaces</field>
	<field name="filename">config</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/config</field>
	<field name="filename">description</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/description</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/HEAD</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/info</field>
	<field name="filename">exclude</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/info/exclude</field>
	<field name="filename">objects</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects</field>
	<field name="filename">2e</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/2e</field>
	<field name="filename">db031f77340b65a897e8536ad75f7b7596a607</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/2e/db031f77340b65a897e8536ad75f7b7596a607</field>
	<field name="filename">36</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/36</field>
	<field name="filename">a4f6bc8c5e4e67534b98c996f4e91ffff73ea5</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/36/a4f6bc8c5e4e67534b98c996f4e91ffff73ea5</field>
	<field name="filename">52</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/52</field>
	<field name="filename">46707931d82a8c641c373b014ae100a866db15</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/52/46707931d82a8c641c373b014ae100a866db15</field>
	<field name="filename">62</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/62</field>
	<field name="filename">6ab676ba591027877fdef1fcdf17512755dfed</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/62/6ab676ba591027877fdef1fcdf17512755dfed</field>
	<field name="filename">67</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/67</field>
	<field name="filename">77956c8cc2218a48e7a0409905e8cb725edf94</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/67/77956c8cc2218a48e7a0409905e8cb725edf94</field>
	<field name="filename">72</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/72</field>
	<field name="filename">74e17447ac939b5cd1df121741161660c546a3</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/72/74e17447ac939b5cd1df121741161660c546a3</field>
	<field name="filename">7f</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/7f</field>
	<field name="filename">09709727b53fdf3c6c6a6ae653515c4e1a3ef2</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/7f/09709727b53fdf3c6c6a6ae653515c4e1a3ef2</field>
	<field name="filename">e714b67362b4f3b1ab7c8b6fcb4304b316167d</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/7f/e714b67362b4f3b1ab7c8b6fcb4304b316167d</field>
	<field name="filename">8f</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/8f</field>
	<field name="filename">4094b31327dd0223979adc288e2b12ca86b0a1</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/8f/4094b31327dd0223979adc288e2b12ca86b0a1</field>
	<field name="filename">9d</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/9d</field>
	<field name="filename">b171ee179cb6083997b7db97214000c384f281</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/9d/b171ee179cb6083997b7db97214000c384f281</field>
	<field name="filename">fa</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/fa</field>
	<field name="filename">263b8bb9291aaa5059dad78bb38b63f4318c62</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/fa/263b8bb9291aaa5059dad78bb38b63f4318c62</field>
	<field name="filename">fd</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/fd</field>
	<field name="filename">ae65b120511ff55e2aa4cee26a30f9ce5ee0fa</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/fd/ae65b120511ff55e2aa4cee26a30f9ce5ee0fa</field>
	<field name="filename">fe</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/fe</field>
	<field name="filename">11aab0382df5779796cd8f1153620b2ca78890</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/objects/fe/11aab0382df5779796cd8f1153620b2ca78890</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/refs</field>
	<field name="filename">heads</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/refs/heads</field>
	<field name="filename">branch_one</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/refs/heads/branch_one</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/dot_git_spaces/refs/heads/master</field>
	<field name="filename">fixtures</field>
	<field name="filename_full">.\grit/test/fixtures</field>
	<field name="filename">blame</field>
	<field name="filename_full">.\grit/test/fixtures/blame</field>
	<field name="filename">cat_file_blob</field>
	<field name="filename_full">.\grit/test/fixtures/cat_file_blob</field>
	<field name="filename">cat_file_blob_ruby</field>
	<field name="filename_full">.\grit/test/fixtures/cat_file_blob_ruby</field>
	<field name="filename">cat_file_blob_size</field>
	<field name="filename_full">.\grit/test/fixtures/cat_file_blob_size</field>
	<field name="filename">cat_file_commit_ruby</field>
	<field name="filename_full">.\grit/test/fixtures/cat_file_commit_ruby</field>
	<field name="filename">cat_file_tree_ruby</field>
	<field name="filename_full">.\grit/test/fixtures/cat_file_tree_ruby</field>
	<field name="filename">commit</field>
	<field name="filename_full">.\grit/test/fixtures/commit</field>
	<field name="filename">diff_2</field>
	<field name="filename_full">.\grit/test/fixtures/diff_2</field>
	<field name="filename">diff_2f</field>
	<field name="filename_full">.\grit/test/fixtures/diff_2f</field>
	<field name="filename">diff_f</field>
	<field name="filename_full">.\grit/test/fixtures/diff_f</field>
	<field name="filename">diff_files</field>
	<field name="filename_full">.\grit/test/fixtures/diff_files</field>
	<field name="filename">diff_i</field>
	<field name="filename_full">.\grit/test/fixtures/diff_i</field>
	<field name="filename">diff_index</field>
	<field name="filename_full">.\grit/test/fixtures/diff_index</field>
	<field name="filename">diff_mode_only</field>
	<field name="filename_full">.\grit/test/fixtures/diff_mode_only</field>
	<field name="filename">diff_new_mode</field>
	<field name="filename_full">.\grit/test/fixtures/diff_new_mode</field>
	<field name="filename">diff_p</field>
	<field name="filename_full">.\grit/test/fixtures/diff_p</field>
	<field name="filename">diff_renames</field>
	<field name="filename_full">.\grit/test/fixtures/diff_renames</field>
	<field name="filename">for_each_ref</field>
	<field name="filename_full">.\grit/test/fixtures/for_each_ref</field>
	<field name="filename">for_each_ref_remotes</field>
	<field name="filename_full">.\grit/test/fixtures/for_each_ref_remotes</field>
	<field name="filename">for_each_ref_tags</field>
	<field name="filename_full">.\grit/test/fixtures/for_each_ref_tags</field>
	<field name="filename">gitmodules</field>
	<field name="filename_full">.\grit/test/fixtures/gitmodules</field>
	<field name="filename">log</field>
	<field name="filename_full">.\grit/test/fixtures/log</field>
	<field name="filename">ls_files</field>
	<field name="filename_full">.\grit/test/fixtures/ls_files</field>
	<field name="filename">ls_tree_a</field>
	<field name="filename_full">.\grit/test/fixtures/ls_tree_a</field>
	<field name="filename">ls_tree_b</field>
	<field name="filename_full">.\grit/test/fixtures/ls_tree_b</field>
	<field name="filename">ls_tree_commit</field>
	<field name="filename_full">.\grit/test/fixtures/ls_tree_commit</field>
	<field name="filename">ls_tree_paths_ruby</field>
	<field name="filename_full">.\grit/test/fixtures/ls_tree_paths_ruby</field>
	<field name="filename">ls_tree_paths_ruby_deep</field>
	<field name="filename_full">.\grit/test/fixtures/ls_tree_paths_ruby_deep</field>
	<field name="filename">ls_tree_recursive</field>
	<field name="filename_full">.\grit/test/fixtures/ls_tree_recursive</field>
	<field name="filename">ls_tree_subdir</field>
	<field name="filename_full">.\grit/test/fixtures/ls_tree_subdir</field>
	<field name="filename">ls_tree_submodule</field>
	<field name="filename_full">.\grit/test/fixtures/ls_tree_submodule</field>
	<field name="filename">merge_result</field>
	<field name="filename_full">.\grit/test/fixtures/merge_result</field>
	<field name="filename">rev_list</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list</field>
	<field name="filename">rev_list_all</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list_all</field>
	<field name="filename">rev_list_count</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list_count</field>
	<field name="filename">rev_list_delta_a</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list_delta_a</field>
	<field name="filename">rev_list_delta_b</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list_delta_b</field>
	<field name="filename">rev_list_lines</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list_lines</field>
	<field name="filename">rev_list_range</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list_range</field>
	<field name="filename">rev_list_since</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list_since</field>
	<field name="filename">rev_list_single</field>
	<field name="filename_full">.\grit/test/fixtures/rev_list_single</field>
	<field name="filename">rev_parse</field>
	<field name="filename_full">.\grit/test/fixtures/rev_parse</field>
	<field name="filename">ruby_diff</field>
	<field name="filename_full">.\grit/test/fixtures/ruby_diff</field>
	<field name="filename">ruby_diff_full_index</field>
	<field name="filename_full">.\grit/test/fixtures/ruby_diff_full_index</field>
	<field name="filename">ruby_for_each_ref</field>
	<field name="filename_full">.\grit/test/fixtures/ruby_for_each_ref</field>
	<field name="filename">show_cc</field>
	<field name="filename_full">.\grit/test/fixtures/show_cc</field>
	<field name="filename">show_empty_commit</field>
	<field name="filename_full">.\grit/test/fixtures/show_empty_commit</field>
	<field name="filename">simple_config</field>
	<field name="filename_full">.\grit/test/fixtures/simple_config</field>
	<field name="filename">patch</field>
	<field name="filename_full">.\grit/test/patch</field>
	<field name="filename">COMMIT_EDITMSG</field>
	<field name="filename_full">.\grit/test/patch/COMMIT_EDITMSG</field>
	<field name="filename">config</field>
	<field name="filename_full">.\grit/test/patch/config</field>
	<field name="filename">description</field>
	<field name="filename_full">.\grit/test/patch/description</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/patch/HEAD</field>
	<field name="filename">index</field>
	<field name="filename_full">.\grit/test/patch/index</field>
	<field name="filename">info</field>
	<field name="filename_full">.\grit/test/patch/info</field>
	<field name="filename">exclude</field>
	<field name="filename_full">.\grit/test/patch/info/exclude</field>
	<field name="filename">logs</field>
	<field name="filename_full">.\grit/test/patch/logs</field>
	<field name="filename">HEAD</field>
	<field name="filename_full">.\grit/test/patch/logs/HEAD</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/patch/logs/refs</field>
	<field name="filename">heads</field>
	<field name="filename_full">.\grit/test/patch/logs/refs/heads</field>
	<field name="filename">bad</field>
	<field name="filename_full">.\grit/test/patch/logs/refs/heads/bad</field>
	<field name="filename">good</field>
	<field name="filename_full">.\grit/test/patch/logs/refs/heads/good</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/patch/logs/refs/heads/master</field>
	<field name="filename">objects</field>
	<field name="filename_full">.\grit/test/patch/objects</field>
	<field name="filename">0d</field>
	<field name="filename_full">.\grit/test/patch/objects/0d</field>
	<field name="filename">59bef5ff65a0f09ae0259a4f20625ff9d9d64b</field>
	<field name="filename_full">.\grit/test/patch/objects/0d/59bef5ff65a0f09ae0259a4f20625ff9d9d64b</field>
	<field name="filename">5d</field>
	<field name="filename_full">.\grit/test/patch/objects/5d</field>
	<field name="filename">a862ffd84e42b687b65605788f4158f4610400</field>
	<field name="filename_full">.\grit/test/patch/objects/5d/a862ffd84e42b687b65605788f4158f4610400</field>
	<field name="filename">6f</field>
	<field name="filename_full">.\grit/test/patch/objects/6f</field>
	<field name="filename">3cad7a2f103336238fa22cc6d947525b16dfa8</field>
	<field name="filename_full">.\grit/test/patch/objects/6f/3cad7a2f103336238fa22cc6d947525b16dfa8</field>
	<field name="filename">72</field>
	<field name="filename_full">.\grit/test/patch/objects/72</field>
	<field name="filename">56d4ce5aa848032fc1e23d6b3254296de9e529</field>
	<field name="filename_full">.\grit/test/patch/objects/72/56d4ce5aa848032fc1e23d6b3254296de9e529</field>
	<field name="filename">89</field>
	<field name="filename_full">.\grit/test/patch/objects/89</field>
	<field name="filename">3adcd31e963b01dfbbcfe3ec58a008f0d81201</field>
	<field name="filename_full">.\grit/test/patch/objects/89/3adcd31e963b01dfbbcfe3ec58a008f0d81201</field>
	<field name="filename">c3</field>
	<field name="filename_full">.\grit/test/patch/objects/c3</field>
	<field name="filename">1db71f041e94f88e44b72f2634a810d4ec61c2</field>
	<field name="filename_full">.\grit/test/patch/objects/c3/1db71f041e94f88e44b72f2634a810d4ec61c2</field>
	<field name="filename">cf</field>
	<field name="filename_full">.\grit/test/patch/objects/cf</field>
	<field name="filename">75ecfce82fb2a8723f86b140980994f0065ecd</field>
	<field name="filename_full">.\grit/test/patch/objects/cf/75ecfce82fb2a8723f86b140980994f0065ecd</field>
	<field name="filename">e7</field>
	<field name="filename_full">.\grit/test/patch/objects/e7</field>
	<field name="filename">9c5e8f964493290a409888d5413a737e8e5dd5</field>
	<field name="filename_full">.\grit/test/patch/objects/e7/9c5e8f964493290a409888d5413a737e8e5dd5</field>
	<field name="filename">f2</field>
	<field name="filename_full">.\grit/test/patch/objects/f2</field>
	<field name="filename">52f9a68245f465d27b31fcdbf63ab55de58b06</field>
	<field name="filename_full">.\grit/test/patch/objects/f2/52f9a68245f465d27b31fcdbf63ab55de58b06</field>
	<field name="filename">f3</field>
	<field name="filename_full">.\grit/test/patch/objects/f3</field>
	<field name="filename">c031e78b368d1b9b03c3eb1b90d8a122277e67</field>
	<field name="filename_full">.\grit/test/patch/objects/f3/c031e78b368d1b9b03c3eb1b90d8a122277e67</field>
	<field name="filename">refs</field>
	<field name="filename_full">.\grit/test/patch/refs</field>
	<field name="filename">heads</field>
	<field name="filename_full">.\grit/test/patch/refs/heads</field>
	<field name="filename">bad</field>
	<field name="filename_full">.\grit/test/patch/refs/heads/bad</field>
	<field name="filename">good</field>
	<field name="filename_full">.\grit/test/patch/refs/heads/good</field>
	<field name="filename">master</field>
	<field name="filename_full">.\grit/test/patch/refs/heads/master</field>
</doc>
<doc>
	<field name="id">26</field>
	<field name="name">merb-core</field>
	<field name="description">Merb Core: All you need. None you don't.</field>
	<field name="owner">wycats</field>
	<field name="main_language">Ruby</field>
	<field name="created_at">2008-01-12T05:50:53Z</field>
	<field name="updated_at">2014-01-13T16:21:57Z</field>
	<field name="url">https://api.github.com/repos/wycats/merb-core</field>
	<field name="language">Ruby</field>
	<field name="language">JavaScript</field>
	<field name="branch">conditional_get</field>
	<field name="branch">dispatcher_fixes</field>
	<field name="branch">dispatcher_refactor</field>
	<field name="branch">djwonk/master</field>
	<field name="branch">experiments</field>
	<field name="branch">extlib</field>
	<field name="branch">forking_bootloader</field>
	<field name="branch">forking_runner</field>
	<field name="branch">local/yard-doc</field>
	<field name="branch">master</field>
	<field name="branch">new-sessions</field>
	<field name="branch">sprint</field>
	<field name="branch">wycats</field>
	<field name="branch">yard-doc</field>
	<field name="contributor">michaelklishin</field>
	<field name="contributor">wycats</field>
	<field name="contributor">fabien</field>
	<field name="contributor">ivey</field>
	<field name="contributor">benburkert</field>
	<field name="contributor">hassox</field>
	<field name="contributor">wayneeseguin</field>
	<field name="contributor">adelcambre</field>
	<field name="contributor">jnicklas</field>
	<field name="contributor">mtodd</field>
	<field name="contributor">dudleyf</field>
	<field name="contributor">wvl</field>
	<field name="contributor">daikini</field>
	<field name="contributor">lsegal</field>
	<field name="contributor">shayarnett</field>
	<field name="contributor">gabriel</field>
	<field name="contributor">jackdempsey</field>
	<field name="contributor">antarestrader</field>
	<field name="contributor">mlangenberg</field>
	<field name="contributor">wzph</field>
	<field name="contributor">mholub</field>
	<field name="contributor">tdreyno</field>
	<field name="contributor">techbelly</field>
	<field name="contributor">tohchye</field>
	<field name="contributor">lancecarlson</field>
	<field name="contributor">maseb</field>
	<field name="contributor">technicalpickles</field>
	<field name="contributor">tarvaina</field>
	<field name="contributor">dsiem</field>
	<field name="contributor">jherdman</field>
	<field name="commit_sha">91c1bdf8617ae9a73bb3d426b64eae81e7b103d1</field>
	<field name="commit_message">More deletions</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-29T20:31:08Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-29T20:31:08Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_file_name">status_codes.rb</field>
	<field name="commit_diff">@@ -1,92 +0,0 @@
-module Merb
-
-  module StatusCodes
-
-    STATUS_CODES = []
-
-    class Base
-      def self.status; nil end
-
-      class  self
-        alias :to_i :status
-        
-        def inherited(subclass)
-          STATUS_CODES  {
-            :child_class = subclass,
-            :child_name  = subclass.to_s.split('::').last,
-            :parent_name = self.to_s.split('::').last
-          }
-          # Note: Since inherited fires immediately after the subclass
-          # definition itself -- but before the definition of methods inside,
-          # we cannot set :status here.
-        end
-      end
-    end
-
-    # ===== 1xx
-    class Informational                Merb::StatusCodes::Base; end
-    class Continue                     Merb::StatusCodes::Informational; def self.status; 100 end end
-    class SwitchingProtocols           Merb::StatusCodes::Informational; def self.status; 101 end end
-
-    # ===== 2xx
-    class Successful                   Merb::StatusCodes::Base; end
-    class OK                           Merb::StatusCodes::Successful; def self.status; 200 end end
-    class Created                      Merb::StatusCodes::Successful; def self.status; 201 end end
-    class Accepted                     Merb::StatusCodes::Successful; def self.status; 202 end end
-    class NonAuthoritativeInformation  Merb::StatusCodes::Successful; def self.status; 203 end end
-    class NoContent                    Merb::StatusCodes::Successful; def self.status; 204 end end
-    class ResetContent                 Merb::StatusCodes::Successful; def self.status; 205 end end
-    class PartialContent               Merb::StatusCodes::Successful; def self.status; 206 end end
-
-    # ===== 3xx
-    class Redirection                  Merb::StatusCodes::Base; end
-    class MultipleChoices              Merb::StatusCodes::Redirection; def self.status; 300 end end
-    class MovedPermanently             Merb::StatusCodes::Redirection; def self.status; 301 end end
-    class Found                        Merb::StatusCodes::Redirection; def self.status; 302 end end # HTTP 1.1
-    class MovedTemporarily             Merb::StatusCodes::Redirection; def self.status; 302 end end # HTTP 1.0
-    class SeeOther                     Merb::StatusCodes::Redirection; def self.status; 303 end end
-    class NotModified                  Merb::StatusCodes::Redirection; def self.status; 304 end end
-    class UseProxy                     Merb::StatusCodes::Redirection; def self.status; 305 end end
-    class TemporaryRedirect            Merb::StatusCodes::Redirection; def self.status; 307 end end
-
-    # ===== 4xx
-    class ClientError                  Merb::StatusCodes::Base; end
-    class BadRequest                   Merb::StatusCodes::ClientError; def self.status; 400 end end
-    class MultiPartParseError          Merb::StatusCodes::BadRequest; end
-    class Unauthorized                 Merb::StatusCodes::ClientError; def self.status; 401 end end
-    class PaymentRequired              Merb::StatusCodes::ClientError; def self.status; 402 end end
-    class Forbidden                    Merb::StatusCodes::ClientError; def self.status; 403 end end
-    class NotFound                     Merb::StatusCodes::ClientError; def self.status; 404 end end
-    class ActionNotFound               Merb::StatusCodes::NotFound; end
-    class TemplateNotFound             Merb::StatusCodes::NotFound; end
-    class LayoutNotFound               Merb::StatusCodes::NotFound; end
-    class MethodNotAllowed             Merb::StatusCodes::ClientError; def self.status; 405 end end
-    class NotAcceptable                Merb::StatusCodes::ClientError; def self.status; 406 end end
-    class ProxyAuthenticationRequired  Merb::StatusCodes::ClientError; def self.status; 407 end end
-    class RequestTimeout               Merb::StatusCodes::ClientError; def self.status; 408 end end
-    class Conflict                     Merb::StatusCodes::ClientError; def self.status; 409 end end
-    class Gone                         Merb::StatusCodes::ClientError; def self.status; 410 end end
-    class LengthRequired               Merb::StatusCodes::ClientError; def self.status; 411 end end
-    class PreconditionFailed           Merb::StatusCodes::ClientError; def self.status; 412 end end
-    class RequestEntityTooLarge        Merb::StatusCodes::ClientError; def self.status; 413 end end
-    class RequestURITooLarge           Merb::StatusCodes::ClientError; def self.status; 414 end end
-    class UnsupportedMediaType         Merb::StatusCodes::ClientError; def self.status; 415 end end
-    class RequestRangeNotSatisfiable   Merb::StatusCodes::ClientError; def self.status; 416 end end
-    class ExpectationFailed            Merb::StatusCodes::ClientError; def self.status; 417 end end
-
-    # ===== 5xx
-    class ServerError                  Merb::StatusCodes::Base; end
-    class InternalServerError          Merb::StatusCodes::ServerError; def self.status; 500 end end
-    class NotImplemented               Merb::StatusCodes::ServerError; def self.status; 501 end end
-    class BadGateway                   Merb::StatusCodes::ServerError; def self.status; 502 end end
-    class ServiceUnavailable           Merb::StatusCodes::ServerError; def self.status; 503 end end
-    class GatewayTimeout               Merb::StatusCodes::ServerError; def self.status; 504 end end
-    class HTTPVersionNotSupported      Merb::StatusCodes::ServerError; def self.status; 505 end end
-
-    STATUS_CODES.each do |item|
-      item[:status] = item[:child_class].status
-    end
-
-  end # StatusCodes
-  
-end # Merb</field>
	<field name="commit_sha">b9fee4b1f253ff64d5afeddc020476a620452489</field>
	<field name="commit_message">Notice of new location</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-29T20:28:46Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-29T20:30:01Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_file_name">README</field>
	<field name="commit_diff">@@ -0,0 +1 @@
+merb-core and merb-more have been merged into http://github.com/wycats/merb
\ No newline at end of file</field>
	<field name="commit_sha">9191176c4c189bb793688dcce1f6075182c6ecc0</field>
	<field name="commit_message">Removes merb-core</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-29T20:27:37Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-29T20:30:01Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_sha">5078b8bf11f23b1f4e42c701438c37c6140fd93e</field>
	<field name="commit_message">Fixed warning about STATUS_CODES due to 2 requires.

Signed-off-by: Michael S. Klishin michael@novemberain.com</field>
	<field name="commit_author_name">David James</field>
	<field name="commit_author_date">2008-10-13T01:14:07Z</field>
	<field name="commit_author_email">djwonk@collectiveinsight.net</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-13T02:31:06Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">autoload.rb</field>
	<field name="commit_diff">@@ -29,7 +29,3 @@ module Merb
 module Merb
   module InlineTemplates; end
 end
-
-# StatusCodes does not autoload properly if placed with the above autoload
-# statements.  ControllerExceptions depends upon StatusCodes loading first.
-require "merb-core/controller/status_codes"</field>
	<field name="commit_file_name">status_codes.rb</field>
	<field name="commit_diff">@@ -1,5 +1,5 @@
 module Merb
-    
+
   module StatusCodes
 
     STATUS_CODES = []
@@ -82,7 +82,7 @@ class BadGateway                   Merb::StatusCodes::ServerError; def self.sta
     class ServiceUnavailable           Merb::StatusCodes::ServerError; def self.status; 503 end end
     class GatewayTimeout               Merb::StatusCodes::ServerError; def self.status; 504 end end
     class HTTPVersionNotSupported      Merb::StatusCodes::ServerError; def self.status; 505 end end
-    
+
     STATUS_CODES.each do |item|
       item[:status] = item[:child_class].status
     end</field>
	<field name="commit_sha">c122ec92e2defdddb6ed1fc6b317990696f74b45</field>
	<field name="commit_message">Use pointers to frozen strings instead of creating new objects on every request (does not make sense everywhere though).</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-13T01:09:12Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-13T01:10:06Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">constants.rb</field>
	<field name="commit_diff">@@ -25,9 +25,16 @@ module Const
     COOKIE_SPLIT             = /[;,] */n.freeze
     COOKIE_REGEXP            = /\s*(.+)=(.*)\s*/.freeze
     COOKIE_EXPIRED_TIME      = Time.at(0).freeze
+    XML_HTTP_REQUEST_REGEXP  = /XMLHttpRequest/i.freeze
+    TRUSTED_IP_REGEXP        = /^unknown$|^(127|10|172\.16|192\.168)\./i.freeze
     HOUR                     = 60 * 60
     DAY                      = HOUR * 24
     WEEK                     = DAY * 7
+    ON                       = "on".freeze
+    COMMA                    = ','.freeze
+    DOT                      = '.'.freeze
+    QUESTION_MARK            = '?'.freeze
+    AMPERSAND                = '&'.freeze    
     MULTIPART_REGEXP         = /\Amultipart\/form-data.*boundary=\"?([^\";,]+)/n.freeze
     HTTP_COOKIE              = 'HTTP_COOKIE'.freeze
     QUERY_STRING             = 'QUERY_STRING'.freeze
@@ -44,24 +51,47 @@ module Const
     GET                      = "GET".freeze
     POST                     = "POST".freeze
     HEAD                     = "HEAD".freeze
+    HTTP                     = "http".freeze
+    HTTPS                    = "https".freeze
+    UPCASE_HTTPS             = "HTTPS".freeze
     CONTENT_LENGTH           = "CONTENT_LENGTH".freeze
+    HTTP_ACCEPT_ENCODING     = "HTTP_ACCEPT_ENCODING".freeze
+    HTTP_ACCEPT_LANGUAGE     = "HTTP_ACCEPT_LANGUAGE".freeze
+    HTTP_ACCEPT_CHARSET      = "HTTP_ACCEPT_CHARSET".freeze
+    HTTP_CACHE_CONTROL       = "HTTP_CACHE_CONTROL".freeze    
     HTTP_X_FORWARDED_FOR     = "HTTP_X_FORWARDED_FOR".freeze
     HTTP_IF_MODIFIED_SINCE   = "HTTP_IF_MODIFIED_SINCE".freeze
+    HTTP_X_FORWARDED_HOST    = "HTTP_X_FORWARDED_HOST".freeze
+    HTTP_X_FORWARDED_PROTO   = "HTTP_X_FORWARDED_PROTO".freeze
+    HTTP_X_REQUESTED_WITH    = "HTTP_X_REQUESTED_WITH".freeze
     HTTP_IF_NONE_MATCH       = "HTTP_IF_NONE_MATCH".freeze
     HTTP_CONTENT_TYPE        = "HTTP_CONTENT_TYPE".freeze
     HTTP_CONTENT_LENGTH      = "HTTP_CONTENT_LENGTH".freeze
+    HTTP_REFERER             = "HTTP_REFERER".freeze
+    HTTP_USER_AGENT          = "HTTP_USER_AGENT".freeze
+    HTTP_CLIENT_IP           = "HTTP_CLIENT_IP".freeze
+    HTTP_CONNECTION          = "HTTP_CONNECTION".freeze
+    HTTP_VERSION             = "HTTP_VERSION".freeze
+    GATEWAY_INTERFACE        = "GATEWAY_INTERFACE".freeze
     UPLOAD_ID                = "upload_id".freeze
     PATH_INFO                = "PATH_INFO".freeze
     SCRIPT_NAME              = "SCRIPT_NAME".freeze
+    SERVER_NAME              = "SERVER_NAME".freeze
+    SERVER_PORT              = "SERVER_PORT".freeze
+    SERVER_SOFTWARE          = "SERVER_SOFTWARE".freeze
     REQUEST_URI              = "REQUEST_URI".freeze
     REQUEST_PATH             = "REQUEST_PATH".freeze
     REQUEST_METHOD           = "REQUEST_METHOD".freeze
     REMOTE_ADDR              = "REMOTE_ADDR".freeze
+    HTTP_HOST                = "HTTP_HOST".freeze
+    HTTP_ACCEPT              = "HTTP_ACCEPT".freeze
+    HTTP_KEEP_ALIVE          = "HTTP_KEEP_ALIVE".freeze
     BREAK_TAG                = "br/".freeze
     EMPTY_STRING             = "".freeze
     NEWLINE                  = "\n".freeze
     DOUBLE_NEWLINE           = "\n\n".freeze
     LOCATION                 = "Location".freeze
     TEXT_SLASH_HTML          = "text/html".freeze
+    RACK_INPUT               = 'rack.input'.freeze
   end
 end</field>
	<field name="commit_file_name">request.rb</field>
	<field name="commit_diff">@@ -33,7 +33,8 @@ class Request
     # @api private
     def initialize(rack_env)
       @env  = rack_env
-      @body = rack_env['rack.input']
+      # Merb::Const::RACK_INPUT = 'rack.input'.freeze
+      @body = rack_env[Merb::Const::RACK_INPUT]
       @route_params = {}
     end
     
@@ -53,7 +54,7 @@ def controller
           "segment to route definition?\nHere is what's specified:\n" + 
           route.inspect
       end
-      path = [params[:namespace], params[:controller]].compact.join("/")
+      path = [params[:namespace], params[:controller]].compact.join(Merb::Const::SLASH)
       controller = path.snake_case.to_const_string
       
       begin
@@ -79,7 +80,8 @@ def controller
     # @api public
     def method
       @method ||= begin
-        request_method = @env['REQUEST_METHOD'].downcase.to_sym
+        # Merb::Const::REQUEST_METHOD = "REQUEST_METHOD".freeze
+        request_method = @env[Merb::Const::REQUEST_METHOD].downcase.to_sym
         case request_method
         when :get, :head, :put, :delete, :options
           request_method
@@ -91,7 +93,7 @@ def method
           m.downcase! if m
           METHODS.include?(m) ? m.to_sym : :post
         else
-          raise "Unknown REQUEST_METHOD: #{@env['REQUEST_METHOD']}"
+          raise "Unknown REQUEST_METHOD: #{@env[Merb::Const::REQUEST_METHOD]}"
         end
       end
     end
@@ -179,7 +181,7 @@ def handled?
     # 
     # @api private
     def query_params
-      @query_params ||= self.class.query_parse(query_string || '')
+      @query_params ||= self.class.query_parse(query_string || Merb::Const::EMPTY_STRING)
     end
     
     # Parameters passed in the body of the request. Ajax calls from
@@ -322,7 +324,9 @@ def raw_post
     # 
     # @api public
     def xml_http_request?
-      not /XMLHttpRequest/i.match(@env['HTTP_X_REQUESTED_WITH']).nil?
+      # Merb::Const::XML_HTTP_REQUEST_REGEXP = /XMLHttpRequest/i.freeze
+      # Merb::Const::HTTP_X_REQUESTED_WITH   = "HTTP_X_REQUESTED_WITH".freeze
+      !Merb::Const::XML_HTTP_REQUEST_REGEXP.match(@env[Merb::Const::HTTP_X_REQUESTED_WITH]).nil?
     end
     alias xhr? :xml_http_request?
     alias ajax? :xml_http_request?
@@ -332,16 +336,21 @@ def xml_http_request?
     # 
     # @api public
     def remote_ip
-      return @env['HTTP_CLIENT_IP'] if @env.include?('HTTP_CLIENT_IP')
+      # Merb::Const::HTTP_CLIENT_IP = "HTTP_CLIENT_IP".freeze
+      return @env[Merb::Const::HTTP_CLIENT_IP] if @env.include?(Merb::Const::HTTP_CLIENT_IP)
       
+      # Merb::Const::HTTP_X_FORWARDED_FOR = "HTTP_X_FORWARDED_FOR".freeze
       if @env.include?(Merb::Const::HTTP_X_FORWARDED_FOR) then
-        remote_ips = @env[Merb::Const::HTTP_X_FORWARDED_FOR].split(',').reject do |ip|
-          ip =~ /^unknown$|^(127|10|172\.16|192\.168)\./i
+        # Merb::Const::COMMA = ",".freeze
+        remote_ips = @env[Merb::Const::HTTP_X_FORWARDED_FOR].split(Merb::Const::COMMA).reject do |ip|
+          # Merb::Const::TRUSTED_IP_REGEXP = /^unknown$|^(127|10|172\.16|192\.168)\./i.freeze
+          ip =~ Merb::Const::TRUSTED_IP_REGEXP
         end
         
         return remote_ips.first.strip unless remote_ips.empty?
       end
       
+      # Merb::Const::REMOTE_ADDR = "REMOTE_ADDR".freeze
       return @env[Merb::Const::REMOTE_ADDR]
     end
     
@@ -352,7 +361,9 @@ def remote_ip
     # 
     # @api public
     def protocol
-      ssl? ? 'https' : 'http'
+      # Merb::Const::HTTP         = 'http'.freeze
+      # Merb::Const::HTTPS        = 'https'.freeze
+      ssl? ? Merb::Const::HTTPS : Merb::Const::HTTP
     end
     
     # ==== Returns
@@ -360,7 +371,11 @@ def protocol
     # 
     # @api public
     def ssl?
-      @env['HTTPS'] == 'on' || @env['HTTP_X_FORWARDED_PROTO'] == 'https'
+      # Merb::Const::ON                     = 'on'.freeze
+      # Merb::Const::HTTPS                  = 'https'.freeze
+      # Merb::Const::UPCASE_HTTPS           = 'HTTPS'.freeze
+      # Merb::Const::HTTP_X_FORWARDED_PROTO = 'HTTP_X_FORWARDED_PROTO'.freeze
+      @env[Merb::Const::UPCASE_HTTPS] == Merb::Const::ON || @env[Merb::Const::HTTP_X_FORWARDED_PROTO] == Merb::Const::HTTPS
     end
     
     # ==== Returns
@@ -368,7 +383,7 @@ def ssl?
     # 
     # @api public
     def referer
-      @env['HTTP_REFERER']
+      @env[Merb::Const::HTTP_REFERER]
     end
     
     # ==== Returns
@@ -384,7 +399,7 @@ def full_uri
     # 
     # @api public
     def uri
-      @env['REQUEST_PATH'] || @env['REQUEST_URI'] || path_info
+      @env[Merb::Const::REQUEST_PATH] || @env[Merb::Const::REQUEST_URI] || path_info
     end
     
     # ==== Returns
@@ -392,7 +407,8 @@ def uri
     # 
     # @api public
     def user_agent
-      @env['HTTP_USER_AGENT']
+      # Merb::Const::HTTP_USER_AGENT = "HTTP_USER_AGENT".freeze
+      @env[Merb::Const::HTTP_USER_AGENT]
     end
     
     # ==== Returns
@@ -400,7 +416,8 @@ def user_agent
     # 
     # @api public
     def server_name
-      @env['SERVER_NAME']
+      # Merb::Const::SERVER_NAME = "SERVER_NAME".freeze
+      @env[Merb::Const::SERVER_NAME]
     end
     
     # ==== Returns
@@ -408,7 +425,8 @@ def server_name
     # 
     # @api private
     def accept_encoding
-      @env['HTTP_ACCEPT_ENCODING']
+      # Merb::Const::HTTP_ACCEPT_ENCODING = "HTTP_ACCEPT_ENCODING".freeze
+      @env[Merb::Const::HTTP_ACCEPT_ENCODING]
     end
     
     # ==== Returns
@@ -416,7 +434,8 @@ def accept_encoding
     # 
     # @api public
     def script_name
-      @env['SCRIPT_NAME']
+      # Merb::Const::SCRIPT_NAME = "SCRIPT_NAME".freeze
+      @env[Merb::Const::SCRIPT_NAME]
     end
     
     # ==== Returns
@@ -424,7 +443,8 @@ def script_name
     # 
     # @api public
     def cache_control
-      @env['HTTP_CACHE_CONTROL']
+      # Merb::Const::HTTP_CACHE_CONTROL = "HTTP_CACHE_CONTROL".freeze
+      @env[Merb::Const::HTTP_CACHE_CONTROL]
     end
     
     # ==== Returns
@@ -432,7 +452,8 @@ def cache_control
     # 
     # @api public
     def accept_language
-      @env['HTTP_ACCEPT_LANGUAGE']
+      # Merb::Const::HTTP_ACCEPT_LANGUAGE = "HTTP_ACCEPT_LANGUAGE".freeze
+      @env[Merb::Const::HTTP_ACCEPT_LANGUAGE]
     end
     
     # ==== Returns
@@ -440,7 +461,8 @@ def accept_language
     # 
     # @api public
     def server_software
-      @env['SERVER_SOFTWARE']
+      # Merb::Const::SERVER_SOFTWARE = "SERVER_SOFTWARE".freeze
+      @env[Merb::Const::SERVER_SOFTWARE]
     end
     
     # ==== Returns
@@ -448,7 +470,7 @@ def server_software
     # 
     # @api public
     def keep_alive
-      @env['HTTP_KEEP_ALIVE']
+      @env[Merb::Const::HTTP_KEEP_ALIVE]
     end
     
     # ==== Returns
@@ -456,7 +478,7 @@ def keep_alive
     # 
     # @api public
     def accept_charset
-      @env['HTTP_ACCEPT_CHARSET']
+      @env[Merb::Const::HTTP_ACCEPT_CHARSET]
     end
     
     # ==== Returns
@@ -464,7 +486,7 @@ def accept_charset
     # 
     # @api private
     def version
-      @env['HTTP_VERSION']
+      @env[Merb::Const::HTTP_VERSION]
     end
     
     # ==== Returns
@@ -472,7 +494,7 @@ def version
     # 
     # @api public
     def gateway
-      @env['GATEWAY_INTERFACE']
+      @env[Merb::Const::GATEWAY_INTERFACE]
     end
     
     # ==== Returns
@@ -480,7 +502,7 @@ def gateway
     # 
     # @api private
     def accept
-      @env['HTTP_ACCEPT'].blank? ? "*/*" : @env['HTTP_ACCEPT']
+      @env[Merb::Const::HTTP_ACCEPT].blank? ? "*/*" : @env[Merb::Const::HTTP_ACCEPT]
     end
     
     # ==== Returns
@@ -488,7 +510,7 @@ def accept
     # 
     # @api private
     def connection
-      @env['HTTP_CONNECTION']
+      @env[Merb::Const::HTTP_CONNECTION]
     end
     
     # ==== Returns
@@ -496,7 +518,7 @@ def connection
     # 
     # @api private
     def query_string
-      @env['QUERY_STRING']  
+      @env[Merb::Const::QUERY_STRING]  
     end
     
     # ==== Returns
@@ -504,7 +526,7 @@ def query_string
     # 
     # @api private
     def content_type
-      @env['CONTENT_TYPE']
+      @env[Merb::Const::UPCASE_CONTENT_TYPE]
     end
     
     # ==== Returns
@@ -522,7 +544,7 @@ def content_length
     # 
     # @api public
     def path
-      path = (uri.empty? ? '/' : uri.split('?').first).squeeze("/")
+      path = (uri.empty? ? Merb::Const::SLASH : uri.split(Merb::Const::QUESTION_MARK).first).squeeze(Merb::Const::SLASH)
       path = path[0..-2] if (path[-1] == ?/) && path.size  1
       path
     end
@@ -532,7 +554,7 @@ def path
     # 
     # @api public
     def path_info
-      @path_info ||= self.class.unescape(@env['PATH_INFO'])
+      @path_info ||= self.class.unescape(@env[Merb::Const::PATH_INFO])
     end
     
     # ==== Returns
@@ -540,7 +562,7 @@ def path_info
     # 
     # @api public
     def port
-      @env['SERVER_PORT'].to_i
+      @env[Merb::Const::SERVER_PORT].to_i
     end
     
     # ==== Returns
@@ -548,7 +570,7 @@ def port
     # 
     # @api public
     def host
-      @env['HTTP_X_FORWARDED_HOST'] || @env['HTTP_HOST'] 
+      @env[Merb::Const::HTTP_X_FORWARDED_HOST] || @env[Merb::Const::HTTP_HOST] 
     end
     
     # ==== Parameters
@@ -561,7 +583,7 @@ def host
     # 
     # @api public
     def subdomains(tld_length = 1)
-      parts = host.split('.')
+      parts = host.split(Merb::Const::DOT)
       parts[0..-(tld_length+2)]
     end
     
@@ -575,7 +597,7 @@ def subdomains(tld_length = 1)
     # 
     # @api public
     def domain(tld_length = 1)
-      host.split('.').last(1 + tld_length).join('.').sub(/:\d+$/,'')
+      host.split(Merb::Const::DOT).last(1 + tld_length).join(Merb::Const::DOT).sub(/:\d+$/, Merb::Const::EMPTY_STRING)
     end
     
     # ==== Returns</field>
	<field name="commit_file_name">mongrel.rb</field>
	<field name="commit_diff">@@ -34,7 +34,7 @@ class Mongrel  ::Mongrel::HttpHandler
         def self.run(app, options={})
           @server = ::Mongrel::HttpServer.new(options[:Host] || '0.0.0.0',
                                              options[:Port] || 8080)
-          @server.register('/', ::Merb::Rack::Handler::Mongrel.new(app))
+          @server.register(Merb::Const::SLASH, ::Merb::Rack::Handler::Mongrel.new(app))
           yield @server  if block_given?
           @server.run.join
         end
@@ -60,16 +60,17 @@ def process(request, response)
           env[Merb::Const::SCRIPT_NAME] = Merb::Const::EMPTY_STRING if env[Merb::Const::SCRIPT_NAME] == Merb::Const::SLASH
   
           env.update({"rack.version" = [0,1],
-                       "rack.input" = request.body || StringIO.new(""),
+                       Merb::Const::RACK_INPUT = request.body || StringIO.new(""),
                        "rack.errors" = STDERR,
   
                        "rack.multithread" = true,
                        "rack.multiprocess" = false, # ???
                        "rack.run_once" = false,
-  
-                       "rack.url_scheme" = "http"
+                        
+                       # Merb::Const::HTTP = "http".freeze
+                       "rack.url_scheme" = Merb::Const::HTTP
                      })
-          env[Merb::Const::QUERY_STRING] ||= ""
+          env[Merb::Const::QUERY_STRING] ||= Merb::Const::EMPTY_STRING
           env.delete Merb::Const::PATH_INFO  if env[Merb::Const::PATH_INFO] == Merb::Const::EMPTY_STRING
   
           status, headers, body = @app.call(env)</field>
	<field name="commit_sha">72f7c7ef3a2ce6a0a0f409b2092e64da7d0795cf</field>
	<field name="commit_message">Added Merb::Router.extensions as an official API.

Merb::Router.extensions is now the official way to add functionality
to the router.</field>
	<field name="commit_author_name">Carl Lerche</field>
	<field name="commit_author_date">2008-10-12T23:15:22Z</field>
	<field name="commit_author_email">carllerche@mac.com</field>
	<field name="commit_committer_name">Carl Lerche</field>
	<field name="commit_committer_date">2008-10-12T23:22:08Z</field>
	<field name="commit_committer_email">carllerche@mac.com</field>
	<field name="commit_file_name">router.rb</field>
	<field name="commit_diff">@@ -236,8 +236,40 @@ def resource(*args)
         route.generate(params, defaults)
       end
       
-      private
-      
+      # Add functionality to the router. This can be in the form of
+      # including a new module or directly defining new methods.
+      #
+      # ==== Parameters
+      # &blockBlock::
+      #   A block of code used to extend the route builder with. This
+      #   can be including a module or directly defining some new methods
+      #   that should be available to building routes.
+      #
+      # ==== Example
+      # Merb::Router.extensions do
+      #   def domain(name, domain, options={}, &block)
+      #     match(:domain = domain).namespace(name, :path = nil, &block)
+      #   end
+      # end
+      #
+      # In this case, a method 'domain' will be available to the route builder
+      # which will create namespaces around domains instead of path prefixes.
+      #
+      # This can then be used as follows.
+      #
+      # Merb::Router.prepare do
+      #   domain(:admin, "my-admin.com") do
+      #     # ... routes come here ...
+      #   end
+      # end
+      # ---
+      # @api public
+      def extensions(&block)
+        Router::Behavior.class_eval(&block)
+      end
+
+    private
+    
       # Compiles the routes and creates the +match+ method.
       # 
       # @api private</field>
	<field name="commit_file_name">resources.rb</field>
	<field name="commit_diff">@@ -272,11 +272,7 @@ def resource_block(builders, &block)
       end
 
     end # Resources
-    
-    class Behavior
-      include Resources
-    end
-    
+
     # Adding the collection and member methods to behavior
     class ResourceBehavior  Behavior #:nodoc:
       
@@ -301,5 +297,9 @@ def member(action, options = {})
       end
       
     end
+    
+    class Behavior
+      include Resources
+    end
   end
 end
\ No newline at end of file</field>
	<field name="commit_file_name">router_spec.rb</field>
	<field name="commit_diff">@@ -145,7 +145,7 @@
     end
     
     it "should not be able to match routes anymore" do
-      lambda { route_for("/users") }
+      lambda { route_for("/users") }.should raise_error(Merb::Router::NotCompiledError)
     end
     
   end
@@ -157,5 +157,21 @@
     end
 
   end
+  
+  describe "#extensions" do
+    it "should be able to extend the router" do
+      Merb::Router.extensions do
+        def hello_world
+          match("/hello").to(:controller = "world")
+        end
+      end
+      
+      Merb::Router.prepare do
+        hello_world
+      end
+      
+      route_for("/hello").should have_route(:controller = "world")
+    end
+  end
 
 end
\ No newline at end of file</field>
	<field name="commit_sha">209ca502a6e44f3115042f90b90caec6f82580ed</field>
	<field name="commit_message">Fixes a minor problem with has_tag/with_tag.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T18:24:36Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T18:24:36Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">view_matchers.rb</field>
	<field name="commit_diff">@@ -278,6 +278,8 @@ def attributes_for_error
     def with_tag(name, attrs={})
       @inner_has_tag = HasTag.new(name, attrs)
       @inner_has_tag.outer_has_tag = self
+      
+      @inner_has_tag
     end
   end
 </field>
	<field name="commit_sha">11d19c269a029403039b16866aaa8d6bb1a366ff</field>
	<field name="commit_message">Use frozen constants on the 'hot path' if possible.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T16:23:39Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T16:23:39Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">constants.rb</field>
	<field name="commit_diff">@@ -48,16 +48,20 @@ module Const
     HTTP_X_FORWARDED_FOR     = "HTTP_X_FORWARDED_FOR".freeze
     HTTP_IF_MODIFIED_SINCE   = "HTTP_IF_MODIFIED_SINCE".freeze
     HTTP_IF_NONE_MATCH       = "HTTP_IF_NONE_MATCH".freeze
+    HTTP_CONTENT_TYPE        = "HTTP_CONTENT_TYPE".freeze
+    HTTP_CONTENT_LENGTH      = "HTTP_CONTENT_LENGTH".freeze
     UPLOAD_ID                = "upload_id".freeze
     PATH_INFO                = "PATH_INFO".freeze
     SCRIPT_NAME              = "SCRIPT_NAME".freeze
     REQUEST_URI              = "REQUEST_URI".freeze
     REQUEST_PATH             = "REQUEST_PATH".freeze
+    REQUEST_METHOD           = "REQUEST_METHOD".freeze
     REMOTE_ADDR              = "REMOTE_ADDR".freeze
     BREAK_TAG                = "br/".freeze
     EMPTY_STRING             = "".freeze
     NEWLINE                  = "\n".freeze
     DOUBLE_NEWLINE           = "\n\n".freeze
     LOCATION                 = "Location".freeze
+    TEXT_SLASH_HTML          = "text/html".freeze
   end
 end</field>
	<field name="commit_file_name">application.rb</field>
	<field name="commit_diff">@@ -16,7 +16,7 @@ def call(env)
         begin
           rack_response = ::Merb::Dispatcher.handle(Merb::Request.new(env))
         rescue Object = e
-          return [500, {Merb::Const::CONTENT_TYPE = "text/html"}, e.message + Merb::Const::BREAK_TAG + e.backtrace.join(Merb::Const::BREAK_TAG)]
+          return [500, {Merb::Const::CONTENT_TYPE = Merb::Const::TEXT_SLASH_HTML}, e.message + Merb::Const::BREAK_TAG + e.backtrace.join(Merb::Const::BREAK_TAG)]
         end
         Merb.logger.info Merb::Const::DOUBLE_NEWLINE
         Merb.logger.flush</field>
	<field name="commit_file_name">mongrel.rb</field>
	<field name="commit_diff">@@ -54,10 +54,10 @@ def initialize(app)
         # responseHTTPResponse:: The response object to write response to.
         def process(request, response)
           env = {}.replace(request.params)
-          env.delete "HTTP_CONTENT_TYPE"
-          env.delete "HTTP_CONTENT_LENGTH"
+          env.delete Merb::Const::HTTP_CONTENT_TYPE
+          env.delete Merb::Const::HTTP_CONTENT_LENGTH
   
-          env["SCRIPT_NAME"] = ""  if env["SCRIPT_NAME"] == "/"
+          env[Merb::Const::SCRIPT_NAME] = Merb::Const::EMPTY_STRING if env[Merb::Const::SCRIPT_NAME] == Merb::Const::SLASH
   
           env.update({"rack.version" = [0,1],
                        "rack.input" = request.body || StringIO.new(""),
@@ -69,8 +69,8 @@ def process(request, response)
   
                        "rack.url_scheme" = "http"
                      })
-          env["QUERY_STRING"] ||= ""
-          env.delete "PATH_INFO"  if env["PATH_INFO"] == ""
+          env[Merb::Const::QUERY_STRING] ||= ""
+          env.delete Merb::Const::PATH_INFO  if env[Merb::Const::PATH_INFO] == Merb::Const::EMPTY_STRING
   
           status, headers, body = @app.call(env)
   
@@ -93,4 +93,4 @@ def process(request, response)
       end
     end
   end
-end
\ No newline at end of file
+end</field>
	<field name="commit_file_name">conditional_get.rb</field>
	<field name="commit_diff">@@ -7,7 +7,7 @@ def call(env)
 
         if document_not_modified?(env, headers)
           status = 304
-          body = ""
+          body = Merb::Const::EMPTY_STRING
           # set Date header using RFC1123 date format as specified by HTTP
           # RFC2616 section 3.3.1.
         end</field>
	<field name="commit_file_name">path_prefix.rb</field>
	<field name="commit_diff">@@ -20,12 +20,12 @@ def call(env)
       def strip_path_prefix(env)
         ['PATH_INFO', 'REQUEST_URI'].each do |path_key|
           if env[path_key] =~ @path_prefix
-            env[path_key].sub!(@path_prefix, '')
-            env[path_key] = '/' if env[path_key].empty?
+            env[path_key].sub!(@path_prefix, Merb::Const::EMPTY_STRING)
+            env[path_key] = Merb::Const::SLASH if env[path_key].empty?
           end
         end
       end
       
     end
   end
-end
\ No newline at end of file
+end</field>
	<field name="commit_file_name">static.rb</field>
	<field name="commit_diff">@@ -8,16 +8,20 @@ def initialize(app,directory)
       end
       
       def call(env)        
-        path = env['PATH_INFO'] ? env['PATH_INFO'].chomp('/') : ""
+        path = if env[Merb::Const::PATH_INFO]
+                 env[Merb::Const::PATH_INFO].chomp(Merb::Const::SLASH)
+               else
+                 Merb::Const::EMPTY_STRING
+               end
         cached_path = (path.empty? ? 'index' : path) + '.html'
         
-        if file_exist?(path) && env['REQUEST_METHOD'] =~ /GET|HEAD/ # Serve the file if it's there and the request method is GET or HEAD
+        if file_exist?(path) && env[Merb::Const::REQUEST_METHOD] =~ /GET|HEAD/ # Serve the file if it's there and the request method is GET or HEAD
           serve_static(env)
-        elsif file_exist?(cached_path) && env['REQUEST_METHOD'] =~ /GET|HEAD/ # Serve the page cache if it's there and the request method is GET or HEAD
-          env['PATH_INFO'] = cached_path
+        elsif file_exist?(cached_path) && env[Merb::Const::REQUEST_METHOD] =~ /GET|HEAD/ # Serve the page cache if it's there and the request method is GET or HEAD
+          env[Merb::Const::PATH_INFO] = cached_path
           serve_static(env)
         elsif path =~ /favicon\.ico/
-          return [404, {"Content-Type"="text/html"}, "404 Not Found."]
+          return [404, { Merb::Const::CONTENT_TYPE = Merb::Const::TEXT_SLASH_HTML }, "404 Not Found."]
         else
           @app.call(env)
         end
@@ -36,10 +40,10 @@ def file_exist?(path)
         # ==== Parameters
         # envHash:: Environment variables to pass on to the server.
         def serve_static(env)
-          env["PATH_INFO"] = ::Merb::Request.unescape(env["PATH_INFO"])        
+          env[Merb::Const::PATH_INFO] = ::Merb::Request.unescape(env[Merb::Const::PATH_INFO])
           @static_server.call(env)
         end
       
     end
   end
-end
\ No newline at end of file
+end</field>
	<field name="commit_sha">ee43bd5f870bb9ad822bdade58cd970fc088b975</field>
	<field name="commit_message">Resolved conflict, added a note on metaprogramming use in -core. Sometimes it is appropriate.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T15:36:59Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T15:36:59Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">autoload.rb</field>
	<field name="commit_diff">@@ -29,3 +29,7 @@ module Merb
 module Merb
   module InlineTemplates; end
 end
+
+# StatusCodes does not autoload properly if placed with the above autoload
+# statements.  ControllerExceptions depends upon StatusCodes loading first.
+require "merb-core/controller/status_codes"</field>
	<field name="commit_file_name">exceptions.rb</field>
	<field name="commit_diff">@@ -1,3 +1,7 @@
+# We need to guarantee that status_codes.rb loads first because
+# we are going to borrow the StatusCodes from it.
+require File.join(File.dirname(__FILE__), 'status_codes')
+
 class Exception
   # Returns the action_name that will be invoked on your Exceptions controller when this
   # exception is raised. Override this method to force a different action to be invoked.
@@ -8,7 +12,7 @@ class Exception
   # 
   # @api public
   # @overridable
-  def action_name() self.class.action_name end
+  def action_name; self.class.action_name end
   
   
   # ==== Returns
@@ -54,6 +58,7 @@ def self.status
 end
 
 module Merb
+  
   # ControllerExceptions are a way of simplifying controller code by placing
   # exception logic back into the MVC pattern.
   #
@@ -62,9 +67,8 @@ module Merb
   # the error in a friendly manor.
   #
   # For example you might have an action in your app that raises NotFound
-  # if a resource was not available
+  # if a resource was not available:
   #
-
   #   def show
   #     product = Product.find(params[:id])
   #     raise NotFound if product.nil?
@@ -75,7 +79,6 @@ module Merb
   # Exceptions controller which might look something like:
   #
   # class Exceptions  Application
-
   #   def not_found
   #     render :layout = :none
   #   end
@@ -88,26 +91,25 @@ module Merb
   # with them which is sent to the browser when the action is rendered.
   #
   # Note: If you do not specifiy how to handle raised ControllerExceptions 
-  # or an unhandlable exception occurs within your customised exception action
+  # or an unhandlable exception occurs within your customized exception action
   # then they will be rendered using the built-in error template.
   # In development mode this "built in" template will show stack-traces for
   # any of the ServerError family of exceptions (you can force the stack-trace
-  # to display in production mode using the :exception_details config option in 
-  # merb.yml)
+  # to display in production mode using the :exception_details config option
+  # in merb.yml)
   #
   #
   # ==== Internal Exceptions 
   #
   # Any other rogue errors (not ControllerExceptions) that occur during the 
   # execution of your app will be converted into the ControllerException 
-  # InternalServerError. And like all other exceptions, the ControllerExceptions  
-  # can be caught on your Exceptions controller.
+  # InternalServerError. And like all other exceptions, the
+  # ControllerExceptions can be caught on your Exceptions controller.
   #
   # InternalServerErrors return status 500, a common use for customizing this
   # action might be to send emails to the development team, warning that their
   # application has exploded. Mock example:
   #
-
   #   def internal_server_error
   #     MySpecialMailer.deliver(
   #       "team@cowboys.com", 
@@ -133,7 +135,6 @@ module Merb
   # Add the required action to our Exceptions controller
   #
   #   class Exceptions  Application
-
   #     def admin_access_required
   #       render
   #     end
@@ -158,181 +159,34 @@ def status; self.class.status; end
       alias :to_i :status
 
       class  self
-
-        # Get the actual status-code for an Exception class.
-        #
-        # As usual, this can come from a constant upwards in
-        # the inheritance chain.
-        #
-        # ==== Returns
-        # Fixnum:: The status code of this exception.
-        #
-        # @api public
-        def status
-          const_get(:STATUS) rescue 0
-        end
         alias :to_i :status
-        
-        # Set the actual status-code for an Exception class.
-        #
-        # If possible, set the STATUS constant, and update
-        # any previously registered (inherited) status-code.
-        #
-        # ==== Parameters
-        # num~to_i:: The status code
-        #
-        # ==== Returns
-        # (Integer, nil):: The status set on this exception, or nil if a status was already set.
-        #
-        # @api private
-        def status=(num)
-          unless self.status?
-            register_status_code(self, num)
-            self.const_set(:STATUS, num.to_i)
-          end
-        end
-      
-        # See if a status-code has been defined (on self explicitly).
-        #
-        # ==== Returns
-        # Boolean:: Whether a status code has been set
-        #
-        # @api private
-        def status?
-          self.const_defined?(:STATUS)
-        end
-      
-        # Registers any subclasses with status codes for easy lookup by
-        # set_status in Merb::Controller.
-        #
-        # Inheritance ensures this method gets inherited by any subclasses, so
-        # it goes all the way down the chain of inheritance.
-        #
-        # ==== Parameters
-        # 
-        # subclassMerb::ControllerExceptions::Base::
-        #   The Exception class that is inheriting from Merb::ControllerExceptions::Base
-        #
-        # @api public
-        def inherited(subclass)
-          # don't set the constant yet - any class methods will be called after self.inherited
-          # unless self.status = ... is set explicitly, the status code will be inherited
-          register_status_code(subclass, self.status) if self.status?
-        end
-        
-        private
-        
-        # Register the status-code for an Exception class.
-        #
-        # ==== Parameters
-        # num~to_i:: The status code
-        #
-        # @api privaate
-        def register_status_code(klass, code)
-          name = self.to_s.split('::').last.snake_case
-          STATUS_CODES[name.to_sym] = code.to_i
-        end
-        
       end
     end
 
-    class Informational                  Merb::ControllerExceptions::Base; end
-
-      class Continue                     Merb::ControllerExceptions::Informational; self.status = 100; end
-
-      class SwitchingProtocols           Merb::ControllerExceptions::Informational; self.status = 101; end
-
-    class Successful                     Merb::ControllerExceptions::Base; end
-
-      class OK                           Merb::ControllerExceptions::Successful; self.status = 200; end
-
-      class Created                      Merb::ControllerExceptions::Successful; self.status = 201; end
-
-      class Accepted                     Merb::ControllerExceptions::Successful; self.status = 202; end
-
-      class NonAuthoritativeInformation  Merb::ControllerExceptions::Successful; self.status = 203; end
-
-      class NoContent                    Merb::ControllerExceptions::Successful; self.status = 204; end
-
-      class ResetContent                 Merb::ControllerExceptions::Successful; self.status = 205; end
-
-      class PartialContent               Merb::ControllerExceptions::Successful; self.status = 206; end
-
-    class Redirection                    Merb::ControllerExceptions::Base; end
-
-      class MultipleChoices              Merb::ControllerExceptions::Redirection; self.status = 300; end
-
-      class MovedPermanently             Merb::ControllerExceptions::Redirection; self.status = 301; end
-
-      class MovedTemporarily             Merb::ControllerExceptions::Redirection; self.status = 302; end
-
-      class SeeOther                     Merb::ControllerExceptions::Redirection; self.status = 303; end
-
-      class NotModified                  Merb::ControllerExceptions::Redirection; self.status = 304; end
-
-      class UseProxy                     Merb::ControllerExceptions::Redirection; self.status = 305; end
-
-      class TemporaryRedirect            Merb::ControllerExceptions::Redirection; self.status = 307; end
-
-    class ClientError                    Merb::ControllerExceptions::Base; end
-
-      class BadRequest                   Merb::ControllerExceptions::ClientError; self.status = 400; end
-
-      class MultiPartParseError          Merb::ControllerExceptions::BadRequest; end
-
-      class Unauthorized                 Merb::ControllerExceptions::ClientError; self.status = 401; end
-
-      class PaymentRequired              Merb::ControllerExceptions::ClientError; self.status = 402; end
-
-      class Forbidden                    Merb::ControllerExceptions::ClientError; self.status = 403; end
-
-      class NotFound                     Merb::ControllerExceptions::ClientError; self.status = 404; end
-
-      class ActionNotFound               Merb::ControllerExceptions::NotFound; end
-
-      class TemplateNotFound             Merb::ControllerExceptions::NotFound; end
-
-      class LayoutNotFound               Merb::ControllerExceptions::NotFound; end
-
-      class MethodNotAllowed             Merb::ControllerExceptions::ClientError; self.status = 405; end
-
-      class NotAcceptable                Merb::ControllerExceptions::ClientError; self.status = 406; end
-
-      class ProxyAuthenticationRequired  Merb::ControllerExceptions::ClientError; self.status = 407; end
-
-      class RequestTimeout               Merb::ControllerExceptions::ClientError; self.status = 408; end
-
-      class Conflict                     Merb::ControllerExceptions::ClientError; self.status = 409; end
-
-      class Gone                         Merb::ControllerExceptions::ClientError; self.status = 410; end
-
-      class LengthRequired               Merb::ControllerExceptions::ClientError; self.status = 411; end
-
-      class PreconditionFailed           Merb::ControllerExceptions::ClientError; self.status = 412; end
-
-      class RequestEntityTooLarge        Merb::ControllerExceptions::ClientError; self.status = 413; end
-
-      class RequestURITooLarge           Merb::ControllerExceptions::ClientError; self.status = 414; end
-
-      class UnsupportedMediaType         Merb::ControllerExceptions::ClientError; self.status = 415; end
-
-      class RequestRangeNotSatisfiable   Merb::ControllerExceptions::ClientError; self.status = 416; end
-
-      class ExpectationFailed            Merb::ControllerExceptions::ClientError; self.status = 417; end
-
-    class ServerError                    Merb::ControllerExceptions::Base; end
-
-      class InternalServerError          Merb::ControllerExceptions::ServerError; self.status = 500; end
-
-      class NotImplemented               Merb::ControllerExceptions::ServerError; self.status = 501; end
-
-      class BadGateway                   Merb::ControllerExceptions::ServerError; self.status = 502; end
-
-      class ServiceUnavailable           Merb::ControllerExceptions::ServerError; self.status = 503; end
-
-      class GatewayTimeout               Merb::ControllerExceptions::ServerError; self.status = 504; end
+    # This looks not very readable at first glance,
+    # but what you really want to see is status_codes.rb
+    # next to this file.
+    #
+    # It lists controller exceptions / status codes
+    # used by Merb. This code is executed once on
+    # boot so don't worry *too* much about
+    # this and Merb's philosophy of mostly staying away
+    # from "cool" tricks one can do in Ruby.
+    Merb::StatusCodes::STATUS_CODES.each do |x|
+      if x[:status]
+        assign_constant = "STATUS_CODES[:#{x[:child_name].snake_case}] = #{x[:status]}"
+        define_status_method = "def self.status; #{x[:status]} end"
+      else
+        assign_constant, define_status_method = "", ""
+      end
+      self.class_eval -RUBY, __FILE__, __LINE__ + 1
+        #{assign_constant}
+        class #{x[:child_name]}  #{x[:parent_name]}
+          #{define_status_method}
+        end
+      RUBY
+    end
 
-      class HTTPVersionNotSupported      Merb::ControllerExceptions::ServerError; self.status = 505; end
   end
   
   # Required to show exceptions in the log file</field>
	<field name="commit_file_name">status_codes.rb</field>
	<field name="commit_diff">@@ -0,0 +1,92 @@
+module Merb
+    
+  module StatusCodes
+
+    STATUS_CODES = []
+
+    class Base
+      def self.status; nil end
+
+      class  self
+        alias :to_i :status
+        
+        def inherited(subclass)
+          STATUS_CODES  {
+            :child_class = subclass,
+            :child_name  = subclass.to_s.split('::').last,
+            :parent_name = self.to_s.split('::').last
+          }
+          # Note: Since inherited fires immediately after the subclass
+          # definition itself -- but before the definition of methods inside,
+          # we cannot set :status here.
+        end
+      end
+    end
+
+    # ===== 1xx
+    class Informational                Merb::StatusCodes::Base; end
+    class Continue                     Merb::StatusCodes::Informational; def self.status; 100 end end
+    class SwitchingProtocols           Merb::StatusCodes::Informational; def self.status; 101 end end
+
+    # ===== 2xx
+    class Successful                   Merb::StatusCodes::Base; end
+    class OK                           Merb::StatusCodes::Successful; def self.status; 200 end end
+    class Created                      Merb::StatusCodes::Successful; def self.status; 201 end end
+    class Accepted                     Merb::StatusCodes::Successful; def self.status; 202 end end
+    class NonAuthoritativeInformation  Merb::StatusCodes::Successful; def self.status; 203 end end
+    class NoContent                    Merb::StatusCodes::Successful; def self.status; 204 end end
+    class ResetContent                 Merb::StatusCodes::Successful; def self.status; 205 end end
+    class PartialContent               Merb::StatusCodes::Successful; def self.status; 206 end end
+
+    # ===== 3xx
+    class Redirection                  Merb::StatusCodes::Base; end
+    class MultipleChoices              Merb::StatusCodes::Redirection; def self.status; 300 end end
+    class MovedPermanently             Merb::StatusCodes::Redirection; def self.status; 301 end end
+    class Found                        Merb::StatusCodes::Redirection; def self.status; 302 end end # HTTP 1.1
+    class MovedTemporarily             Merb::StatusCodes::Redirection; def self.status; 302 end end # HTTP 1.0
+    class SeeOther                     Merb::StatusCodes::Redirection; def self.status; 303 end end
+    class NotModified                  Merb::StatusCodes::Redirection; def self.status; 304 end end
+    class UseProxy                     Merb::StatusCodes::Redirection; def self.status; 305 end end
+    class TemporaryRedirect            Merb::StatusCodes::Redirection; def self.status; 307 end end
+
+    # ===== 4xx
+    class ClientError                  Merb::StatusCodes::Base; end
+    class BadRequest                   Merb::StatusCodes::ClientError; def self.status; 400 end end
+    class MultiPartParseError          Merb::StatusCodes::BadRequest; end
+    class Unauthorized                 Merb::StatusCodes::ClientError; def self.status; 401 end end
+    class PaymentRequired              Merb::StatusCodes::ClientError; def self.status; 402 end end
+    class Forbidden                    Merb::StatusCodes::ClientError; def self.status; 403 end end
+    class NotFound                     Merb::StatusCodes::ClientError; def self.status; 404 end end
+    class ActionNotFound               Merb::StatusCodes::NotFound; end
+    class TemplateNotFound             Merb::StatusCodes::NotFound; end
+    class LayoutNotFound               Merb::StatusCodes::NotFound; end
+    class MethodNotAllowed             Merb::StatusCodes::ClientError; def self.status; 405 end end
+    class NotAcceptable                Merb::StatusCodes::ClientError; def self.status; 406 end end
+    class ProxyAuthenticationRequired  Merb::StatusCodes::ClientError; def self.status; 407 end end
+    class RequestTimeout               Merb::StatusCodes::ClientError; def self.status; 408 end end
+    class Conflict                     Merb::StatusCodes::ClientError; def self.status; 409 end end
+    class Gone                         Merb::StatusCodes::ClientError; def self.status; 410 end end
+    class LengthRequired               Merb::StatusCodes::ClientError; def self.status; 411 end end
+    class PreconditionFailed           Merb::StatusCodes::ClientError; def self.status; 412 end end
+    class RequestEntityTooLarge        Merb::StatusCodes::ClientError; def self.status; 413 end end
+    class RequestURITooLarge           Merb::StatusCodes::ClientError; def self.status; 414 end end
+    class UnsupportedMediaType         Merb::StatusCodes::ClientError; def self.status; 415 end end
+    class RequestRangeNotSatisfiable   Merb::StatusCodes::ClientError; def self.status; 416 end end
+    class ExpectationFailed            Merb::StatusCodes::ClientError; def self.status; 417 end end
+
+    # ===== 5xx
+    class ServerError                  Merb::StatusCodes::Base; end
+    class InternalServerError          Merb::StatusCodes::ServerError; def self.status; 500 end end
+    class NotImplemented               Merb::StatusCodes::ServerError; def self.status; 501 end end
+    class BadGateway                   Merb::StatusCodes::ServerError; def self.status; 502 end end
+    class ServiceUnavailable           Merb::StatusCodes::ServerError; def self.status; 503 end end
+    class GatewayTimeout               Merb::StatusCodes::ServerError; def self.status; 504 end end
+    class HTTPVersionNotSupported      Merb::StatusCodes::ServerError; def self.status; 505 end end
+    
+    STATUS_CODES.each do |item|
+      item[:status] = item[:child_class].status
+    end
+
+  end # StatusCodes
+  
+end # Merb</field>
	<field name="commit_file_name">csrf_middleware_spec.rb</field>
	<field name="commit_diff">@@ -54,7 +54,7 @@ def create
     env = Rack::MockRequest.env_for('/users/new')
     status, header, body = @middleware.call(env)
     body.should have_tag(:form, :action = '/users')
-      body.should have_tag(:input, :type = 'hidden', :id = 'csrf_authentication_token')
+    body.should have_tag(:input, :type = 'hidden', :id = 'csrf_authentication_token')
   end
 
   it "should not do anything if there is no form found in the response" do</field>
	<field name="commit_sha">36c7538548f8b511c23a8e75600217edc9fd039b</field>
	<field name="commit_message">Correct documentation of session_expiry option.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T14:48:15Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T14:48:15Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">session.rb</field>
	<field name="commit_diff">@@ -32,7 +32,7 @@ def self.session_stores
   #                           retrieved; defaults to _session_id
   #
   # :session_expiry           When to expire the session cookie;
-  #                           defaults to 2 weeks
+  #                           by defaults session expires when browser quits.
   #
   # :session_secret_key       A secret string which is used to sign/validate
   #                           session data; min. 16 chars</field>
	<field name="commit_sha">afa48c563f5faf06227e1b6b1b73f7638cfe960c</field>
	<field name="commit_message">Use frozen constants on the hot path where possible.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T14:45:11Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T14:45:54Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">constants.rb</field>
	<field name="commit_diff">@@ -1,4 +1,17 @@
 # Most of this list is simply constants frozen for efficiency
+# and lowered memory consumption. Every time Ruby VM comes
+# across a string or a number or a regexp literal,
+# new object is created.
+#
+# This means if you refer to the same string 6 times per request
+# and your application takes 100 requests per second, there are
+# 600 objects for weak MRI garbage collector to work on.
+#
+# GC cycles take up to 80% (!) time of request processing in
+# some cases. Eventually Rubinius and maybe MRI 2.0 gonna
+# improve this situation but at the moment, all commonly used
+# strings, regexp and numbers used as constants so no extra
+# objects created and VM just operate pointers.
 module Merb
     module Const
     
@@ -41,5 +54,10 @@ module Const
     REQUEST_URI              = "REQUEST_URI".freeze
     REQUEST_PATH             = "REQUEST_PATH".freeze
     REMOTE_ADDR              = "REMOTE_ADDR".freeze
+    BREAK_TAG                = "br/".freeze
+    EMPTY_STRING             = "".freeze
+    NEWLINE                  = "\n".freeze
+    DOUBLE_NEWLINE           = "\n\n".freeze
+    LOCATION                 = "Location".freeze
   end
 end</field>
	<field name="commit_file_name">application.rb</field>
	<field name="commit_diff">@@ -16,9 +16,9 @@ def call(env)
         begin
           rack_response = ::Merb::Dispatcher.handle(Merb::Request.new(env))
         rescue Object = e
-          return [500, {Merb::Const::CONTENT_TYPE = "text/html"}, e.message + "br/" + e.backtrace.join("br/")]
+          return [500, {Merb::Const::CONTENT_TYPE = "text/html"}, e.message + Merb::Const::BREAK_TAG + e.backtrace.join(Merb::Const::BREAK_TAG)]
         end
-        Merb.logger.info "\n\n"
+        Merb.logger.info Merb::Const::DOUBLE_NEWLINE
         Merb.logger.flush
 
         # unless controller.headers[Merb::Const::DATE]
@@ -41,7 +41,7 @@ def call(env)
       #
       # @api private
       def deferred?(env)
-        path = env[Merb::Const::PATH_INFO] ? env[Merb::Const::PATH_INFO].chomp('/') : ""
+        path = env[Merb::Const::PATH_INFO] ? env[Merb::Const::PATH_INFO].chomp(Merb::Const::SLASH) : Merb::Const::EMPTY_STRING
         if path =~ Merb.deferred_actions
           Merb.logger.info! "Deferring Request: #{path}"
           true</field>
	<field name="commit_file_name">helpers.rb</field>
	<field name="commit_diff">@@ -24,10 +24,10 @@ def self.redirect(url, options = {})
         Merb.logger.info("Dispatcher redirecting to: #{url} (#{status})")
         Merb.logger.flush
         
-        [status, { "Location" = url },
+        [status, { Merb::Const::LOCATION = url },
          Merb::Rack::StreamWrapper.new("htmlbodyYou are being a href=\"#{url}\"redirected/a./body/html")]
       end
       
     end
   end
-end
\ No newline at end of file
+end</field>
	<field name="commit_sha">173c4a1889afe4fa355cd768b0c8c66ebbe987f6</field>
	<field name="commit_message">Fixes 2 syntax errors in specs. Forking runner swallowed those.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T04:34:00Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T04:34:00Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">deferred_spec.rb</field>
	<field name="commit_diff">@@ -22,7 +22,7 @@
     it "should return the param hash returned by the block" do
       Merb::Router.prepare do
         match("/deferred").defer_to do |request, params|
-          :hello = "world"
+          { :hello = "world" }
         end
       end
 
@@ -42,7 +42,7 @@
     it "should be able to define routes after the deferred route" do
       Merb::Router.prepare do
         match("/deferred").defer_to do
-          :hello = "world"
+          { :hello = "world" }
         end
 
         match("/").to(:foo = "bar")
@@ -206,4 +206,4 @@
     route_for("/second") { |req| req.should_receive(:in_block!) }
   end
   
-end
\ No newline at end of file
+end</field>
	<field name="commit_sha">d4739e7620f2f553578009c859de2dae4863c8a4</field>
	<field name="commit_message">fixed specs for viewmatchers

Signed-off-by: Michael S. Klishin michael@novemberain.com</field>
	<field name="commit_author_name">Michael Holub</field>
	<field name="commit_author_date">2008-10-11T14:21:59Z</field>
	<field name="commit_author_email">michael.holub@gmail.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T04:31:08Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">view_matchers_spec.rb</field>
	<field name="commit_diff">@@ -37,29 +37,42 @@ module Merb::Test::Rspec::ViewMatchers
           Hpricot.should_receive(:parse).and_return @document
         end
       
-        it "should should pass all found elements to the block" do
+        it "should pass all found elements to the block" do
           @block_called = false
         
           @document.should_receive(:search).and_return [""]
-          HasTag.new("tag").matches?("") {|e| @block_called = true}
-        
-          @block_called.should be_true
+          HasTag.new("tag").matches?("") {|e| e.should == "" }
         end
       
-        it "should not intercept any errors raised in the block" do
+        it 'should intercept errors raised in the block' do
           @document.should_receive(:search).and_return [""]
           lambda {
             HasTag.new("tag").matches?("") {|e| true.should be_false }
-          }.should raise_error(Spec::Expectations::ExpectationNotMetError)
+          }.should_not raise_error(Spec::Expectations::ExpectationNotMetError)
+        end
+
+        it 'should raise ExpectationNotMetError when there are no matched elements' do
+          @document.should_receive(:search).and_return [""]
+          lambda {
+            @document.should have_tag(:tag) {|e| true.should be_false }
+          }.should raise_error(Spec::Expectations::ExpectationNotMetError, "tag:\nexpected false, got true")
+        end
+
+        #part of bugfix for #329
+        it 'should not raise error if block for first of matched elements by xpath expression fails' do
+          @document.should_receive(:search).and_return ["a", "b"]
+          lambda {
+            @document.should have_tag(:tag) { |tag| tag.should == "b" }
+          }.should_not raise_error(Spec::Expectations::ExpectationNotMetError)
         end
       end
     
       describe "#with_tag" do
-        it "should set @inner_tag" do
+        it "should set @outer_has_tag" do
           outer = HasTag.new("outer")
           inner = outer.with_tag("inner")
         
-          outer.selector.should include(inner.selector)
+          inner.selector.should include(outer.selector)
         end
       end
     
@@ -95,15 +108,15 @@ module Merb::Test::Rspec::ViewMatchers
     
       describe "#failure_message" do
         it "should include the tag name" do
-          HasTag.new("anytag").failure_message.should include("anytag")
+          HasTag.new("anytag").failure_message.should include("anytag")
         end
       
         it "should include the tag's id" do
-          HasTag.new("div", :id = :spacer).failure_message.should include("div id=\"spacer\"")
+          HasTag.new("div", :id = :spacer).failure_message.should include("div#spacer")
         end
       
         it "should include the tag's class" do
-          HasTag.new("div", :class = :header).failure_message.should include("div class=\"header\"")
+          HasTag.new("div", :class = :header).failure_message.should include("div.header")
         end
       
         it "should include the tag's custom attributes" do
@@ -113,18 +126,12 @@ module Merb::Test::Rspec::ViewMatchers
       end
     
       describe "id, class, and attributes for error messages" do
-        it "should start with a space for a class, id, or custom attribute" do
-          HasTag.new("tag", :id = "identifier").id_for_error.should =~ /^ /
-          HasTag.new("tag", :class = "classifier").class_for_error.should =~ /^ /
-          HasTag.new("tag", :rand = "attr").attributes_for_error.should =~ /^ /
-        end
-      
-        it "should have 'class=\"classifier\"' in class_for_error" do
-          HasTag.new("tag", :class = "classifier").class_for_error.should include("class=\"classifier\"")
+        it "should have '.classifier' in class_for_error" do
+          HasTag.new("tag", :class = "classifier").class_for_error.should include(".classifier")
         end
       
-        it "should have 'id=\"identifier\" in id_for_error" do
-          HasTag.new("tag", :id = "identifier").id_for_error.should include("id=\"identifier\"")
+        it "should have '#identifier' in id_for_error" do
+          HasTag.new("tag", :id = "identifier").id_for_error.should include("#identifier")
         end
       end
     end</field>
	<field name="commit_sha">ef6092a6ee79d112eccbea1b8862c21d46d51b99</field>
	<field name="commit_message">Add warning when loading rexml instead of libxml-ruby

Signed-off-by: Michael S. Klishin michael@novemberain.com</field>
	<field name="commit_author_name">Michael Holub</field>
	<field name="commit_author_date">2008-10-11T13:42:11Z</field>
	<field name="commit_author_email">michael.holub@gmail.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T04:30:57Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">view_matchers.rb</field>
	<field name="commit_diff">@@ -356,7 +356,12 @@ def have_xpath(expected)
       require "libxml"
       type = "libxml"
     rescue LoadError = e
-      require "rexml/document"
+      if require "rexml/document" # show warning only once
+        warn(-WARN_TEXT)
+Standard REXML library is slow. Please consider to install libxml-ruby.
+Use "sudo gem install libxml-ruby"
+WARN_TEXT
+      end
       type = "rexml"
     end
     HaveXpath.new(expected, type)</field>
	<field name="commit_sha">1f6de2c3a0ec4bf42b4d6883e3898c2cc395f118</field>
	<field name="commit_message">#329 bug fix

Signed-off-by: Michael S. Klishin michael@novemberain.com</field>
	<field name="commit_author_name">Michael Holub</field>
	<field name="commit_author_date">2008-10-11T01:56:39Z</field>
	<field name="commit_author_email">michael.holub@gmail.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T04:30:50Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">view_matchers.rb</field>
	<field name="commit_diff">@@ -168,6 +168,8 @@ def failure_message
   
   class HasTag
     
+    attr_accessor :outer_has_tag, :inner_has_tag
+
     # ==== Parameters
     # tag~to_s:: The tag to look for.
     # attributesHash:: Attributes for the tag (see below).
@@ -197,8 +199,13 @@ def matches?(stringlike, &blk)
 
       unless @blk.nil?
         !@document.search(selector).select do |ele|
-          @blk.call ele
-          true
+          begin
+            @blk.call ele
+            true
+          rescue Spec::Expectations::ExpectationNotMetError
+            @error_message = "#{tag_for_error}:\n" + $!.message
+            false
+          end
         end.empty?
       else
         !@document.search(selector).empty?
@@ -208,12 +215,10 @@ def matches?(stringlike, &blk)
     # ==== Returns
     # String:: The complete selector for element queries.
     def selector
-      @selector = "//#{@tag}#{id_selector}#{class_selector}"
-      @selector  @attributes.map{|a, v| "[@#{a}=\"#{v}\"]"}.join
+      @selector = @outer_has_tag ? @outer_has_tag.selector : ''
 
-      @selector  @inner_has_tag.selector unless @inner_has_tag.nil?
-
-      @selector
+      @selector  "//#{@tag}#{id_selector}#{class_selector}"
+      @selector  @attributes.map{|a, v| "[@#{a}=\"#{v}\"]"}.join
     end
 
     # ==== Returns
@@ -231,45 +236,38 @@ def class_selector
     # ==== Returns
     # String:: The failure message.
     def failure_message
-      "expected following output to contain a #{tag_for_error} tag:\n#{@document}"
+      @error_message || "expected following output to contain a #{tag_for_error} tag:\n#{@document}"
     end
 
     # ==== Returns
     # String:: The failure message to be displayed in negative matches.
     def negative_failure_message
-      "expected following output to omit a #{tag_for_error} tag:\n#{@document}"
+      @error_message || "expected following output to omit a #{tag_for_error} tag:\n#{@document}"
     end
     
     # ==== Returns
     # String:: The tag used in failure messages.
     def tag_for_error
-      "#{inner_failure_message}#{@tag}#{id_for_error}#{class_for_error}#{attributes_for_error}"
-    end
-
-    # ==== Returns
-    # String::
-    #   The failure message to be displayed in negative matches within the
-    #   have_tag block.
-    def inner_failure_message
-      "#{@inner_has_tag.tag_for_error} tag within a " unless @inner_has_tag.nil?
+      result = "#{@tag}#{id_for_error}#{class_for_error}#{attributes_for_error}"
+      inner_has_tag ? result  "  #{inner_has_tag.tag_for_error}" : result
     end
 
     # ==== Returns
     # String:: ID for the error tag.
     def id_for_error
-      " id=\"#{@id}\"" unless @id.nil?
+      "##{@id}" unless @id.nil?
     end
 
     # ==== Returns
     # String:: Class for the error tag.
     def class_for_error
-      " class=\"#{@class}\"" unless @class.nil?
+      ".#{@class}" unless @class.nil?
     end
 
     # ==== Returns
     # String:: Class for the error tag.
     def attributes_for_error
-      @attributes.map{|a,v| " #{a}=\"#{v}\""}.join
+      @attributes.map{|a,v| "[#{a}=\"#{v}\"]"}.join
     end
 
     # Search for a child tag within a have_tag block.
@@ -279,6 +277,7 @@ def attributes_for_error
     # attributesHash:: Attributes for the tag (see below).
     def with_tag(name, attrs={})
       @inner_has_tag = HasTag.new(name, attrs)
+      @inner_has_tag.outer_has_tag = self
     end
   end
 </field>
	<field name="commit_sha">42da35e9861d0ca0ef228a017316a31d76cf0e29</field>
	<field name="commit_message">Log syntax errors when loading the app.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T04:30:03Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T04:30:03Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">bootloader.rb</field>
	<field name="commit_diff">@@ -769,8 +769,8 @@ def load_file(file)
       # the file is changed, it'll be reloaded again
       begin
         load file
-      rescue SyntaxError
-        return
+      rescue SyntaxError = e
+        Merb.logger.error "Cannot load #{file} because of syntax error: #{e.message}"
       ensure
         if Merb::Config[:reload_classes]
           MTIMES[file] = File.mtime(file)</field>
	<field name="commit_sha">3ae019fe96ffaa6cdaa79181279a1f8ef192eb69</field>
	<field name="commit_message">Since intention/option comment behind workers respawn in -k are not clear, do not let killing master with -k for now.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T04:24:54Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T04:24:54Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">config.rb</field>
	<field name="commit_diff">@@ -324,7 +324,7 @@ def parse_args(argv = ARGV)
 
           opts.on("-k", "--kill PORT", "Force kill one merb worker " \
                   "by port number. This will cause the worker to" \
-                  "be respawned. If you want to kill ") do |port|
+                  "be respawned.") do |port|
             options[:action] = :kill_9
             port = "main" if port == "all"
             options[:port] = port</field>
	<field name="commit_file_name">server.rb</field>
	<field name="commit_diff">@@ -95,22 +95,6 @@ def kill(port, sig = "INT")
           # turn
           if sig == "INT"
             kill_pid(sig, pid_file("main"))
-          else
-            # order is important here
-            
-            # then reap workers
-            # 
-            # there is no way to handle KILL so
-            # at_exit block does not work and
-            # processes do not clean up their
-            # pid files: lets do it ourselves
-            Dir["#{Merb.log_path}" / "*.pid"].each do |file|
-              kill_pid(sig, file)
-              ::FileUtils.rm_rf file
-            end
-
-            # reap master
-            kill_pid(sig, pid_file("main"))
           end
         else
           kill_pid(sig, pid_file(port))</field>
	<field name="commit_sha">20fd63f05d75d10f8a6afc54c2295da259d89f78</field>
	<field name="commit_message">(put my Frankenstein voice on) It's alive!</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-12T03:58:20Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-12T03:58:20Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">bootloader.rb</field>
	<field name="commit_diff">@@ -562,6 +562,7 @@ def run
       end
 
       @ran = true
+      # process name you see in ps output
       $0 = "merb#{" : " + Merb::Config[:name] if Merb::Config[:name]} : master"
 
       # Log the process configuration user defined signal 1 (SIGUSR1) is received.
@@ -604,7 +605,8 @@ def exit_gracefully
       Process.waitall
       # remove master process pid
       Merb::Server.remove_pid("main")
-      # terminate
+      # terminate, workers remove their own pids
+      # in on exit hook
       exit
     end
 
@@ -632,6 +634,7 @@ def start_transaction
 
       loop do
         # create two connected endpoints
+        # we use them for master/workers communication
         reader, @writer = IO.pipe
         pid = Kernel.fork
 
@@ -640,7 +643,7 @@ def start_transaction
         # writer must be closed so reader can generate EOF condition
         @writer.close
 
-        # master process stores pid to merb.mail.pid
+        # master process stores pid to merb.main.pid
         Merb::Server.store_pid("main")
 
         if Merb::Config[:console_trap]</field>
	<field name="commit_file_name">server.rb</field>
	<field name="commit_diff">@@ -52,17 +52,18 @@ def start(port, cluster=nil)
       #
       # @api private
       def alive?(port)
-        puts "About to check if port #{port} is alive..." if Merb::Config[:verbose]
         pidfile = pid_file(port)
-        puts "Pidfile is #{pidfile}..." if Merb::Config[:verbose]
-        pid = File.read(pidfile).chomp.to_i
-        puts "Process id is #{pid}" if Merb::Config[:verbose]
+        pid     = pid_in_file(pidfile)
         Process.kill(0, pid)
         true
       rescue Errno::ESRCH, Errno::ENOENT
         false
       rescue Errno::EACCES = e
-        Merb.fatal!("You don't have access to the PID file at #{pidfile}.", e)
+        Merb.fatal!("You don't have access to the PID file at #{pidfile}: #{e.message}")
+      end
+
+      def pid_in_file(pidfile)
+        File.read(pidfile).chomp.to_i
       end
 
       # ==== Parameters
@@ -84,9 +85,32 @@ def kill(port, sig = "INT")
         Merb::BootLoader::BuildFramework.run
         # assume that if we kill master,
         # workers should be reaped, too
-        if %w(main all).include?(port)
-          Dir["#{Merb.log_path}" / "*.pid"].each do |file|
-            kill_pid(sig, file)
+        if %w(main master all).include?(port)
+          # if graceful exit is requested,
+          # send INT to master process and
+          # it's gonna do it's job
+          #
+          # Otherwise read pids from pid files
+          # and try to kill each process in
+          # turn
+          if sig == "INT"
+            kill_pid(sig, pid_file("main"))
+          else
+            # order is important here
+            
+            # then reap workers
+            # 
+            # there is no way to handle KILL so
+            # at_exit block does not work and
+            # processes do not clean up their
+            # pid files: lets do it ourselves
+            Dir["#{Merb.log_path}" / "*.pid"].each do |file|
+              kill_pid(sig, file)
+              ::FileUtils.rm_rf file
+            end
+
+            # reap master
+            kill_pid(sig, pid_file("main"))
           end
         else
           kill_pid(sig, pid_file(port))
@@ -97,29 +121,29 @@ def kill(port, sig = "INT")
       # @api private
       def kill_pid(sig, file)
         begin
-          pid = File.read(file).chomp.to_i
+          pid = pid_in_file(file)
           Merb.logger.fatal! "Killing pid #{pid} with #{sig}"
           Process.kill(sig, pid)
           FileUtils.rm(file) if File.exist?(file)
         rescue Errno::EINVAL
-          Merb.fatal! "Failed to kill PID #{pid} with #{sig}: '#{sig}' is an invalid " \
+          Merb.logger.fatal! "Failed to kill PID #{pid} with #{sig}: '#{sig}' is an invalid " \
             "or unsupported signal number."
         rescue Errno::EPERM
-          Merb.fatal! "Failed to kill PID #{pid} with #{sig}: Insufficient permissions."
+          Merb.logger.fatal! "Failed to kill PID #{pid} with #{sig}: Insufficient permissions."
         rescue Errno::ESRCH
           FileUtils.rm file
-          Merb.fatal! "Failed to kill PID #{pid} with #{sig}: Process is " \
+          Merb.logger.fatal! "Failed to kill PID #{pid} with #{sig}: Process is " \
             "deceased or zombie."
         rescue Errno::EACCES = e
-          Merb.fatal! e.message, e
+          Merb.logger.fatal! e.message
         rescue Errno::ENOENT = e
           # This should not cause abnormal exit, that's why
           # we do not use Merb.fatal but instead just
           # log with max level.
-          Merb.logger.fatal! "Could not find a PID file at #{file}. Probably process is no longer running but pid file wasn't cleaned up.", e
+          Merb.logger.fatal! "Could not find a PID file at #{file}. Probably process is no longer running but pid file wasn't cleaned up."
         rescue Exception = e
           if !e.is_a?(SystemExit)
-            Merb.fatal! "Failed to kill PID #{pid} with #{sig}", e
+            Merb.logger.fatal! "Failed to kill PID #{pid.inspect} with #{sig.inspect}: #{e.message}"
           end
         end
       end</field>
	<field name="commit_sha">2d721c48372e8aaf85b5b6c4b653b83df0402915</field>
	<field name="commit_message">Merge upstream, re-apply stash.</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-11T14:49:52Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-11T14:49:52Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">bootloader.rb</field>
	<field name="commit_diff">@@ -566,7 +566,7 @@ def run
 
       # Log the process configuration user defined signal 1 (SIGUSR1) is received.
       Merb.trap("USR1") do
-        Merb.logger.error! "Configuration:\n#{Merb::Config.to_hash.merge(:pid = $$).to_yaml}\n\n"
+        Merb.logger.fatal! "Configuration:\n#{Merb::Config.to_hash.merge(:pid = $$).to_yaml}\n\n"
       end
 
       if Merb::Config[:fork_for_class_load] && !Merb.testing?
@@ -600,8 +600,11 @@ def run
     #
     # @api private
     def exit_gracefully
+      # wait all workers to exit
       Process.waitall
+      # remove master process pid
       Merb::Server.remove_pid("main")
+      # terminate
       exit
     end
 
@@ -643,6 +646,7 @@ def start_transaction
         if Merb::Config[:console_trap]
           Merb.trap("INT") {}
         else
+          # send ABRT to worker on INT
           Merb.trap("INT") do
             Merb.logger.warn! "Reaping Workers"
             begin
@@ -718,7 +722,9 @@ def start_transaction
     # (Does not return.)
     #
     # @api private
-    def reap_workers(status = 0)
+    # @param statusInteger The status code to exit with
+    # @param sigString     The signal to send to workers
+    def reap_workers(status = 0, sig = "ABRT")
       Merb.exiting = true unless status == 128
 
       begin
@@ -731,7 +737,7 @@ def reap_workers(status = 0)
       ($WORKERS || []).each do |p|
         threads  Thread.new do
           begin
-            Process.kill("ABRT", p)
+            Process.kill(sig, p)
             Process.wait2(p)
           rescue SystemCallError
           end</field>
	<field name="commit_file_name">server.rb</field>
	<field name="commit_diff">@@ -74,26 +74,23 @@ def alive?(port)
       # processes.
       #
       # @api private
-      def kill(port, sig="INT")
+      def kill(port, sig = "INT")
+        # 9 = KILL
+        # 2 = INT
+        if sig.is_a?(Integer)
+          sig = Signal.list.invert[sig]
+        end
+        
         Merb::BootLoader::BuildFramework.run
-        if sig == 9 && port == "main"
-          kill_pid("INT", pid_file("main"))
+        # assume that if we kill master,
+        # workers should be reaped, too
+        if %w(main all).include?(port)
           Dir["#{Merb.log_path}" / "*.pid"].each do |file|
-            kill_pid(9, file)
+            kill_pid(sig, file)
           end
         else
           kill_pid(sig, pid_file(port))
         end
-
-        if sig.is_a?(Integer)
-          sig = Signal.list.invert[sig]
-        end
-
-        if sig == "KILL" && port == "main"
-          Merb.fatal! "Killed all PIDs with signal KILL"
-        else
-          Merb.fatal! "Killed #{port} with signal #{sig}"
-        end
       end
 
       # Kills the process pointed at by the provided pid file.
@@ -101,25 +98,28 @@ def kill(port, sig="INT")
       def kill_pid(sig, file)
         begin
           pid = File.read(file).chomp.to_i
-          Merb.logger.warn! "Killing pid #{pid}"
+          Merb.logger.fatal! "Killing pid #{pid} with #{sig}"
           Process.kill(sig, pid)
           FileUtils.rm(file) if File.exist?(file)
         rescue Errno::EINVAL
-          Merb.fatal! "Failed to kill PID #{pid}: '#{sig}' is an invalid " \
+          Merb.fatal! "Failed to kill PID #{pid} with #{sig}: '#{sig}' is an invalid " \
             "or unsupported signal number."
         rescue Errno::EPERM
-          Merb.fatal! "Failed to kill PID #{pid}: Insufficient permissions."
+          Merb.fatal! "Failed to kill PID #{pid} with #{sig}: Insufficient permissions."
         rescue Errno::ESRCH
           FileUtils.rm file
-          Merb.fatal! "Failed to kill PID #{pid}: Process is " \
+          Merb.fatal! "Failed to kill PID #{pid} with #{sig}: Process is " \
             "deceased or zombie."
         rescue Errno::EACCES = e
           Merb.fatal! e.message, e
         rescue Errno::ENOENT = e
-          Merb.fatal! "Could not find a PID file at #{file}", e
+          # This should not cause abnormal exit, that's why
+          # we do not use Merb.fatal but instead just
+          # log with max level.
+          Merb.logger.fatal! "Could not find a PID file at #{file}. Probably process is no longer running but pid file wasn't cleaned up.", e
         rescue Exception = e
           if !e.is_a?(SystemExit)
-            Merb.fatal! "Failed to kill PID #{pid}", e
+            Merb.fatal! "Failed to kill PID #{pid} with #{sig}", e
           end
         end
       end
@@ -156,10 +156,7 @@ def daemonize(port)
       #
       # @api private
       def bootup
-        Merb.trap('TERM') {
-          Merb::BootLoader::LoadClasses.reap_workers if Merb::Config[:fork_for_class_load]
-          exit
-        }
+        Merb.trap('TERM') { shutdown }
 
         puts "Running bootloaders..." if Merb::Config[:verbose]
         BootLoader.run
@@ -170,6 +167,13 @@ def bootup
       # Change process user/group to those specified in Merb::Config.
       #
       # @api private
+      def shutdown(status = 0)
+        # reap_workers does exit but may not be called
+        Merb::BootLoader::LoadClasses.reap_workers(status) if Merb::Config[:fork_for_class_load]
+        # that's why we exit explicitly here
+        exit(status)
+      end
+
       def change_privilege
         if Merb::Config[:user] && Merb::Config[:group]
           Merb.logger.verbose! "About to change privilege to group " \</field>
	<field name="commit_sha">a68e147e759021d2e6ab1bd0e2d89fe4d9b1c2a1</field>
	<field name="commit_message">Merge branch 'sprint'

* sprint:
  Updated GemManagement</field>
	<field name="commit_author_name">Michael S. Klishin</field>
	<field name="commit_author_date">2008-10-11T14:46:29Z</field>
	<field name="commit_author_email">michael@novemberain.com</field>
	<field name="commit_committer_name">Michael S. Klishin</field>
	<field name="commit_committer_date">2008-10-11T14:46:29Z</field>
	<field name="commit_committer_email">michael@novemberain.com</field>
	<field name="commit_file_name">gem_management.rb</field>
	<field name="commit_diff">@@ -58,7 +58,7 @@ def install_gem(gem, options = {})
       installer = Gem::DependencyInstaller.new(options.merge(:user_install = false))
       
       # Force-refresh certain gems by excluding them from the current index
-      if refresh.respond_to?(:include?) && !refresh.empty?
+      if !options[:ignore_dependencies] && refresh.respond_to?(:include?) && !refresh.empty?
         source_index = installer.instance_variable_get(:@source_index)
         source_index.gems.each do |name, spec| 
           source_index.gems.delete(name) if refresh.include?(spec.name)
@@ -81,7 +81,7 @@ def install_gem(gem, options = {})
         exception = e
       end
       if installer.installed_gems.empty? && exception
-        error "Failed to install gem '#{gem} (#{version})' (#{exception.message})"
+        error "Failed to install gem '#{gem} (#{version || 'any version'})' (#{exception.message})"
       end
       installer.installed_gems.each do |spec|
         success "Successfully installed #{spec.full_name}"
@@ -122,11 +122,13 @@ def install_gem_from_cache(gem, options = {})
   # install_gem_from_source(source_dir, gem_name)
   # install_gem_from_source(source_dir, :skip = [...])
   def install_gem_from_source(source_dir, *args)
+    installed_gems = []
     Dir.chdir(source_dir) do
-      options = args.last.is_a?(Hash) ? args.pop : {}
-      gem_name    = args[0] || File.basename(source_dir)
-      gem_pkg_dir = File.join(source_dir, 'pkg')
-      skip_gems   = options.delete(:skip) || []
+      opts = args.last.is_a?(Hash) ? args.pop : {}
+      gem_name     = args[0] || File.basename(source_dir)
+      gem_pkg_dir  = File.join(source_dir, 'pkg')
+      gem_pkg_glob = File.join(gem_pkg_dir, "#{gem_name}-*.gem")
+      skip_gems    = opts.delete(:skip) || []
 
       # Cleanup what's already there
       clobber(source_dir)
@@ -138,7 +140,7 @@ def install_gem_from_source(source_dir, *args)
       
       if packages.length == 1
         # The are no subpackages for the main package
-        options[:refresh] = [gem_name]
+        refresh = [gem_name]
       else
         # Gather all packages into the top-level pkg directory
         packages.each do |pkg|
@@ -149,24 +151,38 @@ def install_gem_from_source(source_dir, *args)
         package(source_dir, false)
         
         # Gather subgems to refresh during installation of the main gem
-        options[:refresh] = packages.map do |pkg|
+        refresh = packages.map do |pkg|
           File.basename(pkg, '.gem')[/^(.*?)-([\d\.]+)$/, 1] rescue nil
         end.compact
-      end
-    
-      gem_pkg = Dir[File.join(gem_pkg_dir, "#{gem_name}-*.gem")][0]
-      if gem_pkg && File.exists?(gem_pkg)
-        # Needs to be executed from the directory that contains all packages
-        Dir.chdir(File.dirname(gem_pkg)) do 
-          install_gem(gem_pkg, options)
+        
+        # Install subgems explicitly even if ignore_dependencies is set
+        if opts[:ignore_dependencies]
+          refresh.each do |name| 
+            gem_pkg = Dir[File.join(gem_pkg_dir, "#{name}-*.gem")][0]
+            install_pkg(gem_pkg, opts)
+          end
         end
-        options[:refresh]
+      end
+      
+      # Finally install the main gem
+      if install_pkg(Dir[gem_pkg_glob][0], opts.merge(:refresh = refresh))
+        installed_gems = refresh
       else
-        []
+        installed_gems = []
       end
     end
+    installed_gems
   end
-
+  
+  def install_pkg(gem_pkg, opts = {})
+    if (gem_pkg && File.exists?(gem_pkg))
+      # Needs to be executed from the directory that contains all packages
+      Dir.chdir(File.dirname(gem_pkg)) { install_gem(gem_pkg, opts) }
+    else
+      false
+    end
+  end
+  
   # Uninstall a gem.
   def uninstall_gem(gem, options = {})
     if options[:version] && !options[:version].is_a?(Gem::Requirement)
@@ -178,17 +194,17 @@ def uninstall_gem(gem, options = {})
 
   def clobber(source_dir)
     Dir.chdir(source_dir) do 
-      system "#{Gem.ruby} -S rake -s clobber" if File.exists?('Rakefile')
+      system "#{Gem.ruby} -S rake -s clobber" unless File.exists?('Thorfile')
     end
   end
 
   def package(source_dir, clobber = true)
     Dir.chdir(source_dir) do 
-      if File.exists?('Rakefile')
+      if File.exists?('Thorfile')
+        thor ":package"
+      elsif File.exists?('Rakefile')
         rake "clobber" if clobber
         rake "package"
-      elsif
-        thor ":package"
       end
     end
     Dir[File.join(source_dir, 'pkg/*.gem')]
@@ -230,12 +246,12 @@ def partition_dependencies(dependencies, gem_dir)
       ::Gem.clear_paths; ::Gem.path.unshift(gem_dir)
       ::Gem.source_index.refresh!
       dependencies.each do |dep|
-        if gemspec = ::Gem.source_index.search(dep).last
-          if gemspec.loaded_from.index(gem_dir) == 0
-            local_specs   gemspec
-          else
-            system_specs  gemspec
-          end
+        gemspecs = ::Gem.source_index.search(dep)
+        local = gemspecs.reverse.find { |s| s.loaded_from.index(gem_dir) == 0 }
+        if local
+          local_specs   local
+        elsif gemspecs.last
+          system_specs  gemspecs.last
         else
           missing_deps  dep
         end
@@ -313,4 +329,4 @@ def update_source_index(dir)
     Gem.source_index.load_gems_in(File.join(dir, 'specifications'))
   end
   
-end
+end
\ No newline at end of file</field>
	<field name="commit_sha">dad0d934c0294e082d7dc525e61ed547daf4bf64</field>
	<field name="commit_message">Updated GemManagement</field>
	<field name="commit_author_name">Fabien Franzen</field>
	<field name="commit_author_date">2008-10-11T13:37:28Z</field>
	<field name="commit_author_email">info@atelierfabien.be</field>
	<field name="commit_committer_name">Fabien Franzen</field>
	<field name="commit_committer_date">2008-10-11T13:37:28Z</field>
	<field name="commit_committer_email">info@atelierfabien.be</field>
	<field name="commit_file_name">gem_management.rb</field>
	<field name="commit_diff">@@ -58,7 +58,7 @@ def install_gem(gem, options = {})
       installer = Gem::DependencyInstaller.new(options.merge(:user_install = false))
       
       # Force-refresh certain gems by excluding them from the current index
-      if refresh.respond_to?(:include?) && !refresh.empty?
+      if !options[:ignore_dependencies] && refresh.respond_to?(:include?) && !refresh.empty?
         source_index = installer.instance_variable_get(:@source_index)
         source_index.gems.each do |name, spec| 
           source_index.gems.delete(name) if refresh.include?(spec.name)
@@ -81,7 +81,7 @@ def install_gem(gem, options = {})
         exception = e
       end
       if installer.installed_gems.empty? && exception
-        error "Failed to install gem '#{gem} (#{version})' (#{exception.message})"
+        error "Failed to install gem '#{gem} (#{version || 'any version'})' (#{exception.message})"
       end
       installer.installed_gems.each do |spec|
         success "Successfully installed #{spec.full_name}"
@@ -122,11 +122,13 @@ def install_gem_from_cache(gem, options = {})
   # install_gem_from_source(source_dir, gem_name)
   # install_gem_from_source(source_dir, :skip = [...])
   def install_gem_from_source(source_dir, *args)
+    installed_gems = []
     Dir.chdir(source_dir) do
-      options = args.last.is_a?(Hash) ? args.pop : {}
-      gem_name    = args[0] || File.basename(source_dir)
-      gem_pkg_dir = File.join(source_dir, 'pkg')
-      skip_gems   = options.delete(:skip) || []
+      opts = args.last.is_a?(Hash) ? args.pop : {}
+      gem_name     = args[0] || File.basename(source_dir)
+      gem_pkg_dir  = File.join(source_dir, 'pkg')
+      gem_pkg_glob = File.join(gem_pkg_dir, "#{gem_name}-*.gem")
+      skip_gems    = opts.delete(:skip) || []
 
       # Cleanup what's already there
       clobber(source_dir)
@@ -138,7 +140,7 @@ def install_gem_from_source(source_dir, *args)
       
       if packages.length == 1
         # The are no subpackages for the main package
-        options[:refresh] = [gem_name]
+        refresh = [gem_name]
       else
         # Gather all packages into the top-level pkg directory
         packages.each do |pkg|
@@ -149,24 +151,38 @@ def install_gem_from_source(source_dir, *args)
         package(source_dir, false)
         
         # Gather subgems to refresh during installation of the main gem
-        options[:refresh] = packages.map do |pkg|
+        refresh = packages.map do |pkg|
           File.basename(pkg, '.gem')[/^(.*?)-([\d\.]+)$/, 1] rescue nil
         end.compact
-      end
-    
-      gem_pkg = Dir[File.join(gem_pkg_dir, "#{gem_name}-*.gem")][0]
-      if gem_pkg && File.exists?(gem_pkg)
-        # Needs to be executed from the directory that contains all packages
-        Dir.chdir(File.dirname(gem_pkg)) do 
-          install_gem(gem_pkg, options)
+        
+        # Install subgems explicitly even if ignore_dependencies is set
+        if opts[:ignore_dependencies]
+          refresh.each do |name| 
+            gem_pkg = Dir[File.join(gem_pkg_dir, "#{name}-*.gem")][0]
+            install_pkg(gem_pkg, opts)
+          end
         end
-        options[:refresh]
+      end
+      
+      # Finally install the main gem
+      if install_pkg(Dir[gem_pkg_glob][0], opts.merge(:refresh = refresh))
+        installed_gems = refresh
       else
-        []
+        installed_gems = []
       end
     end
+    installed_gems
   end
-
+  
+  def install_pkg(gem_pkg, opts = {})
+    if (gem_pkg && File.exists?(gem_pkg))
+      # Needs to be executed from the directory that contains all packages
+      Dir.chdir(File.dirname(gem_pkg)) { install_gem(gem_pkg, opts) }
+    else
+      false
+    end
+  end
+  
   # Uninstall a gem.
   def uninstall_gem(gem, options = {})
     if options[:version] && !options[:version].is_a?(Gem::Requirement)
@@ -178,17 +194,17 @@ def uninstall_gem(gem, options = {})
 
   def clobber(source_dir)
     Dir.chdir(source_dir) do 
-      system "#{Gem.ruby} -S rake -s clobber" if File.exists?('Rakefile')
+      system "#{Gem.ruby} -S rake -s clobber" unless File.exists?('Thorfile')
     end
   end
 
   def package(source_dir, clobber = true)
     Dir.chdir(source_dir) do 
-      if File.exists?('Rakefile')
+      if File.exists?('Thorfile')
+        thor ":package"
+      elsif File.exists?('Rakefile')
         rake "clobber" if clobber
         rake "package"
-      elsif
-        thor ":package"
       end
     end
     Dir[File.join(source_dir, 'pkg/*.gem')]
@@ -230,12 +246,12 @@ def partition_dependencies(dependencies, gem_dir)
       ::Gem.clear_paths; ::Gem.path.unshift(gem_dir)
       ::Gem.source_index.refresh!
       dependencies.each do |dep|
-        if gemspec = ::Gem.source_index.search(dep).last
-          if gemspec.loaded_from.index(gem_dir) == 0
-            local_specs   gemspec
-          else
-            system_specs  gemspec
-          end
+        gemspecs = ::Gem.source_index.search(dep)
+        local = gemspecs.reverse.find { |s| s.loaded_from.index(gem_dir) == 0 }
+        if local
+          local_specs   local
+        elsif gemspecs.last
+          system_specs  gemspecs.last
         else
           missing_deps  dep
         end
@@ -313,4 +329,4 @@ def update_source_index(dir)
     Gem.source_index.load_gems_in(File.join(dir, 'specifications'))
   end
   
-end
+end
\ No newline at end of file</field>
	<field name="commit_sha">94e9ff04eb037495ade4d7bd10dd4e3bb540e637</field>
	<field name="commit_message">Merge branch 'sprint'</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-11T07:06:11Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-11T07:06:11Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_file_name">merb-core.rb</field>
	<field name="commit_diff">@@ -278,11 +278,7 @@ def root_path(*path)
 
     # Logger settings
     def logger
-      Thread.current[:merb_logger] ||= Merb::Logger.new(
-        Merb::Config[:log_stream],
-        Merb::Config[:log_level],
-        Merb::Config[:log_delimiter],
-        Merb::Config[:log_auto_flush])
+      Thread.current[:merb_logger] ||= Merb::Logger.new
     end
 
     def reset_logger!</field>
	<field name="commit_file_name">merb_controller.rb</field>
	<field name="commit_diff">@@ -97,8 +97,6 @@ def self._filter_params(params)
     params
   end
 
-  private
-
   # All methods that are callable as actions.
   #
   # ==== Returns</field>
	<field name="commit_file_name">logger.rb</field>
	<field name="commit_diff">@@ -1,5 +1,16 @@
 # Merb::Logger = Extlib::Logger
 
+class Merb::Logger  Extlib::Logger
+  def verbose!(message, level = :warn)
+    send("#{level}!", message) if Merb::Config[:verbose]
+  end
+
+  def verbose(message, level = :warn)
+    send(level, message) if Merb::Config[:verbose]
+  end
+end
+
+# require "time" # httpdate
 # ==== Public Merb Logger API
 #
 # To replace an existing logger with a new one:
@@ -34,37 +45,168 @@
 #   Merb::Logger.new(log{String, IO},level{Symbol, String})
 module Merb
 
-  class Logger  Extlib::Logger
+  class Logger
+
+    attr_accessor :level
+    attr_accessor :delimiter
+    attr_accessor :auto_flush
+    attr_reader   :buffer
+    attr_reader   :log
+    attr_reader   :init_args
+
+    # ==== Notes
+    # Ruby (standard) logger levels:
+    # :fatal:: An unhandleable error that results in a program crash
+    # :error:: A handleable error condition
+    # :warn:: A warning
+    # :info:: generic (useful) information about system operation
+    # :debug:: low-level information for developers
+    Levels = Mash.new({
+      :fatal = 7,
+      :error = 6,
+      :warn  = 4,
+      :info  = 3,
+      :debug = 0
+    }) unless const_defined?(:Levels)
+
+    @@mutex = {}
 
-    # Appends a message to the log if the specified log level is at least as high as
-    # the log level of the logger if Merb::Config[:verbose]. Then flushes the log 
-    # buffer to disk.
+    private
+
+    # Readies a log for writing.
     #
     # ==== Parameters
-    # messageString:: The message to be logged.
-    # levelSymbol:: The level at which to log. Default is :warn.
+    # logIO, String:: Either an IO object or a name of a logfile.
+    def initialize_log(log)
+      close if @log # be sure that we don't leave open files laying around.
+
+      if log.respond_to?(:write)
+        @log = log
+      elsif File.exist?(log)
+        @log = open(log, (File::WRONLY | File::APPEND))
+        @log.sync = true
+      else
+        FileUtils.mkdir_p(File.dirname(log)) unless File.directory?(File.dirname(log))
+        @log = open(log, (File::WRONLY | File::APPEND | File::CREAT))
+        @log.sync = true
+        @log.write("#{Time.now.httpdate} #{delimiter} info #{delimiter} Logfile created\n")
+      end
+    end
+
+    public
+
+    # To initialize the logger you create a new object, proxies to set_log.
     #
-    # ==== Returns
-    # self:: The logger object for chaining.
+    # ==== Parameters
+    # *args:: Arguments to create the log from. See set_logs for specifics.
+    def initialize(*args)
+      set_log(*args)
+    end
+
+    # Replaces an existing logger with a new one.
     #
-    # @api plugin
-    def verbose!(message, level = :warn)
-      send("#{level}!", message) if Merb::Config[:verbose]
+    # ==== Parameters
+    # logIO, String:: Either an IO object or a name of a logfile.
+    # log_level~to_sym::
+    #   The log level from, e.g. :fatal or :info. Defaults to :error in the
+    #   production environment and :debug otherwise.
+    # delimiterString::
+    #   Delimiter to use between message sections. Defaults to " ~ ".
+    # auto_flushBoolean::
+    #   Whether the log should automatically flush after new messages are
+    #   added. Defaults to false.
+    def set_log(stream = Merb::Config[:log_stream],
+      log_level = Merb::Config[:log_level],
+      delimiter = Merb::Config[:log_delimiter],
+      auto_flush = Merb::Config[:log_auto_flush])
+
+      @buffer                   = []
+      @delimiter                = delimiter
+      @auto_flush               = auto_flush
+
+      if Levels[log_level]
+        @level                  = Levels[log_level]
+      else
+        @level                  = log_level
+      end
+
+      @log                      = stream
+      @mutex = (@@mutex[@log] ||= Mutex.new)
+    end
+
+    # Flush the entire buffer to the log object.
+    def flush
+      return unless @buffer.size  0
+      @mutex.synchronize do
+        @log.write(@buffer.slice!(0..-1).to_s)
+      end
+    end
+
+    # Close and remove the current log object.
+    def close
+      flush
+      @log.close if @log.respond_to?(:close) && !@log.tty?
+      @log = nil
     end
 
-    # Appends a message to the log if the specified log level is at least as high as
-    # the log level of the logger if Merb::Config[:verbose].
+    # Appends a message to the log. The methods yield to an optional block and
+    # the output of this block will be appended to the message.
     #
     # ==== Parameters
-    # messageString:: The message to be logged.
-    # levelSymbol:: The level at which to log. Default is :warn.
+    # stringString:: The message to be logged. Defaults to nil.
     #
     # ==== Returns
-    # self:: The logger object for chaining.
-    #
-    # @api plugin
-    def verbose(message, level = :warn)
-      send(level, message) if Merb::Config[:verbose]
+    # String:: The resulting message added to the log file.
+    def (string = nil)
+      message = ""
+      message  delimiter
+      message  string if string
+      message  "\n" unless message[-1] == ?\n
+      @buffer  message
+      flush if @auto_flush
+
+      message
+    end
+    alias :push :
+
+    # Generate the logging methods for Merb.logger for each log level.
+    Levels.each_pair do |name, number|
+      class_eval -LEVELMETHODS, __FILE__, __LINE__
+
+      # Appends a message to the log if the log level is at least as high as
+      # the log level of the logger.
+      #
+      # ==== Parameters
+      # stringString:: The message to be logged. Defaults to nil.
+      #
+      # ==== Returns
+      # self:: The logger object for chaining.
+      def #{name}(message = nil)
+        self  message if #{number} = level
+        self
+      end
+
+      # Appends a message to the log if the log level is at least as high as
+      # the log level of the logger. The bang! version of the method also auto
+      # flushes the log buffer to disk.
+      #
+      # ==== Parameters
+      # stringString:: The message to be logged. Defaults to nil.
+      #
+      # ==== Returns
+      # self:: The logger object for chaining.
+      def #{name}!(message = nil)
+        self  message if #{number} = level
+        flush if #{number} = level
+        self
+      end
+
+      # ==== Returns
+      # Boolean:: True if this level will be logged by this logger.
+      def #{name}?
+        #{number} = level
+      end
+      LEVELMETHODS
     end
 
   end</field>
	<field name="commit_file_name">logger_spec.rb</field>
	<field name="commit_diff">@@ -21,14 +21,6 @@
 
 describe Merb::Logger do
 
-  describe "Levels" do
-    it "should have the same entries as Extlib::Logger::Levels" do
-      Extlib::Logger::Levels.each do |level, value|
-        Merb::Logger::Levels[level].should == value
-      end
-    end
-  end
-
   describe "#new" do
     it "should call set_log with the arguments it was passed." do
       logger = Merb::Logger.allocate # create an object sans initialization
@@ -49,12 +41,6 @@
       Merb.logger.level.should == 4
     end
 
-    it "should set the log level to a specific numeric value when that value is set into Mer" do
-      Merb::Config[:log_level] = 5
-      Merb.reset_logger!
-      Merb.logger.level.should == 5
-    end
-
     it "should set the log level to :debug (0) when Merb.environment is development" do
       Merb.environment = "development"
       Merb::Config.delete(:log_level)
@@ -294,81 +280,4 @@ def set_level(level)
       Merb.logger.should log_with_method(:fatal)
     end
   end # #fatal
-  
-  describe "#verbose" do
-    before do
-      @stream = Merb::Config[:log_stream] = StringIO.new
-      Merb.reset_logger!
-    end
-    
-    describe "when Merb::Config[:verbose] is false" do
-      it "should not log any messages" do
-        Merb::Config[:verbose] = false
-        Merb::Config[:log_level] = :debug
-        Merb.logger.verbose("message", :fatal)
-        Merb.logger.flush
-        
-        Merb.logger.log.string.should_not include("message")
-      end
-    end
-    
-    describe "when Merb::Config[:verbose] is true" do
-      before do
-        Merb::Config[:verbose] = true
-        Merb::Config[:log_level] = :debug
-      end
-
-      it "adds to the buffer with error level" do
-        set_level(:error)
-        Merb.logger.verbose("message", :error)
-        Merb.logger.flush
-        Merb.logger.log.string.should include("message")
-      end
-
-      it "adds to the buffer with fatal level" do
-        set_level(:fatal)
-        Merb.logger.verbose("message", :error)
-        Merb.logger.flush
-        Merb.logger.log.string.should_not include("message")
-      end
-      
-    end
-  end
-  
-  describe "#verbose!" do
-    before do
-      @stream = Merb::Config[:log_stream] = StringIO.new
-      Merb.reset_logger!
-    end
-    
-    describe "when Merb::Config[:verbose] is false" do
-      it "should not log any messages" do
-        Merb::Config[:verbose] = false
-        Merb::Config[:log_level] = :debug
-        Merb.logger.verbose!("message", :fatal)
-        Merb.logger.log.string.should_not include("message")
-      end
-    end
-    
-    describe "when Merb::Config[:verbose] is true" do
-      before do
-        Merb::Config[:verbose] = true
-        Merb::Config[:log_level] = :debug
-      end
-
-      it "adds to the buffer with error level" do
-        set_level(:error)
-        Merb.logger.verbose!("message", :error)
-        Merb.logger.log.string.should include("message")
-      end
-
-      it "adds to the buffer with fatal level" do
-        set_level(:fatal)
-        Merb.logger.verbose!("message", :error)
-        Merb.logger.log.string.should_not include("message")
-      end
-      
-    end
-  end
-  
 end # Merb::Logger</field>
	<field name="commit_file_name">deferred_spec.rb</field>
	<field name="commit_diff">@@ -6,7 +6,7 @@
     before :each do
       Merb::Router.prepare do      
         match("/deferred/:zoo").defer_to do |request, params|
-          route params.merge(:controller = "w00t") if params[:zoo]
+          params.merge(:controller = "w00t") if params[:zoo]
         end
       end    
     end
@@ -22,7 +22,7 @@
     it "should return the param hash returned by the block" do
       Merb::Router.prepare do
         match("/deferred").defer_to do |request, params|
-          route :hello = "world"
+          :hello = "world"
         end
       end
 
@@ -32,7 +32,7 @@
     it "should accept params" do
       Merb::Router.prepare do
         match("/").defer_to(:controller = "accounts") do |request, params|
-          route params.update(:action = "hello")
+          params.update(:action = "hello")
         end
       end
 
@@ -42,7 +42,7 @@
     it "should be able to define routes after the deferred route" do
       Merb::Router.prepare do
         match("/deferred").defer_to do
-          route :hello = "world"
+          :hello = "world"
         end
 
         match("/").to(:foo = "bar")</field>
	<field name="commit_sha">a7fb18c7f3cf24321ccd8a8e03f6ddafcb6be651</field>
	<field name="commit_message">Merge commit 'adelcambre/sprint' into sprint</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-11T07:06:01Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-11T07:06:01Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_file_name">merb-core.rb</field>
	<field name="commit_diff">@@ -278,11 +278,7 @@ def root_path(*path)
 
     # Logger settings
     def logger
-      Thread.current[:merb_logger] ||= Merb::Logger.new(
-        Merb::Config[:log_stream],
-        Merb::Config[:log_level],
-        Merb::Config[:log_delimiter],
-        Merb::Config[:log_auto_flush])
+      Thread.current[:merb_logger] ||= Merb::Logger.new
     end
 
     def reset_logger!</field>
	<field name="commit_file_name">merb_controller.rb</field>
	<field name="commit_diff">@@ -97,8 +97,6 @@ def self._filter_params(params)
     params
   end
 
-  private
-
   # All methods that are callable as actions.
   #
   # ==== Returns</field>
	<field name="commit_file_name">logger.rb</field>
	<field name="commit_diff">@@ -1,5 +1,16 @@
 # Merb::Logger = Extlib::Logger
 
+class Merb::Logger  Extlib::Logger
+  def verbose!(message, level = :warn)
+    send("#{level}!", message) if Merb::Config[:verbose]
+  end
+
+  def verbose(message, level = :warn)
+    send(level, message) if Merb::Config[:verbose]
+  end
+end
+
+# require "time" # httpdate
 # ==== Public Merb Logger API
 #
 # To replace an existing logger with a new one:
@@ -34,37 +45,168 @@
 #   Merb::Logger.new(log{String, IO},level{Symbol, String})
 module Merb
 
-  class Logger  Extlib::Logger
+  class Logger
+
+    attr_accessor :level
+    attr_accessor :delimiter
+    attr_accessor :auto_flush
+    attr_reader   :buffer
+    attr_reader   :log
+    attr_reader   :init_args
+
+    # ==== Notes
+    # Ruby (standard) logger levels:
+    # :fatal:: An unhandleable error that results in a program crash
+    # :error:: A handleable error condition
+    # :warn:: A warning
+    # :info:: generic (useful) information about system operation
+    # :debug:: low-level information for developers
+    Levels = Mash.new({
+      :fatal = 7,
+      :error = 6,
+      :warn  = 4,
+      :info  = 3,
+      :debug = 0
+    }) unless const_defined?(:Levels)
+
+    @@mutex = {}
 
-    # Appends a message to the log if the specified log level is at least as high as
-    # the log level of the logger if Merb::Config[:verbose]. Then flushes the log 
-    # buffer to disk.
+    private
+
+    # Readies a log for writing.
     #
     # ==== Parameters
-    # messageString:: The message to be logged.
-    # levelSymbol:: The level at which to log. Default is :warn.
+    # logIO, String:: Either an IO object or a name of a logfile.
+    def initialize_log(log)
+      close if @log # be sure that we don't leave open files laying around.
+
+      if log.respond_to?(:write)
+        @log = log
+      elsif File.exist?(log)
+        @log = open(log, (File::WRONLY | File::APPEND))
+        @log.sync = true
+      else
+        FileUtils.mkdir_p(File.dirname(log)) unless File.directory?(File.dirname(log))
+        @log = open(log, (File::WRONLY | File::APPEND | File::CREAT))
+        @log.sync = true
+        @log.write("#{Time.now.httpdate} #{delimiter} info #{delimiter} Logfile created\n")
+      end
+    end
+
+    public
+
+    # To initialize the logger you create a new object, proxies to set_log.
     #
-    # ==== Returns
-    # self:: The logger object for chaining.
+    # ==== Parameters
+    # *args:: Arguments to create the log from. See set_logs for specifics.
+    def initialize(*args)
+      set_log(*args)
+    end
+
+    # Replaces an existing logger with a new one.
     #
-    # @api plugin
-    def verbose!(message, level = :warn)
-      send("#{level}!", message) if Merb::Config[:verbose]
+    # ==== Parameters
+    # logIO, String:: Either an IO object or a name of a logfile.
+    # log_level~to_sym::
+    #   The log level from, e.g. :fatal or :info. Defaults to :error in the
+    #   production environment and :debug otherwise.
+    # delimiterString::
+    #   Delimiter to use between message sections. Defaults to " ~ ".
+    # auto_flushBoolean::
+    #   Whether the log should automatically flush after new messages are
+    #   added. Defaults to false.
+    def set_log(stream = Merb::Config[:log_stream],
+      log_level = Merb::Config[:log_level],
+      delimiter = Merb::Config[:log_delimiter],
+      auto_flush = Merb::Config[:log_auto_flush])
+
+      @buffer                   = []
+      @delimiter                = delimiter
+      @auto_flush               = auto_flush
+
+      if Levels[log_level]
+        @level                  = Levels[log_level]
+      else
+        @level                  = log_level
+      end
+
+      @log                      = stream
+      @mutex = (@@mutex[@log] ||= Mutex.new)
+    end
+
+    # Flush the entire buffer to the log object.
+    def flush
+      return unless @buffer.size  0
+      @mutex.synchronize do
+        @log.write(@buffer.slice!(0..-1).to_s)
+      end
+    end
+
+    # Close and remove the current log object.
+    def close
+      flush
+      @log.close if @log.respond_to?(:close) && !@log.tty?
+      @log = nil
     end
 
-    # Appends a message to the log if the specified log level is at least as high as
-    # the log level of the logger if Merb::Config[:verbose].
+    # Appends a message to the log. The methods yield to an optional block and
+    # the output of this block will be appended to the message.
     #
     # ==== Parameters
-    # messageString:: The message to be logged.
-    # levelSymbol:: The level at which to log. Default is :warn.
+    # stringString:: The message to be logged. Defaults to nil.
     #
     # ==== Returns
-    # self:: The logger object for chaining.
-    #
-    # @api plugin
-    def verbose(message, level = :warn)
-      send(level, message) if Merb::Config[:verbose]
+    # String:: The resulting message added to the log file.
+    def (string = nil)
+      message = ""
+      message  delimiter
+      message  string if string
+      message  "\n" unless message[-1] == ?\n
+      @buffer  message
+      flush if @auto_flush
+
+      message
+    end
+    alias :push :
+
+    # Generate the logging methods for Merb.logger for each log level.
+    Levels.each_pair do |name, number|
+      class_eval -LEVELMETHODS, __FILE__, __LINE__
+
+      # Appends a message to the log if the log level is at least as high as
+      # the log level of the logger.
+      #
+      # ==== Parameters
+      # stringString:: The message to be logged. Defaults to nil.
+      #
+      # ==== Returns
+      # self:: The logger object for chaining.
+      def #{name}(message = nil)
+        self  message if #{number} = level
+        self
+      end
+
+      # Appends a message to the log if the log level is at least as high as
+      # the log level of the logger. The bang! version of the method also auto
+      # flushes the log buffer to disk.
+      #
+      # ==== Parameters
+      # stringString:: The message to be logged. Defaults to nil.
+      #
+      # ==== Returns
+      # self:: The logger object for chaining.
+      def #{name}!(message = nil)
+        self  message if #{number} = level
+        flush if #{number} = level
+        self
+      end
+
+      # ==== Returns
+      # Boolean:: True if this level will be logged by this logger.
+      def #{name}?
+        #{number} = level
+      end
+      LEVELMETHODS
     end
 
   end</field>
	<field name="commit_file_name">logger_spec.rb</field>
	<field name="commit_diff">@@ -21,14 +21,6 @@
 
 describe Merb::Logger do
 
-  describe "Levels" do
-    it "should have the same entries as Extlib::Logger::Levels" do
-      Extlib::Logger::Levels.each do |level, value|
-        Merb::Logger::Levels[level].should == value
-      end
-    end
-  end
-
   describe "#new" do
     it "should call set_log with the arguments it was passed." do
       logger = Merb::Logger.allocate # create an object sans initialization
@@ -49,12 +41,6 @@
       Merb.logger.level.should == 4
     end
 
-    it "should set the log level to a specific numeric value when that value is set into Mer" do
-      Merb::Config[:log_level] = 5
-      Merb.reset_logger!
-      Merb.logger.level.should == 5
-    end
-
     it "should set the log level to :debug (0) when Merb.environment is development" do
       Merb.environment = "development"
       Merb::Config.delete(:log_level)
@@ -294,81 +280,4 @@ def set_level(level)
       Merb.logger.should log_with_method(:fatal)
     end
   end # #fatal
-  
-  describe "#verbose" do
-    before do
-      @stream = Merb::Config[:log_stream] = StringIO.new
-      Merb.reset_logger!
-    end
-    
-    describe "when Merb::Config[:verbose] is false" do
-      it "should not log any messages" do
-        Merb::Config[:verbose] = false
-        Merb::Config[:log_level] = :debug
-        Merb.logger.verbose("message", :fatal)
-        Merb.logger.flush
-        
-        Merb.logger.log.string.should_not include("message")
-      end
-    end
-    
-    describe "when Merb::Config[:verbose] is true" do
-      before do
-        Merb::Config[:verbose] = true
-        Merb::Config[:log_level] = :debug
-      end
-
-      it "adds to the buffer with error level" do
-        set_level(:error)
-        Merb.logger.verbose("message", :error)
-        Merb.logger.flush
-        Merb.logger.log.string.should include("message")
-      end
-
-      it "adds to the buffer with fatal level" do
-        set_level(:fatal)
-        Merb.logger.verbose("message", :error)
-        Merb.logger.flush
-        Merb.logger.log.string.should_not include("message")
-      end
-      
-    end
-  end
-  
-  describe "#verbose!" do
-    before do
-      @stream = Merb::Config[:log_stream] = StringIO.new
-      Merb.reset_logger!
-    end
-    
-    describe "when Merb::Config[:verbose] is false" do
-      it "should not log any messages" do
-        Merb::Config[:verbose] = false
-        Merb::Config[:log_level] = :debug
-        Merb.logger.verbose!("message", :fatal)
-        Merb.logger.log.string.should_not include("message")
-      end
-    end
-    
-    describe "when Merb::Config[:verbose] is true" do
-      before do
-        Merb::Config[:verbose] = true
-        Merb::Config[:log_level] = :debug
-      end
-
-      it "adds to the buffer with error level" do
-        set_level(:error)
-        Merb.logger.verbose!("message", :error)
-        Merb.logger.log.string.should include("message")
-      end
-
-      it "adds to the buffer with fatal level" do
-        set_level(:fatal)
-        Merb.logger.verbose!("message", :error)
-        Merb.logger.log.string.should_not include("message")
-      end
-      
-    end
-  end
-  
 end # Merb::Logger</field>
	<field name="commit_file_name">deferred_spec.rb</field>
	<field name="commit_diff">@@ -6,7 +6,7 @@
     before :each do
       Merb::Router.prepare do      
         match("/deferred/:zoo").defer_to do |request, params|
-          route params.merge(:controller = "w00t") if params[:zoo]
+          params.merge(:controller = "w00t") if params[:zoo]
         end
       end    
     end
@@ -22,7 +22,7 @@
     it "should return the param hash returned by the block" do
       Merb::Router.prepare do
         match("/deferred").defer_to do |request, params|
-          route :hello = "world"
+          :hello = "world"
         end
       end
 
@@ -32,7 +32,7 @@
     it "should accept params" do
       Merb::Router.prepare do
         match("/").defer_to(:controller = "accounts") do |request, params|
-          route params.update(:action = "hello")
+          params.update(:action = "hello")
         end
       end
 
@@ -42,7 +42,7 @@
     it "should be able to define routes after the deferred route" do
       Merb::Router.prepare do
         match("/deferred").defer_to do
-          route :hello = "world"
+          :hello = "world"
         end
 
         match("/").to(:foo = "bar")</field>
	<field name="commit_sha">d425060afd09ba313ae5fba3568029106009abf8</field>
	<field name="commit_message">remove the route method from specs</field>
	<field name="commit_author_name">Andy Delcambre</field>
	<field name="commit_author_date">2008-10-11T07:00:50Z</field>
	<field name="commit_author_email">adelcambre@engineyard.com</field>
	<field name="commit_committer_name">Andy Delcambre</field>
	<field name="commit_committer_date">2008-10-11T07:00:50Z</field>
	<field name="commit_committer_email">adelcambre@engineyard.com</field>
	<field name="commit_file_name">deferred_spec.rb</field>
	<field name="commit_diff">@@ -6,7 +6,7 @@
     before :each do
       Merb::Router.prepare do      
         match("/deferred/:zoo").defer_to do |request, params|
-          route params.merge(:controller = "w00t") if params[:zoo]
+          params.merge(:controller = "w00t") if params[:zoo]
         end
       end    
     end
@@ -22,7 +22,7 @@
     it "should return the param hash returned by the block" do
       Merb::Router.prepare do
         match("/deferred").defer_to do |request, params|
-          route :hello = "world"
+          :hello = "world"
         end
       end
 
@@ -32,7 +32,7 @@
     it "should accept params" do
       Merb::Router.prepare do
         match("/").defer_to(:controller = "accounts") do |request, params|
-          route params.update(:action = "hello")
+          params.update(:action = "hello")
         end
       end
 
@@ -42,7 +42,7 @@
     it "should be able to define routes after the deferred route" do
       Merb::Router.prepare do
         match("/deferred").defer_to do
-          route :hello = "world"
+          :hello = "world"
         end
 
         match("/").to(:foo = "bar")</field>
	<field name="commit_sha">d4917e085ab21bd15ec1960745f0e5e3449a16aa</field>
	<field name="commit_message">crap, stray non-comment</field>
	<field name="commit_author_name">Andy Delcambre</field>
	<field name="commit_author_date">2008-10-11T06:53:57Z</field>
	<field name="commit_author_email">adelcambre@engineyard.com</field>
	<field name="commit_committer_name">Andy Delcambre</field>
	<field name="commit_committer_date">2008-10-11T06:53:57Z</field>
	<field name="commit_committer_email">adelcambre@engineyard.com</field>
	<field name="commit_file_name">merb_controller.rb</field>
	<field name="commit_diff">@@ -97,8 +97,6 @@ def self._filter_params(params)
     params
   end
 
-  private
-
   # All methods that are callable as actions.
   #
   # ==== Returns</field>
	<field name="commit_sha">c9054d2c03f5daacce44aaedf225e23c9c1ee48f</field>
	<field name="commit_message">Revert "Move most merb logger code out, into extlib"

This reverts commit 7a73c146dd28f4456b7ef2d1819834c67e04fa2a.</field>
	<field name="commit_author_name">Andy Delcambre</field>
	<field name="commit_author_date">2008-10-11T06:38:33Z</field>
	<field name="commit_author_email">adelcambre@engineyard.com</field>
	<field name="commit_committer_name">Andy Delcambre</field>
	<field name="commit_committer_date">2008-10-11T06:38:33Z</field>
	<field name="commit_committer_email">adelcambre@engineyard.com</field>
	<field name="commit_file_name">merb-core.rb</field>
	<field name="commit_diff">@@ -278,11 +278,7 @@ def root_path(*path)
 
     # Logger settings
     def logger
-      Thread.current[:merb_logger] ||= Merb::Logger.new(
-        Merb::Config[:log_stream],
-        Merb::Config[:log_level],
-        Merb::Config[:log_delimiter],
-        Merb::Config[:log_auto_flush])
+      Thread.current[:merb_logger] ||= Merb::Logger.new
     end
 
     def reset_logger!</field>
	<field name="commit_file_name">logger.rb</field>
	<field name="commit_diff">@@ -1,5 +1,16 @@
 # Merb::Logger = Extlib::Logger
 
+class Merb::Logger  Extlib::Logger
+  def verbose!(message, level = :warn)
+    send("#{level}!", message) if Merb::Config[:verbose]
+  end
+
+  def verbose(message, level = :warn)
+    send(level, message) if Merb::Config[:verbose]
+  end
+end
+
+# require "time" # httpdate
 # ==== Public Merb Logger API
 #
 # To replace an existing logger with a new one:
@@ -34,37 +45,168 @@
 #   Merb::Logger.new(log{String, IO},level{Symbol, String})
 module Merb
 
-  class Logger  Extlib::Logger
+  class Logger
+
+    attr_accessor :level
+    attr_accessor :delimiter
+    attr_accessor :auto_flush
+    attr_reader   :buffer
+    attr_reader   :log
+    attr_reader   :init_args
+
+    # ==== Notes
+    # Ruby (standard) logger levels:
+    # :fatal:: An unhandleable error that results in a program crash
+    # :error:: A handleable error condition
+    # :warn:: A warning
+    # :info:: generic (useful) information about system operation
+    # :debug:: low-level information for developers
+    Levels = Mash.new({
+      :fatal = 7,
+      :error = 6,
+      :warn  = 4,
+      :info  = 3,
+      :debug = 0
+    }) unless const_defined?(:Levels)
+
+    @@mutex = {}
 
-    # Appends a message to the log if the specified log level is at least as high as
-    # the log level of the logger if Merb::Config[:verbose]. Then flushes the log 
-    # buffer to disk.
+    private
+
+    # Readies a log for writing.
     #
     # ==== Parameters
-    # messageString:: The message to be logged.
-    # levelSymbol:: The level at which to log. Default is :warn.
+    # logIO, String:: Either an IO object or a name of a logfile.
+    def initialize_log(log)
+      close if @log # be sure that we don't leave open files laying around.
+
+      if log.respond_to?(:write)
+        @log = log
+      elsif File.exist?(log)
+        @log = open(log, (File::WRONLY | File::APPEND))
+        @log.sync = true
+      else
+        FileUtils.mkdir_p(File.dirname(log)) unless File.directory?(File.dirname(log))
+        @log = open(log, (File::WRONLY | File::APPEND | File::CREAT))
+        @log.sync = true
+        @log.write("#{Time.now.httpdate} #{delimiter} info #{delimiter} Logfile created\n")
+      end
+    end
+
+    public
+
+    # To initialize the logger you create a new object, proxies to set_log.
     #
-    # ==== Returns
-    # self:: The logger object for chaining.
+    # ==== Parameters
+    # *args:: Arguments to create the log from. See set_logs for specifics.
+    def initialize(*args)
+      set_log(*args)
+    end
+
+    # Replaces an existing logger with a new one.
     #
-    # @api plugin
-    def verbose!(message, level = :warn)
-      send("#{level}!", message) if Merb::Config[:verbose]
+    # ==== Parameters
+    # logIO, String:: Either an IO object or a name of a logfile.
+    # log_level~to_sym::
+    #   The log level from, e.g. :fatal or :info. Defaults to :error in the
+    #   production environment and :debug otherwise.
+    # delimiterString::
+    #   Delimiter to use between message sections. Defaults to " ~ ".
+    # auto_flushBoolean::
+    #   Whether the log should automatically flush after new messages are
+    #   added. Defaults to false.
+    def set_log(stream = Merb::Config[:log_stream],
+      log_level = Merb::Config[:log_level],
+      delimiter = Merb::Config[:log_delimiter],
+      auto_flush = Merb::Config[:log_auto_flush])
+
+      @buffer                   = []
+      @delimiter                = delimiter
+      @auto_flush               = auto_flush
+
+      if Levels[log_level]
+        @level                  = Levels[log_level]
+      else
+        @level                  = log_level
+      end
+
+      @log                      = stream
+      @mutex = (@@mutex[@log] ||= Mutex.new)
+    end
+
+    # Flush the entire buffer to the log object.
+    def flush
+      return unless @buffer.size  0
+      @mutex.synchronize do
+        @log.write(@buffer.slice!(0..-1).to_s)
+      end
+    end
+
+    # Close and remove the current log object.
+    def close
+      flush
+      @log.close if @log.respond_to?(:close) && !@log.tty?
+      @log = nil
     end
 
-    # Appends a message to the log if the specified log level is at least as high as
-    # the log level of the logger if Merb::Config[:verbose].
+    # Appends a message to the log. The methods yield to an optional block and
+    # the output of this block will be appended to the message.
     #
     # ==== Parameters
-    # messageString:: The message to be logged.
-    # levelSymbol:: The level at which to log. Default is :warn.
+    # stringString:: The message to be logged. Defaults to nil.
     #
     # ==== Returns
-    # self:: The logger object for chaining.
-    #
-    # @api plugin
-    def verbose(message, level = :warn)
-      send(level, message) if Merb::Config[:verbose]
+    # String:: The resulting message added to the log file.
+    def (string = nil)
+      message = ""
+      message  delimiter
+      message  string if string
+      message  "\n" unless message[-1] == ?\n
+      @buffer  message
+      flush if @auto_flush
+
+      message
+    end
+    alias :push :
+
+    # Generate the logging methods for Merb.logger for each log level.
+    Levels.each_pair do |name, number|
+      class_eval -LEVELMETHODS, __FILE__, __LINE__
+
+      # Appends a message to the log if the log level is at least as high as
+      # the log level of the logger.
+      #
+      # ==== Parameters
+      # stringString:: The message to be logged. Defaults to nil.
+      #
+      # ==== Returns
+      # self:: The logger object for chaining.
+      def #{name}(message = nil)
+        self  message if #{number} = level
+        self
+      end
+
+      # Appends a message to the log if the log level is at least as high as
+      # the log level of the logger. The bang! version of the method also auto
+      # flushes the log buffer to disk.
+      #
+      # ==== Parameters
+      # stringString:: The message to be logged. Defaults to nil.
+      #
+      # ==== Returns
+      # self:: The logger object for chaining.
+      def #{name}!(message = nil)
+        self  message if #{number} = level
+        flush if #{number} = level
+        self
+      end
+
+      # ==== Returns
+      # Boolean:: True if this level will be logged by this logger.
+      def #{name}?
+        #{number} = level
+      end
+      LEVELMETHODS
     end
 
   end</field>
	<field name="commit_file_name">logger_spec.rb</field>
	<field name="commit_diff">@@ -21,14 +21,6 @@
 
 describe Merb::Logger do
 
-  describe "Levels" do
-    it "should have the same entries as Extlib::Logger::Levels" do
-      Extlib::Logger::Levels.each do |level, value|
-        Merb::Logger::Levels[level].should == value
-      end
-    end
-  end
-
   describe "#new" do
     it "should call set_log with the arguments it was passed." do
       logger = Merb::Logger.allocate # create an object sans initialization
@@ -49,12 +41,6 @@
       Merb.logger.level.should == 4
     end
 
-    it "should set the log level to a specific numeric value when that value is set into Mer" do
-      Merb::Config[:log_level] = 5
-      Merb.reset_logger!
-      Merb.logger.level.should == 5
-    end
-
     it "should set the log level to :debug (0) when Merb.environment is development" do
       Merb.environment = "development"
       Merb::Config.delete(:log_level)
@@ -294,81 +280,4 @@ def set_level(level)
       Merb.logger.should log_with_method(:fatal)
     end
   end # #fatal
-  
-  describe "#verbose" do
-    before do
-      @stream = Merb::Config[:log_stream] = StringIO.new
-      Merb.reset_logger!
-    end
-    
-    describe "when Merb::Config[:verbose] is false" do
-      it "should not log any messages" do
-        Merb::Config[:verbose] = false
-        Merb::Config[:log_level] = :debug
-        Merb.logger.verbose("message", :fatal)
-        Merb.logger.flush
-        
-        Merb.logger.log.string.should_not include("message")
-      end
-    end
-    
-    describe "when Merb::Config[:verbose] is true" do
-      before do
-        Merb::Config[:verbose] = true
-        Merb::Config[:log_level] = :debug
-      end
-
-      it "adds to the buffer with error level" do
-        set_level(:error)
-        Merb.logger.verbose("message", :error)
-        Merb.logger.flush
-        Merb.logger.log.string.should include("message")
-      end
-
-      it "adds to the buffer with fatal level" do
-        set_level(:fatal)
-        Merb.logger.verbose("message", :error)
-        Merb.logger.flush
-        Merb.logger.log.string.should_not include("message")
-      end
-      
-    end
-  end
-  
-  describe "#verbose!" do
-    before do
-      @stream = Merb::Config[:log_stream] = StringIO.new
-      Merb.reset_logger!
-    end
-    
-    describe "when Merb::Config[:verbose] is false" do
-      it "should not log any messages" do
-        Merb::Config[:verbose] = false
-        Merb::Config[:log_level] = :debug
-        Merb.logger.verbose!("message", :fatal)
-        Merb.logger.log.string.should_not include("message")
-      end
-    end
-    
-    describe "when Merb::Config[:verbose] is true" do
-      before do
-        Merb::Config[:verbose] = true
-        Merb::Config[:log_level] = :debug
-      end
-
-      it "adds to the buffer with error level" do
-        set_level(:error)
-        Merb.logger.verbose!("message", :error)
-        Merb.logger.log.string.should include("message")
-      end
-
-      it "adds to the buffer with fatal level" do
-        set_level(:fatal)
-        Merb.logger.verbose!("message", :error)
-        Merb.logger.log.string.should_not include("message")
-      end
-      
-    end
-  end
-  
 end # Merb::Logger</field>
	<field name="commit_sha">cc0e6ddec4437027e039731b96242995050f069e</field>
	<field name="commit_message">Merge branch 'sprint'</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-11T06:28:07Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-11T06:28:07Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_file_name">merb-core.rb</field>
	<field name="commit_diff">@@ -278,7 +278,11 @@ def root_path(*path)
 
     # Logger settings
     def logger
-      Thread.current[:merb_logger] ||= Merb::Logger.new
+      Thread.current[:merb_logger] ||= Merb::Logger.new(
+        Merb::Config[:log_stream],
+        Merb::Config[:log_level],
+        Merb::Config[:log_delimiter],
+        Merb::Config[:log_auto_flush])
     end
 
     def reset_logger!</field>
	<field name="commit_file_name">bootloader.rb</field>
	<field name="commit_diff">@@ -3,8 +3,8 @@ module Merb
   class BootLoader
 
     # def self.subclasses
-    #---
-    # @semipublic
+    #
+    # @api plugin
     cattr_accessor :subclasses, :after_load_callbacks, :before_load_callbacks, :finished
     self.subclasses, self.after_load_callbacks,
       self.before_load_callbacks, self.finished = [], [], [], []
@@ -16,29 +16,44 @@ class  self
       #
       # ==== Parameters
       # klassClass:: The class inheriting from Merb::BootLoader.
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api plugin
       def inherited(klass)
         subclasses  klass.to_s
         super
       end
 
+      # Execute this boot loader after the specified boot loader.
+      #
       # ==== Parameters
       # klass~to_s::
       #   The boot loader class after which this boot loader should be run.
       #
-      #---
-      # @public
+      # ==== Returns
+      # nil
+      # 
+      # @api plugin
       def after(klass)
         move_klass(klass, 1)
+        nil
       end
 
+      # Execute this boot loader before the specified boot loader.
+      #
       # ==== Parameters
       # klass~to_s::
       #   The boot loader class before which this boot loader should be run.
       #
-      #---
-      # @public
+      # ==== Returns
+      # nil
+      #
+      # @api plugin
       def before(klass)
         move_klass(klass, 0)
+        nil
       end
 
       # Move a class that is inside the bootloader to some place in the Array,
@@ -49,15 +64,26 @@ def before(klass)
       #   The klass to move the bootloader relative to
       # whereInteger::
       #   0 means insert it before; 1 means insert it after
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api private
       def move_klass(klass, where)
         index = Merb::BootLoader.subclasses.index(klass.to_s)
         if index
           Merb::BootLoader.subclasses.delete(self.to_s)
           Merb::BootLoader.subclasses.insert(index + where, self.to_s)
         end
+        nil
       end
 
       # Runs all boot loader classes by calling their run methods.
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api plugin
       def run
         Merb.started = true
         subklasses = subclasses.dup
@@ -74,6 +100,7 @@ def run
           self.finished  bootloader
         end
         self.subclasses = subklasses
+        nil
       end
 
       # Determines whether or not a specific bootloader has finished yet.
@@ -83,6 +110,8 @@ def run
       #
       # ==== Returns
       # Boolean:: Whether or not the bootloader has finished.
+      #
+      # @api private
       def finished?(bootloader)
         self.finished.include?(bootloader.to_s)
       end
@@ -92,8 +121,8 @@ def finished?(bootloader)
       # ==== Returns
       # nil
       #
-      #---
-      # @public
+      # @api plugin
+      # @overridable
       def default_framework
         %w[view model helper controller mailer part].each do |component|
           Merb.push_path(component.to_sym, Merb.root_path("app/#{component}s"))
@@ -111,24 +140,26 @@ def default_framework
         nil
       end
 
+      # Execute a block of code after the app loads.
+      #
       # ==== Parameters
       # &block::
       #   A block to be added to the callbacks that will be executed after the
       #   app loads.
       #
-      #---
-      # @public
+      # @api public
       def after_app_loads(&block)
         after_load_callbacks  block
       end
 
+      # Execute a block of code before the app loads but after dependencies load.
+      #
       # ==== Parameters
       # &block::
       #   A block to be added to the callbacks that will be executed before the
       #   app loads.
       #
-      #---
-      # @public
+      # @api public
       def before_app_loads(&block)
         before_load_callbacks  block
       end
@@ -145,6 +176,11 @@ def before_app_loads(&block)
 class Merb::BootLoader::Logger  Merb::BootLoader
 
   # Sets Merb.logger to a new logger created based on the config settings.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb::Config[:log_level] ||= begin
       if Merb.environment == "production"
@@ -157,8 +193,16 @@ def self.run
     Merb::Config[:log_stream] = Merb.log_stream
 
     print_warnings
+    
+    nil
   end
 
+  # Print a warning if the installed version of rubygems is not supported
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.print_warnings
     if Gem::Version.new(Gem::RubyGemsVersion)  Gem::Version.new("1.1")
       Merb.fatal! "Merb requires Rubygems 1.1 and later. " \
@@ -175,19 +219,32 @@ class Merb::BootLoader::DropPidFile  Merb::BootLoader
   class  self
 
     # Stores a PID file if Merb is running daemonized or clustered.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api plugin
     def run
       Merb::Server.store_pid("main") #if Merb::Config[:daemonize] || Merb::Config[:cluster]
+      nil
     end
   end
 end
 
 # Setup some useful defaults
 class Merb::BootLoader::Defaults  Merb::BootLoader
+  # Sets up the defaults
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb::Request.http_method_overrides.concat([
       proc { |c| c.params[:_method] },
       proc { |c| c.env['HTTP_X_HTTP_METHOD_OVERRIDE'] }
     ])
+    nil
   end
 end
 
@@ -231,12 +288,24 @@ class Merb::BootLoader::BuildFramework  Merb::BootLoader
   class  self
 
     # Builds the framework directory structure.
+    #
+    # ==== Returns
+    # nil
     def run
       build_framework
+      nil
     end
 
-    # This method should be overridden in init.rb before Merb.start to set up
-    # a different framework structure.
+    # Sets up merb paths to support the app's file layout. First, config/framework.rb is checked,
+    # next we look for Merb.root/framework.rb, finally we use the default merb layout (Merb::BootLoader.default_framework)
+    #
+    # This method can be overriden to support other application layouts.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api plugin
+    # @overridable
     def build_framework
       if File.exists?(Merb.root / "config" / "framework.rb")
         require Merb.root / "config" / "framework"
@@ -249,12 +318,17 @@ def build_framework
         path = Array(path)
         Merb.push_path(name, path.first, path.length == 2 ? path[1] : "**/*.rb")
       end
+      nil
     end
   end
 end
 
 class Merb::BootLoader::Dependencies  Merb::BootLoader
 
+  # ==== Returns
+  # Array[Gem::Dependency]:: The dependencies regiestered in init.rb.
+  #
+  # @api plugin
   cattr_accessor :dependencies
   self.dependencies = []
 
@@ -267,7 +341,11 @@ class Merb::BootLoader::Dependencies  Merb::BootLoader
   # before or after insertion methods. Since these are loaded from this
   # bootloader (Dependencies), they can only adapt the bootloaders that
   # haven't been loaded up until this point.
-
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     set_encoding
     # this is crucial: load init file with all the preferences
@@ -280,12 +358,24 @@ def self.run
     enable_json_gem unless Merb::disabled?(:json)
     load_dependencies
     update_logger
+    nil
   end
 
+  # Load each dependency that has been declared so far.
+  # 
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.load_dependencies
     dependencies.each { |dependency| Kernel.load_dependency(dependency) }
+    nil
   end
 
+  # Loads json or json_pure and requires it.
+  #
+  # ==== Returns
+  # nil
   def self.enable_json_gem
     gem "json"
     require "json/ext"
@@ -294,6 +384,13 @@ def self.enable_json_gem
     require "json/pure"
   end
 
+  # Resets the logger and sets the log_stream to Merb::Config[:log_file] 
+  # if one is specified, falling back to STDOUT.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.update_logger
     Merb.reset_logger!
 
@@ -306,34 +403,64 @@ def self.update_logger
     else
       Merb::Config[:log_stream] ||= STDOUT
     end
+    
+    nil
   end
 
+  # Default encoding to UTF8 if it has not already been set to something else.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.set_encoding
     $KCODE = 'UTF8' if $KCODE == 'NONE' || $KCODE.blank?
+    nil
   end
 
   private
 
     # Determines the path for the environment configuration file
+    #
+    # ==== Returns
+    # String:: The path to the config file for the environment
+    #
+    # @api private
     def self.env_config
       Merb.dir_for(:config) / "environments" / (Merb.environment + ".rb")
     end
 
     # Checks to see whether or not an environment configuration exists
+    #
+    # ==== Returns
+    # Boolean:: Whether or not the environment configuration file exists.
+    #
+    # @api private
     def self.env_config?
       Merb.environment && File.exist?(env_config)
     end
 
-    # Loads the environment configuration file, if any
+    # Loads the environment configuration file, if it is present
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def self.load_env_config
       if env_config?
         STDOUT.puts "Loading #{env_config}" unless Merb.testing?
         load(env_config)
       end
+      nil
     end
 
     # Determines the init file to use, if any.
     # By default Merb uses init.rb from application config directory.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def self.initfile
       if Merb::Config[:init_file]
         Merb::Config[:init_file].chomp(".rb") + ".rb"
@@ -343,6 +470,11 @@ def self.initfile
     end
 
     # Loads the init file, should one exist
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def self.load_initfile
       if File.exists?(initfile)
         STDOUT.puts "Loading init file from #{initfile}" unless Merb.testing?
@@ -352,6 +484,7 @@ def self.load_initfile
           "a flat application and have not specified the init file. If you " \
           "are trying to create a new merb application, use merb-gen app."
       end
+      nil
     end
 end
 
@@ -364,6 +497,11 @@ class Merb::BootLoader::MixinSession  Merb::BootLoader
   #
   # Note: access to Merb::Config is needed, so it needs to run after
   # Merb::BootLoader::Dependencies is done.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     require 'merb-core/dispatch/session'
     Merb::Controller.send(:include, ::Merb::SessionMixin)
@@ -376,8 +514,14 @@ class Merb::BootLoader::BeforeAppLoads  Merb::BootLoader
 
   # Call any before_app_loads hooks that were registered via before_app_loads
   # in any plugins.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb::BootLoader.before_load_callbacks.each { |x| x.call }
+    nil
   end
 end
 
@@ -396,6 +540,18 @@ class Merb::BootLoader::LoadClasses  Merb::BootLoader
   class  self
 
     # Load all classes from Merb's native load paths.
+    #
+    # If fork-based loading is used, every time classes are loaded this will return in a new spawner process
+    # and boot loading will continue from this point in the boot loading process.
+    #
+    # If fork-based loading is not in use, this only returns once and does not fork a new
+    # process.
+    #
+    # ==== Returns
+    # Returns at least once:
+    #   nil
+    #
+    # @api plugin
     def run
       # Add models, controllers, helpers and lib to the load path
       unless @ran
@@ -432,17 +588,37 @@ def run
       end
 
       Merb::Controller.send :include, Merb::GlobalHelpers
+      
+      nil
     end
 
-    # Wait for workers to exit, remove the "main" PID, and exit.
+    # Wait for any children to exit, remove the "main" PID, and
+    # exit.
+    #
+    # ==== Returns
+    # (Does not return.)
+    #
+    # @api private
     def exit_gracefully
       Process.waitall
       Merb::Server.remove_pid("main")
       exit
     end
 
-    # If using fork-based code reloading, set up the BEGIN
-    # point and set up any signals in the parent and worker.
+    # Set up the BEGIN point for fork-based loading and sets up 
+    # any signals in the parent and child. This is done by forking
+    # the app. The child process continues on to run the app. The parent
+    # process waits for the child process to finish and either forks again
+    # 
+    #
+    # ==== Returns
+    # Parent Process:
+    #   (Does not return.)
+    # Child Process returns at least once:
+    #   nil
+    #
+    # @api private
+
     def start_transaction
       Merb.logger.warn! "Parent pid: #{Process.pid}"
       reader, writer = nil, nil
@@ -535,7 +711,13 @@ def start_transaction
     # of 128 when a master process exists will cause the
     # spawner process to be recreated, and the app code reloaded.
     #
-    # @param statusInteger The status code to exit with
+    # ==== Parameters
+    # statusInteger:: The status code to exit with. Defaults to 0.
+    #
+    # ==== Returns
+    # (Does not return.)
+    #
+    # @api private
     def reap_workers(status = 0)
       Merb.exiting = true unless status == 128
 
@@ -559,8 +741,15 @@ def reap_workers(status = 0)
       exit(status)
     end
 
+    # Loads a file, tracking its modified time and, if necessary, the classes it declared.
+    #
     # ==== Parameters
     # fileString:: The file to load.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def load_file(file)
       # Don't do this expensive operation unless we need to
       unless Merb::Config[:fork_for_class_load]
@@ -583,12 +772,20 @@ def load_file(file)
       unless Merb::Config[:fork_for_class_load]
         LOADED_CLASSES[file] = ObjectSpace.classes - klasses
       end
+      
+      nil
     end
 
     # Load classes from given paths - using path/glob pattern.
     #
+    # ==== Parameters
     # *pathsArray::
     #   Array of paths to load classes from - may contain glob pattern
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def load_classes(*paths)
       orphaned_classes = []
       paths.flatten.each do |path|
@@ -602,9 +799,22 @@ def load_classes(*paths)
       end
       load_classes_with_requirements(orphaned_classes)
     end
-
+    
+    # Reloads the classes in the specified file. If fork-based loading is used,
+    # this causes the current processes to be killed and and all classes to be
+    # reloaded. If class-based loading is not in use, the classes declared in that file
+    # are removed and the file is reloaded.
+    #
     # ==== Parameters
     # fileString:: The file to reload.
+    #
+    # ==== Returns
+    # When fork-based loading is used:
+    #   (Does not return.)
+    # When fork-based loading is not in use:
+    #   nil
+    #
+    # @api private
     def reload(file)
       if Merb::Config[:fork_for_class_load]
         reap_workers(128)
@@ -613,9 +823,20 @@ def reload(file)
       end
     end
 
+    # Removes all classes declared in the specified file. Any hashes which use classes as keys
+    # will be protected provided they have been added to Merb.klass_hashes. These hashes have their
+    # keys substituted with placeholders before the file's classes are unloaded. If a block is provided,
+    # it is called before the substituted keys are reconstituted.
+    #
     # ==== Parameters
     # fileString:: The file to remove classes for.
-    # &block:: A block to call with the file that has been removed.
+    # &block:: A block to call with the file that has been removed before klass_hashes are updated
+    # to use the current values of the constants they used as keys.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def remove_classes_in_file(file, &block)
       Merb.klass_hashes.each { |x| x.protect_keys! }
       if klasses = LOADED_CLASSES.delete(file)
@@ -623,15 +844,26 @@ def remove_classes_in_file(file, &block)
       end
       yield file if block_given?
       Merb.klass_hashes.each {|x| x.unprotect_keys!}
+      nil
     end
 
+    # Removes the specified class. 
+    #
+    # Additionally, removes the specified class from the subclass list of every superclass that
+    # tracks it's subclasses in an array returned by _subclasses_list. Classes that wish to use this
+    # functionality are required to alias the reader for their list of subclasses
+    # to _subclasses_list. Plugins for ORMs and other libraries should keep this in mind.
+    #
     # ==== Parameters
     # constClass:: The class to remove.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def remove_constant(const)
       # This is to support superclasses (like AbstractController) that track
-      # their subclasses in a class variable. Classes that wish to use this
-      # functionality are required to alias it to _subclasses_list. Plugins
-      # for ORMs and other libraries should keep this in mind.
+      # their subclasses in a class variable.
       superklass = const
       until (superklass = superklass.superclass).nil?
         if superklass.respond_to?(:_subclasses_list)
@@ -649,16 +881,22 @@ def remove_constant(const)
       rescue NameError
         Merb.logger.debug("Failed to remove constant #{object} from #{base}")
       end
+      nil
     end
 
     private
 
-    # "Better loading" of classes.  If a class fails to load due to a NameError
+    # "Better loading" of classes.  If a file fails to load due to a NameError
     # it will be added to the failed_classes and load cycle will be repeated unless
     # no classes load.
     #
     # ==== Parameters
     # klassesArray[Class]:: Classes to load.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def load_classes_with_requirements(klasses)
       klasses.uniq!
 
@@ -696,26 +934,35 @@ def load_classes_with_requirements(klasses)
         end
         break if(klasses.size == size_at_start || klasses.size == 0)
       end
+      
+      nil
     end
 
   end
 
 end
 
+# Loads the router file. This needs to happen after everything else is loaded while merb is starting up to ensure
+# the router has everything it needs to run.
 class Merb::BootLoader::Router  Merb::BootLoader
   class  self
-
+    
+    # load the router file
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api plugin
     def run
       Merb::BootLoader::LoadClasses.load_file(router_file) if router_file
+      
+      nil
     end
 
-    def reload!
-      if router_file
-        Merb::Router.reset!
-        Merb::BootLoader::LoadClasses.reload(router_file)
-      end
-    end
-
+    # Tries to find the router file.
+    #
+    # ==== Returns
+    # String:: The path to the router file if it exists, nil otherwise.
     def router_file
       @router_file ||= begin
         if File.file?(router = Merb.dir_for(:router) / Merb.glob_for(:router))
@@ -727,18 +974,28 @@ def router_file
   end
 end
 
+# Precompiles all non-partial templates.
 class Merb::BootLoader::Templates  Merb::BootLoader
   class  self
 
-    # Loads the templates into the Merb::InlineTemplates module.
+    # Loads all non-partial templates into the Merb::InlineTemplates module.
+    #
+    # ==== Returns
+    # Array[String]:: The list of template files which were loaded.
+    #
+    # @api plugin
     def run
       template_paths.each do |path|
         Merb::Template.inline_template(File.open(path))
       end
     end
 
+    # Finds a list of templates to load.
+    #
     # ==== Returns
-    # Array[String]:: Template files found.
+    # Array[String]:: All found template files whose basename does not begin with "_".
+    #
+    # @api private
     def template_paths
       extension_glob = "{#{Merb::Template.template_extensions.join(',')}}"
 
@@ -777,6 +1034,11 @@ def template_paths
 class Merb::BootLoader::MimeTypes  Merb::BootLoader
 
   # Registers the default MIME types.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb.add_mime_type(:all,  nil,      %w[*/*])
     Merb.add_mime_type(:yaml, :to_yaml, %w[application/x-yaml text/yaml], :charset = "utf-8")
@@ -785,15 +1047,24 @@ def self.run
     Merb.add_mime_type(:xml,  :to_xml,  %w[application/xml text/xml application/x-xml], {:charset = "utf-8"}, 0.9998)
     Merb.add_mime_type(:js,   :to_json, %w[text/javascript application/javascript application/x-javascript], :charset = "utf-8")
     Merb.add_mime_type(:json, :to_json, %w[application/json text/x-json], :charset = "utf-8")
+    nil
   end
 end
 
+# Set up cookies support in Merb::Controller and Merb::Request
 class Merb::BootLoader::Cookies  Merb::BootLoader
 
+  # Set up cookies support in Merb::Controller and Merb::Request
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     require 'merb-core/dispatch/cookies'
     Merb::Controller.send(:include, Merb::CookiesMixin)
     Merb::Request.send(:include, Merb::CookiesMixin::RequestMixin)
+    nil
   end
 
 end
@@ -802,6 +1073,11 @@ class Merb::BootLoader::SetupSession  Merb::BootLoader
 
   # Enable the configured session container(s); any class that inherits from
   # SessionContainer will be considered by its session_store_type attribute.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     # Require all standard session containers.
     Dir[Merb.framework_root / "merb-core" / "dispatch" / "session" / "*.rb"].each do |file|
@@ -826,6 +1102,7 @@ def self.run
 
     # Mixin the Merb::Session module to add app-level functionality to sessions
     Merb::SessionContainer.send(:include, Merb::Session)
+    nil
   end
 
 end
@@ -834,14 +1111,26 @@ class Merb::BootLoader::AfterAppLoads  Merb::BootLoader
 
   # Call any after_app_loads hooks that were registered via after_app_loads in
   # init.rb.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb::BootLoader.after_load_callbacks.each {|x| x.call }
+    nil
   end
 end
 
 # In case someone's running a sparse app, the default exceptions require the
 # Exceptions class.
 class Merb::BootLoader::SetupStubClasses  Merb::BootLoader
+  # Declares empty Application and Exception controllers.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     unless defined?(Exceptions)
       Object.class_eval -RUBY
@@ -853,23 +1142,47 @@ class Exceptions  Application
         end
       RUBY
     end
+    nil
   end
 end
 
 class Merb::BootLoader::ChooseAdapter  Merb::BootLoader
 
   # Choose the Rack adapter/server to use and set Merb.adapter.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb.adapter = Merb::Rack::Adapter.get(Merb::Config[:adapter])
   end
 end
 
+class Merb::BootLoader::StartWorkerThread  Merb::BootLoader
+
+  # Starts the worker thread used by the run_later helper.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
+  def self.run
+    Merb::Worker.start
+  end
+end
+
 class Merb::BootLoader::RackUpApplication  Merb::BootLoader
   # Setup the Merb Rack App or read a rackup file located at
   # Merb::Config[:rackup] with the same syntax as the
   # rackup tool that comes with rack. Automatically evals the file in
   # the context of a Rack::Builder.new { } block. Allows for mounting
   # additional apps or middleware.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     require 'rack'
     if File.exists?(Merb.dir_for(:config) / "rack.rb")
@@ -888,13 +1201,24 @@ def self.run
          run Merb::Rack::Application.new
        }.to_app
     end
-
+    
+    nil
   end
 end
 
 class Merb::BootLoader::ReloadClasses  Merb::BootLoader
 
   class TimedExecutor
+    # Executes the associated block every @seconds@ seconds in a separate thread.
+    #
+    # ==== Parameters
+    # secondsInteger:: Number of seconds to sleep in between runs of &block.
+    # &block:: The block to execute periodically.
+    #
+    # ==== Returns
+    # Thread:: The thread executing the block periodically.
+    #
+    # @api private
     def self.every(seconds, &block)
       Thread.abort_on_exception = true
       Thread.new do
@@ -907,7 +1231,14 @@ def self.every(seconds, &block)
     end
   end
 
-  # Setup the class reloader if it's been specified in config.
+  # Set up the class reloader if class reloading is enabled. This checks periodically 
+  # for modifications to files loaded by the LoadClasses BootLoader and reloads them
+  # when they are modified.
+  # 
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     return unless Merb::Config[:reload_classes]
 
@@ -928,10 +1259,16 @@ def self.run
       GC.start
       reload(paths)
     end
-
+    
+    nil
   end
 
-  # Reloads all files.
+  # Reloads all files which have been modified since they were last loaded.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.reload(paths)
     paths.each do |file|
       next if LoadClasses::MTIMES[file] &&
@@ -939,5 +1276,7 @@ def self.reload(paths)
 
       LoadClasses.reload(file)
     end
+    
+    nil
   end
 end</field>
	<field name="commit_file_name">config.rb</field>
	<field name="commit_diff">@@ -6,8 +6,12 @@ class Config
 
     class  self
 
+      # Returns the hash of default config values for Merb.
+      #
       # ==== Returns
       # Hash:: The defaults for the config.
+      #
+      # @api private
       def defaults
         @defaults ||= {
           :host                   = "0.0.0.0",
@@ -39,29 +43,45 @@ def defaults
       #     config[:exception_details] = false
       #     config[:log_stream]        = STDOUT
       #   end
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api public
       def use
         @configuration ||= {}
         yield @configuration
+        nil
       end
-
+      
+      # Detects whether the provided key is in the config.
+      #
       # ==== Parameters
       # keyObject:: The key to check.
       #
       # ==== Returns
       # Boolean:: True if the key exists in the config.
+      #
+      # @api public
       def key?(key)
         @configuration.key?(key)
       end
 
+      # Retrieve the value of a config entry.
+      #
       # ==== Parameters
       # keyObject:: The key to retrieve the parameter for.
       #
       # ==== Returns
       # Object:: The value of the configuration parameter.
+      #
+      # @api public
       def [](key)
         (@configuration ||= setup)[key]
       end
 
+      # Set the value of a config entry.
+      #
       # ==== Parameters
       # keyObject:: The key to set the parameter for.
       # valObject:: The value of the parameter.
@@ -69,12 +89,21 @@ def []=(key, val)
         (@configuration ||= setup)[key] = val
       end
 
+      # Remove the value of a config entry.
+      #
       # ==== Parameters
       # keyObject:: The key of the parameter to delete.
+      #
+      # ==== Returns
+      # Object:: The value of the removed entry.
+      #
+      # @api public
       def delete(key)
         @configuration.delete(key)
       end
 
+      # Retrieve the value of a config entry, returning the provided default if the key is not present
+      #
       # ==== Parameters
       # keyObject:: The key to retrieve the parameter for.
       # defaultObject::
@@ -86,14 +115,22 @@ def fetch(key, default)
         @configuration.fetch(key, default)
       end
 
+      # Returns the configuration as a hash.
+      #
       # ==== Returns
       # Hash:: The config as a hash.
+      #
+      # @api public
       def to_hash
         @configuration
       end
 
+      # Returns the config as YAML.
+      #
       # ==== Returns
       # String:: The config as YAML.
+      #
+      # @api public
       def to_yaml
         require "yaml"
         @configuration.to_yaml
@@ -104,6 +141,11 @@ def to_yaml
       # ==== Parameters
       # settingsHash::
       #   Configuration settings to use. These are merged with the defaults.
+      #
+      # ==== Returns
+      # The configuration as a hash.
+      #
+      # @api private
       def setup(settings = {})
         @configuration = defaults.merge(settings)
         
@@ -118,6 +160,11 @@ def setup(settings = {})
       #
       # ==== Parameters
       # argvString:: The command line arguments. Defaults to +ARGV+.
+      #
+      # ==== Returns
+      # The configuration as a hash.
+      #
+      # @api private
       def parse_args(argv = ARGV)
         @configuration ||= {}
         # Our primary configuration hash for the length of this method
@@ -352,8 +399,14 @@ def parse_args(argv = ARGV)
       #     log_level   "debug"
       #     log_file    Merb.root / "log" / "special.log"
       #   end
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api public
       def configure(&block)
         ConfigBlock.new(self, &block) if block_given?
+        nil
       end
 
       # Allows retrieval of single key config values via Merb.config.key
@@ -362,6 +415,11 @@ def configure(&block)
       # ==== Parameters
       # method~to_s:: Method name as hash key value.
       # *args:: Value to set the configuration parameter to.
+      #
+      # ==== Returns
+      # The value of the entry fetched or assigned to.
+      #
+      # @api public
       def method_missing(method, *args)
         if method.to_s[-1,1] == '='
           @configuration[method.to_s.tr('=','').to_sym] = *args
@@ -374,11 +432,26 @@ def method_missing(method, *args)
 
     class ConfigBlock
 
+      # Evaluates the provided block, where any call to a method causes
+      # #[]= to be called on klass with the method name as the key and the arguments
+      # as the value.
+      #
+      # ==== Parameters
+      # klassObject~[]=:: The object on which to assign values.
+      # &block:: The block which specifies the config values to set.
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api private
       def initialize(klass, &block)
         @klass = klass
         instance_eval(&block)
       end
 
+      # Assign args as the value of the entry keyed by method.
+      #
+      # @api private
       def method_missing(method, *args)
         @klass[method] = *args
       end</field>
	<field name="commit_file_name">abstract_controller.rb</field>
	<field name="commit_diff">@@ -124,12 +124,13 @@ class Merb::AbstractController
 
   # ==== Returns
   # String:: The controller name in path form, e.g. "admin/items".
-  #---
-  # @public
+  # @api public
   def self.controller_name() @controller_name ||= self.name.to_const_path end
 
   # ==== Returns
   # String:: The controller name in path form, e.g. "admin/items".
+  #
+  # @api public
   def controller_name()      self.class.controller_name                   end
   
   # This is called after the controller is instantiated to figure out where to
@@ -138,9 +139,9 @@ def controller_name()      self.class.controller_name                   end
   #
   # ==== Parameters
   # context~to_s:: The controller context (the action or template name).
-  # type~to_s:: The content type. Defaults to nil.
+  # type~to_s:: The content type. Could be nil. 
   # controller~to_s::
-  #   The name of the controller. Defaults to controller_name.
+  #   The name of the controller. Defaults to being called with the controller_name.  Set t
   #
   #
   # ==== Returns
@@ -160,29 +161,41 @@ def controller_name()      self.class.controller_name                   end
   #
   # This would look for templates at controller.action.mime.type instead
   # of controller/action.mime.type
-  #---
-  # @public
+  #
+  # @api public
+  # @overridable
   def _template_location(context, type, controller)
     controller ? "#{controller}/#{context}" : context
   end
 
-  # The location to look for a template - stub method for particular behaviour.
+  # The location to look for a template - override this method for particular behaviour. 
   #
   # ==== Parameters
   # templateString:: The absolute path to a template - without template extension.
   # type~to_s::
-  #    The mime-type of the template that will be rendered. Defaults to nil.
+  #    The mime-type of the template that will be rendered. Defaults to being called with nil.
   #
-  # @public
+  # @api public
+  # @overridable
   def _absolute_template_location(template, type)
     template
   end
 
+  # Resets the template roots to the template root passed in.
+  #
+  # ==== Parameters
+  # root~to_s:: 
+  #   The new path to set the template root to.  
+  #
+  # @api public
   def self._template_root=(root)
     @_template_root = root
     _reset_template_roots
   end
 
+  # Reset the template root based on the @_template_root ivar.
+  #
+  # @api private
   def self._reset_template_roots
     self.template_roots = [[self._template_root, :_template_location]]
   end
@@ -191,6 +204,8 @@ def self._reset_template_roots
   # rootsArray[Array]::
   #   Template roots as pairs of template root path and template location
   #   method.
+  #
+  # @api unknown
   def self._template_roots
     self.template_roots || _reset_template_roots
   end
@@ -199,45 +214,62 @@ def self._template_roots
   # rootsArray[Array]::
   #   Template roots as pairs of template root path and template location
   #   method.
+  #
+  # @api unknown
   def self._template_roots=(roots)
     self.template_roots = roots
   end
   
+  # Returns the list of classes that have specifically subclassed AbstractController.  
+  # Does not include all decendents.  
+  #
   # ==== Returns
   # Set:: The subclasses.
+  #
+  # @api private
   def self.subclasses_list() _abstract_subclasses end
   
-  class  self
-    # ==== Parameters
-    # klassMerb::AbstractController::
-    #   The controller that is being inherited from Merb::AbstractController
-    def inherited(klass)
-      _abstract_subclasses  klass.to_s
-      helper_module_name = klass.to_s =~ /^(#|Merb::)/ ? "#{klass}Helper" : "Merb::#{klass}Helper"
-      Object.make_module helper_module_name
-      klass.class_eval -HERE
-        include Object.full_const_get("#{helper_module_name}") rescue nil
-      HERE
-      super
-    end    
-  end
+  # ==== Parameters
+  # klassMerb::AbstractController::
+  #   The controller that is being inherited from Merb::AbstractController
+  #
+  # @api private
+  def self.inherited(klass)
+    _abstract_subclasses  klass.to_s
+    helper_module_name = klass.to_s =~ /^(#|Merb::)/ ? "#{klass}Helper" : "Merb::#{klass}Helper"
+    Object.make_module helper_module_name
+    klass.class_eval -HERE
+      include Object.full_const_get("#{helper_module_name}") rescue nil
+    HERE
+    super
+  end    
   
+  # This will initialize the controller, it is designed to be overridden in subclasses (like MerbController)
   # ==== Parameters
-  # *args:: The args are ignored.
+  # *args:: The args are ignored in this class, but we need this so that subclassed initializes can have parameters
+  #
+  # @overridable
   def initialize(*args)
     @_benchmarks = {}
     @_caught_content = {}
   end
   
-  # This will dispatch the request, calling internal before/after dispatch_callbacks
+  # This will dispatch the request, calling internal before/after dispatch callbacks.  
+  # If the return value of _call_filters is not :filter_chain_completed the action is not called, and the return from the filters is used instead. 
   # 
   # ==== Parameters
   # action~to_s::
   #   The action to dispatch to. This will be #send'ed in _call_action.
   #   Defaults to :to_s.
   #
+  # ==== Returns
+  # ~to_s::
+  #   Returns the string that was returned from the action. 
+  #
   # ==== Raises
-  # MerbControllerError:: Invalid body content caught.
+  # ArgumentError:: Invalid result caught from before filters.
+  #
+  # @api plugin
   def _dispatch(action)
     self._before_dispatch_callbacks.each { |cb| cb.call(self) }
     self.action_name = action
@@ -252,7 +284,8 @@ def _dispatch(action)
     @body = case caught
     when :filter_chain_completed  then _call_action(action_name)
     when String                   then caught
-    when nil                      then _filters_halted
+    # return *something* if you throw halt with nothing
+    when nil                      then "htmlbodyh1Filter Chain Halted!/h1/body/html"
     when Symbol                   then __send__(caught)
     when Proc                     then self.instance_eval(&caught)
     else
@@ -267,14 +300,19 @@ def _dispatch(action)
     @body
   end
   
-  # This method exists to provide an overridable hook for ActionArgs
+  # This method exists to provide an overridable hook for ActionArgs.  It uses #send to call the action method.
   #
   # ==== Parameters
   # action~to_s:: the action method to dispatch to
+  #
+  # @api plugin
+  # @overridable
   def _call_action(action)
     send(action)
   end
   
+  # Calls a filter chain. 
+  #
   # ==== Parameters
   # filter_setArray[Filter]::
   #   A set of filters in the form [[:filter, rule], [:filter, rule]]
@@ -290,6 +328,8 @@ def _call_action(action)
   # Procs::
   #   Execute the +Proc+, in the context of the controller (self will be the
   #   controller)
+  #
+  # @api private
   def _call_filters(filter_set)
     (filter_set || []).each do |filter, rule|
       if _call_filter_for_action?(rule, action_name) && _filter_condition_met?(rule)
@@ -308,6 +348,8 @@ def _call_filters(filter_set)
     return :filter_chain_completed
   end
 
+  # Determine whether the filter should be called for the current action using :only and :exclude.
+  #
   # ==== Parameters
   # ruleHash:: Rules for the filter (see below).
   # action_name~to_s:: The name of the action to be called.
@@ -322,6 +364,8 @@ def _call_filters(filter_set)
   #
   # ==== Returns
   # Boolean:: True if the action should be called.
+  #
+  # @api private
   def _call_filter_for_action?(rule, action_name)
     # Both:
     # * no :only or the current action is in the :only list
@@ -330,6 +374,8 @@ def _call_filter_for_action?(rule, action_name)
     (!rule.key?(:exclude) || !rule[:exclude].include?(action_name))
   end
 
+  # Determines whether the filter should be run based on the conditions passed (:if and :unless)
+  #
   # ==== Parameters
   # ruleHash:: Rules for the filter (see below).
   #
@@ -340,6 +386,8 @@ def _call_filter_for_action?(rule, action_name)
   #
   # ==== Returns
   # Boolean:: True if the conditions are met.
+  #
+  # @api private
   def _filter_condition_met?(rule)
     # Both:
     # * no :if or the if condition evaluates to true
@@ -348,6 +396,8 @@ def _filter_condition_met?(rule)
     (!rule.key?(:unless) || ! _evaluate_condition(rule[:unless]))
   end
 
+  # Evaluates a filter condition (:if or :unless)
+  #
   # ==== Parameters
   # conditionSymbol, Proc:: The condition to evaluate.
   #
@@ -360,6 +410,8 @@ def _filter_condition_met?(rule)
   # ==== Alternatives
   # If condition is a symbol, it will be send'ed. If it is a Proc it will be
   # called directly with self as an argument.
+  #
+  # @api private
   def _evaluate_condition(condition)
     case condition
     when Symbol : self.send(condition)
@@ -370,6 +422,7 @@ def _evaluate_condition(condition)
     end
   end
 
+  # Adds a filter to the after filter chain
   # ==== Parameters
   # filterSymbol, Proc:: The filter to add. Defaults to nil.
   # optsHash::
@@ -377,11 +430,15 @@ def _evaluate_condition(condition)
   # &block:: A block to use as a filter if filter is nil.
   #
   # ==== Notes
-  # If the filter already exists, its options will be replaced with opts.
+  # If the filter already exists, its options will be replaced with opts.;
+  #
+  # @api public
   def self.after(filter = nil, opts = {}, &block)
     add_filter(self._after_filters, filter || block, opts)
   end
 
+  # Adds a filter to the before filter chain.  
+  #
   # ==== Parameters
   # filterSymbol, Proc:: The filter to add. Defaults to nil.
   # optsHash::
@@ -390,44 +447,90 @@ def self.after(filter = nil, opts = {}, &block)
   #
   # ==== Notes
   # If the filter already exists, its options will be replaced with opts.
+  #
+  # @api public
   def self.before(filter = nil, opts = {}, &block)
     add_filter(self._before_filters, filter || block, opts)
   end
      
-  # Skip an after filter that has been previously defined (perhaps in a
-  # superclass)
+  # Removes a filter from the after filter chain.  This removes the 
+  # filter from the filter chain for the whole controller and does not 
+  # take any options. 
   #
   # ==== Parameters
-  # filterSymbol:: A filter name to skip.
+  # filterSymbol, String:: A filter name to skip.
+  #
+  # @api public
   def self.skip_after(filter)
     skip_filter(self._after_filters, filter)
   end
   
-  # Skip a before filter that has been previously defined (perhaps in a
-  # superclass).
+  # Removes a filter from the before filter chain.  This removes the 
+  # filter from the filter chain for the whole controller and does not 
+  # take any options.
   #
   # ==== Parameters
-  # filterSymbol:: A filter name to skip.
+  # filterSymbol, String:: A filter name to skip.
+  #
+  # @api public
   def self.skip_before(filter)
     skip_filter(self._before_filters , filter)
   end  
-  
-  #---
-  # Defaults that can be overridden by plugins, other mixins, or subclasses
-  def _filters_halted()   "htmlbodyh1Filter Chain Halted!/h1/body/html"  end
-  
-  # ==== Parameters
-  # name~to_sym, Hash:: The name of the URL to generate.
-  # rparamsHash:: Parameters for the route generation.
+
+  # There are three possible ways to use this method.  First, if you have a named route, 
+  # you can specify the route as the first parameter as a symbol and any paramters in a 
+  # hash.  Second, you can generate the default route by just passing the params hash, 
+  # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+  # allows you to specify the parameters to a named route in the order they appear in the 
+  # router.  
+  #
+  # ==== Parameters(Named Route)
+  # nameSymbol:: 
+  #   The name of the route. 
+  # argsHash:: 
+  #   Parameters for the route generation.
+  #
+  # ==== Parameters(Default Route)
+  # argsHash:: 
+  #   Parameters for the route generation.  This route will use the default route. 
+  #
+  # ==== Parameters(Anonymous Parameters)
+  # nameSymbol::
+  #   The name of the route.  
+  # argsArray:: 
+  #   An array of anonymous parameters to generate the route
+  #   with. These parameters are assigned to the route parameters
+  #   in the order that they are passed.
   #
   # ==== Returns
   # String:: The generated URL.
   #
-  # ==== Alternatives
-  # If a hash is used as the first argument, a default route will be
-  # generated based on it and rparams.
-  # ====
-  # TODO: Update this documentation
+  # ==== Examples
+  # Named Route
+  #
+  # Merb::Router.prepare do
+  #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+  # end
+  #
+  # url(:articles, :title = "new_article")
+  #
+  # Default Route
+  #
+  # Merb::Router.prepare do
+  #   default_routes
+  # end
+  #
+  # url(:controller = "articles", :action = "new")
+  #
+  # Anonymous Paramters
+  #
+  # Merb::Router.prepare do
+  #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+  # end
+  #
+  # url(:articles, 2008, 10, "test_article")
+  #
+  # @api public
   def url(name, *args)
     args  {}
     Merb::Router.url(name, *args)
@@ -435,22 +538,12 @@ def url(name, *args)
   
   alias_method :relative_url, :url
 
-  # ==== Parameters
-  # name~to_sym, Hash:: The name of the URL to generate.
-  # rparamsHash:: Parameters for the route generation.
-  #
-  # ==== Returns
-  # String:: The generated url with protocol + hostname + URL.
-  #
-  # ==== Options
-  #
-  # :protocol and :host options are special: use them to explicitly
-  # specify protocol and host of resulting url. If you omit them,
-  # protocol and host of request are used.
+  # Returns the absolute url including the passed protocol and host.  
+  # 
+  # This uses the same arguments as the url method, with added requirements 
+  # of protocol and host options. 
   #
-  # ==== Alternatives
-  # If a hash is used as the first argument, a default route will be
-  # generated based on it and rparams.
+  # @api public
   def absolute_url(name, *args)
     # FIXME: arrgh, why request.protocol returns http://?
     # :// is not part of protocol name
@@ -494,8 +587,9 @@ def absolute_url(name, *args)
   # resource(:users, :new)      # = /users/new
   # resource(:@user, :edit)     # = /users/10/edit
   #
+  # @api public
   def resource(*args)
-    args  params
+    args  {}
     Merb::Router.resource(*args)
   end
 
@@ -507,6 +601,8 @@ def resource(*args)
   #
   # ==== Returns
   # String:: The output of a template block or the return value of a non-template block converted to a string.
+  #
+  # @api public
   def capture(*args, &block)
     ret = nil
 
@@ -523,13 +619,16 @@ def capture(*args, &block)
   # ==== Parameters
   # strString:: The string to concatenate to the buffer.
   # bindingBinding:: The binding to use for the buffer.
+  #
+  # @api public
   def concat(str, binding)
     send("concat_#{@_engine}", str, binding)
   end
 
   private
+  # adds a filter to the specified filter chain
   # ==== Parameters
-  # filtersArray[Filter]:: The filter list that this should be added to.
+  # filtersArray[Filter]:: The filter chain that this should be added to.
   # filterFilter:: A filter that should be added.
   # optsHash::
   #   Filter options (see class documentation under ttFilter Options/tt).
@@ -538,6 +637,8 @@ def concat(str, binding)
   # ArgumentError::
   #   Both :only and :exclude, or :if and :unless given, if filter is not a
   #   Symbol, String or Proc, or if an unknown option is passed.
+  #
+  # @api private
   def self.add_filter(filters, filter, opts={})
     raise(ArgumentError,
       "You can specify either :only or :exclude but 
@@ -576,11 +677,13 @@ def self.add_filter(filters, filter, opts={})
   # inheritence hierarchies.
   #
   # ==== Parameters
-  # filtersArray[Filter]:: The filter list that this should be removed from.
+  # filtersArray[Filter]:: The filter chain that this should be removed from.
   # filterFilter:: A filter that should be removed.
   #
   # ==== Raises
   # ArgumentError:: filter not Symbol or String.
+  #
+  # @api private
   def self.skip_filter(filters, filter)
     raise(ArgumentError, 'You can only skip filters that have a String or Symbol name.') unless
       [Symbol, String].include? filter.class
@@ -600,6 +703,8 @@ def self.skip_filter(filters, filter)
   #
   # ==== Examples
   #   normalize_filters!(:only = :new) #= {:only = [:new]}
+  #
+  # @api public
   def self.normalize_filters!(opts={})
     opts[:only]     = Array(opts[:only]).map {|x| x.to_s} if opts[:only]
     opts[:exclude]  = Array(opts[:exclude]).map {|x| x.to_s} if opts[:exclude]</field>
	<field name="commit_file_name">exceptions.rb</field>
	<field name="commit_diff">@@ -1,12 +1,35 @@
 class Exception
+  # Returns the action_name that will be invoked on your Exceptions controller when this
+  # exception is raised. Override this method to force a different action to be invoked.
+  #
+  # ==== Returns
+  # String:: The name of the action in the Exceptions controller which will get invoked
+  #   when this exception is raised during a request.
+  # 
+  # @api public
+  # @overridable
   def action_name() self.class.action_name end
   
+  
+  # ==== Returns
+  # Boolean:: Whether or not this exception is the same as another.
+  #
+  # @api public
   def same?(other)
     self.class == other.class &&
     self.message == other.message &&
     self.backtrace == other.backtrace
   end
   
+  # Returns the action_name that will be invoked on your Exceptions controller when an instance
+  # is raised during a request.
+  #
+  # ==== Returns
+  # String:: The name of the action in the Exceptions controller which will get invoked
+  #   when an instance of this Exception sub/class is raised by an action.
+  # 
+  # @api public
+  # @overridable
   def self.action_name
     if self == Exception
       return nil unless Object.const_defined?(:Exceptions) && 
@@ -17,6 +40,14 @@ def self.action_name
       Exceptions.method_defined?(name) ? name : superclass.action_name
   end
   
+  # The status that will be sent in the response when an instance is
+  # raised during a request. Override this to send a different status.
+  #
+  # ==== Returns
+  # Integer:: The status code to send in the response. Defaults to 500.
+  #
+  # @api public
+  # @overridable
   def self.status
     500
   end
@@ -135,6 +166,8 @@ class  self
         #
         # ==== Returns
         # Fixnum:: The status code of this exception.
+        #
+        # @api public
         def status
           const_get(:STATUS) rescue 0
         end
@@ -147,6 +180,11 @@ def status
         #
         # ==== Parameters
         # num~to_i:: The status code
+        #
+        # ==== Returns
+        # (Integer, nil):: The status set on this exception, or nil if a status was already set.
+        #
+        # @api private
         def status=(num)
           unless self.status?
             register_status_code(self, num)
@@ -157,7 +195,9 @@ def status=(num)
         # See if a status-code has been defined (on self explicitly).
         #
         # ==== Returns
-        # Boolean:: Whether the a status code has been set
+        # Boolean:: Whether a status code has been set
+        #
+        # @api private
         def status?
           self.const_defined?(:STATUS)
         end
@@ -172,6 +212,8 @@ def status?
         # 
         # subclassMerb::ControllerExceptions::Base::
         #   The Exception class that is inheriting from Merb::ControllerExceptions::Base
+        #
+        # @api public
         def inherited(subclass)
           # don't set the constant yet - any class methods will be called after self.inherited
           # unless self.status = ... is set explicitly, the status code will be inherited
@@ -184,6 +226,8 @@ def inherited(subclass)
         #
         # ==== Parameters
         # num~to_i:: The status code
+        #
+        # @api privaate
         def register_status_code(klass, code)
           name = self.to_s.split('::').last.snake_case
           STATUS_CODES[name.to_sym] = code.to_i</field>
	<field name="commit_file_name">merb_controller.rb</field>
	<field name="commit_diff">@@ -15,104 +15,106 @@ def self.subclasses_list() _subclasses end
   include Merb::AuthenticationMixin
   include Merb::ConditionalGetMixin
 
-  class  self
-
-    # ==== Parameters
-    # klassMerb::Controller::
-    #   The Merb::Controller inheriting from the base class.
-    def inherited(klass)
-      _subclasses  klass.to_s
-      super
-      klass._template_root = Merb.dir_for(:view) unless self._template_root
-    end
+  # ==== Parameters
+  # klassMerb::Controller::
+  #   The Merb::Controller inheriting from the base class.
+  #
+  # @api private
+  def self.inherited(klass)
+    _subclasses  klass.to_s
+    super
+    klass._template_root = Merb.dir_for(:view) unless self._template_root
+  end
 
-    # Hide each of the given methods from being callable as actions.
-    #
-    # ==== Parameters
-    # *names~to-s:: Actions that should be added to the list.
-    #
-    # ==== Returns
-    # Array[String]::
-    #   An array of actions that should not be possible to dispatch to.
-    #
-    #---
-    # @public
-    def hide_action(*names)
-      self._hidden_actions = self._hidden_actions | names.map { |n| n.to_s }
-    end
+  # Hide each of the given methods from being callable as actions.
+  #
+  # ==== Parameters
+  # *names~to-s:: Actions that should be added to the list.
+  #
+  # ==== Returns
+  # Array[String]::
+  #   An array of actions that should not be possible to dispatch to.
+  #
+  # @api public
+  def self.hide_action(*names)
+    self._hidden_actions = self._hidden_actions | names.map { |n| n.to_s }
+  end
 
-    # Makes each of the given methods being callable as actions. You can use
-    # this to make methods included from modules callable as actions.
-    #
-    # ==== Parameters
-    # *names~to-s:: Actions that should be added to the list.
-    #
-    # ==== Returns
-    # Array[String]::
-    #   An array of actions that should be dispatched to even if they would not
-    #   otherwise be.
-    #
-    # ==== Example
-    #   module Foo
-    #     def self.included(base)
-    #       base.show_action(:foo)
-    #     end
-    #
-    #     def foo
-    #       # some actiony stuff
-    #     end
-    #
-    #     def foo_helper
-    #       # this should not be an action
-    #     end
-    #   end
-    #
-    #---
-    # @public
-    def show_action(*names)
-      self._shown_actions = self._shown_actions | names.map {|n| n.to_s}
-    end
+  # Makes each of the given methods being callable as actions. You can use
+  # this to make methods included from modules callable as actions.
+  #
+  # ==== Parameters
+  # *names~to-s:: Actions that should be added to the list.
+  #
+  # ==== Returns
+  # Array[String]::
+  #   An array of actions that should be dispatched to even if they would not
+  #   otherwise be.
+  #
+  # ==== Example
+  #   module Foo
+  #     def self.included(base)
+  #       base.show_action(:foo)
+  #     end
+  #
+  #     def foo
+  #       # some actiony stuff
+  #     end
+  #
+  #     def foo_helper
+  #       # this should not be an action
+  #     end
+  #   end
+  #
+  # @api public
+  def self.show_action(*names)
+    self._shown_actions = self._shown_actions | names.map {|n| n.to_s}
+  end
 
-    # The list of actions that are callable, after taking defaults,
-    # _hidden_actions and _shown_actions into consideration. It is calculated
-    # once, the first time an action is dispatched for this controller.
-    #
-    # ==== Returns
-    # SimpleSet[String]:: A set of actions that should be callable.
-    def callable_actions
-      @callable_actions ||= Extlib::SimpleSet.new(_callable_methods)
-    end
+  # The list of actions that are callable, after taking defaults,
+  # _hidden_actions and _shown_actions into consideration. It is calculated
+  # once, the first time an action is dispatched for this controller.
+  #
+  # ==== Returns
+  # SimpleSet[String]:: A set of actions that should be callable.
+  #
+  # @api public
+  def self.callable_actions
+    @callable_actions ||= Extlib::SimpleSet.new(_callable_methods)
+  end
 
-    # This is a stub method so plugins can implement param filtering if they want.
-    #
-    # ==== Parameters
-    # paramsHash{Symbol = String}:: A list of params
-    #
-    # ==== Returns
-    # Hash{Symbol = String}:: A new list of params, filtered as desired
-    #---
-    # @semipublic
-    def _filter_params(params)
-      params
-    end
+  # This is a stub method so plugins can implement param filtering if they want.
+  #
+  # ==== Parameters
+  # paramsHash{Symbol = String}:: A list of params
+  #
+  # ==== Returns
+  # Hash{Symbol = String}:: A new list of params, filtered as desired
+  # 
+  # @api plugin
+  # @overridable
+  def self._filter_params(params)
+    params
+  end
 
-    private
+  private
 
-    # All methods that are callable as actions.
-    #
-    # ==== Returns
-    # Array:: A list of method names that are also actions
-    def _callable_methods
-      callables = []
-      klass = self
-      begin
-        callables  (klass.public_instance_methods(false) + klass._shown_actions) - klass._hidden_actions
-        klass = klass.superclass
-      end until klass == Merb::AbstractController || klass == Object
-      callables.flatten.reject{|action| action =~ /^_.*/}
-    end
+  # All methods that are callable as actions.
+  #
+  # ==== Returns
+  # Array:: A list of method names that are also actions
+  #
+  # @api private
+  def self._callable_methods
+    callables = []
+    klass = self
+    begin
+      callables  (klass.public_instance_methods(false) + klass._shown_actions) - klass._hidden_actions
+      klass = klass.superclass
+    end until klass == Merb::AbstractController || klass == Object
+    callables.flatten.reject{|action| action =~ /^_.*/}
+  end
 
-  end # class  self
 
   # The location to look for a template for a particular controller, context,
   # and mime-type. This is overridden from AbstractController, which defines a
@@ -124,14 +126,14 @@ def _callable_methods
   #    The mime-type of the template that will be rendered. Defaults to nil.
   # controller~to_s::
   #   The name of the controller that will be rendered. Defaults to
-  #   controller_name.
+  #   controller_name.  This will be "layout" for rendering a layout.  
   #
   # ==== Notes
   # By default, this renders ":controller/:action.:type". To change this,
   # override it in your application class or in individual controllers.
   #
-  #---
-  # @public
+  # @api public
+  # @overridable
   def _template_location(context, type, controller)
     _conditionally_append_extension(controller ? "#{controller}/#{context}" : "#{context}", type)
   end
@@ -148,7 +150,7 @@ def _template_location(context, type, controller)
   # type~to_s::
   #    The mime-type of the template that will be rendered. Defaults to nil.
   #
-  # @public
+  # @api public
   def _absolute_template_location(template, type)
     _conditionally_append_extension(template, type)
   end
@@ -164,8 +166,9 @@ def _absolute_template_location(template, type)
   # headersHash{header = value}::
   #   A hash of headers to start the controller with. These headers can be
   #   overridden later by the #headers method.
-  #---
-  # @semipublic
+  # 
+  # @api plugin
+  # @overridable
   def initialize(request, status=200, headers={'Content-Type' = 'text/html; charset=utf-8'})
     super()
     @request, @_status, @headers = request, status, headers
@@ -181,8 +184,8 @@ def initialize(request, status=200, headers={'Content-Type' = 'text/html; chars
   #
   # ==== Raises
   # ActionNotFound:: The requested action was not found in class.
-  #---
-  # @semipublic
+  #
+  # @api plugin
   def _dispatch(action=:index)
     Merb.logger.info("Params: #{self.class._filter_params(request.params).inspect}")
     start = Time.now
@@ -197,6 +200,10 @@ def _dispatch(action=:index)
 
   attr_reader :request, :headers
 
+  # ==== Returns
+  # Fixnum:: The response status code
+  #
+  # @api public
   def status
     @_status
   end
@@ -205,6 +212,8 @@ def status
   #
   # ==== Parameters
   # sFixnum, Symbol:: A status-code or named http-status
+  #
+  # @api public
   def status=(s)
     if s.is_a?(Symbol) && STATUS_CODES.key?(s)
       @_status = STATUS_CODES[s]
@@ -217,27 +226,112 @@ def status=(s)
 
   # ==== Returns
   # Hash:: The parameters from the request object
+  # 
+  # @api public
   def params()  request.params  end
     
-  # ==== Parameters
-  # name~to_sym, Hash:: The name of the URL to generate.
-  # rparamsHash:: Parameters for the route generation.
+  # There are three possible ways to use this method.  First, if you have a named route, 
+  # you can specify the route as the first parameter as a symbol and any paramters in a 
+  # hash.  Second, you can generate the default route by just passing the params hash, 
+  # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+  # allows you to specify the parameters to a named route in the order they appear in the 
+  # router.  
+  #
+  # ==== Parameters(Named Route)
+  # nameSymbol:: 
+  #   The name of the route. 
+  # argsHash:: 
+  #   Parameters for the route generation.
+  #
+  # ==== Parameters(Default Route)
+  # argsHash:: 
+  #   Parameters for the route generation.  This route will use the default route. 
+  #
+  # ==== Parameters(Anonymous Parameters)
+  # nameSymbol::
+  #   The name of the route.  
+  # argsArray:: 
+  #   An array of anonymous parameters to generate the route
+  #   with. These parameters are assigned to the route parameters
+  #   in the order that they are passed.
   #
   # ==== Returns
   # String:: The generated URL.
   #
-  # ==== Alternatives
-  # If a hash is used as the first argument, a default route will be
-  # generated based on it and rparams.
-  # ====
-  # TODO: Update this documentation
+  # ==== Examples
+  # Named Route
+  #
+  # Merb::Router.prepare do
+  #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+  # end
+  #
+  # url(:articles, :title = "new_article")
+  #
+  # Default Route
+  #
+  # Merb::Router.prepare do
+  #   default_routes
+  # end
+  #
+  # url(:controller = "articles", :action = "new")
+  #
+  # Anonymous Paramters
+  #
+  # Merb::Router.prepare do
+  #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+  # end
+  #
+  # url(:articles, 2008, 10, "test_article")
+  #
+  # @api public
   def url(name, *args)
     args  params
     Merb::Router.url(name, *args)
   end
+  
+  # Generates a URL for a single or nested resource.
+  #
+  # ==== Parameters
+  # resourcesSymbol,Object:: The resources for which the URL
+  #   should be generated. These resources should be specified
+  #   in the router.rb file using #resources and #resource.
+  #
+  # optionsHash:: Any extra parameters that are needed to
+  #   generate the URL.
+  #
+  # ==== Returns
+  # String:: The generated URL.
+  #
+  # ==== Examples
+  #
+  # Merb::Router.prepare do
+  #   resources :users do
+  #     resources :comments
+  #   end
+  # end
+  #
+  # resource(:users)            # = /users
+  # resource(@user)             # = /users/10
+  # resource(@user, :comments)  # = /users/10/comments
+  # resource(@user, @comment)   # = /users/10/comments/15
+  # resource(:users, :new)      # = /users/new
+  # resource(:@user, :edit)     # = /users/10/edit
+  #
+  # @api public
+  def resource(*args)
+    args  params
+    Merb::Router.resource(*args)
+  end
+  
 
   alias_method :relative_url, :url
   
+  # Returns the absolute url including the passed protocol and host.  
+  # 
+  # This uses the same arguments as the url method, with added requirements 
+  # of protocol and host options. 
+  #
+  # @api public
   def absolute_url(*args)
     options  = extract_options_from_args!(args) || {}
     options[:protocol] ||= request.protocol
@@ -251,6 +345,8 @@ def absolute_url(*args)
   # ==== Returns
   # Array[Integer, Hash, String]::
   #   The controller's status code, headers, and body
+  #
+  # @api private
   def rack_response
     [status, headers, Merb::Rack::StreamWrapper.new(body)]
   end
@@ -258,6 +354,8 @@ def rack_response
   # Sets a controller to be "abstract" 
   # This controller will not be able to be routed to
   # and is used for super classing only
+  #
+  # @api public
   def self.abstract!
     @_abstract = true
   end
@@ -267,6 +365,8 @@ def self.abstract!
   # === Returns
   # Boolean
   #  true if the controller has been set as abstract
+  #
+  # @api public
   def self.abstract?
     !!@_abstract 
   end
@@ -277,6 +377,15 @@ def self.abstract?
   private
 
   # If not already added, add the proper mime extension to the template path.
+  #
+  # ==== Parameters
+  #
+  # template~to_s ::
+  #   The template path to append the mime type to.
+  # type~to_s ::
+  #   The extension to append to the template path conditionally
+  #
+  # @api private
   def _conditionally_append_extension(template, type)
     type && !template.match(/\.#{type.to_s.escape_regexp}$/) ? "#{template}.#{type}" : template
   end</field>
	<field name="commit_file_name">mime.rb</field>
	<field name="commit_diff">@@ -1,12 +1,32 @@
 module Merb
   class  self
 
+    
+    # Returns a hash of the available mime types. 
+    #
     # ==== Returns
-    # Hash:: The available mime types.
+    # Hash{Symbol = Hash{Symbol = Object}}:: The available mime types.
+    #
+    # ==== Notes
+    # Each entry corresponds to a call to add_mime_type, having the mime type key (:html, :xml, :json, etc.)
+    # as the key and a hash containing the following entries:
+    #   :accepts           # the mime types that will be recognized by this entry
+    #   :transform_method  # the method called on an object to convert it to content of this type (such as to_json)
+    #   :content_type      # the value set to the "Content-Type" HTTP header when this mime is sent in a response
+    #   :response_headers  # sent in a response using this content type
+    #   :default_quality   # the scale factor used in describing content type preference
+    #   :response_block    # the block to be called with the controller when a request responds to this mime type
+    #
+    # @api public
     def available_mime_types
       ResponderMixin::TYPES
     end
 
+    # ==== Returns
+    # Hash{String = Symbol}:: 
+    #   A hash mapping Content-Type values to the mime type key of the appropriate entry in #available_mime_types
+    #
+    # @api public
     def available_accepts
       ResponderMixin::MIMES
     end
@@ -42,6 +62,11 @@ def available_accepts
     #   correctly appended to the mimetype itself.
     # &block:: a block which recieves the current controller when the format
     #   is set (in the controller's #content_type method)
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api public
     def add_mime_type(key, transform_method, mimes, new_response_headers = {}, default_quality = 1, &block) 
       enforce!(key = Symbol, mimes = Array)
       
@@ -69,6 +94,8 @@ def render_#{key}(thing = nil, opts = {})
           render thing, opts
         end
       EOS
+      
+      nil
     end
 
     # Removes a MIME-type from the mime-type list.
@@ -78,6 +105,8 @@ def render_#{key}(thing = nil, opts = {})
     #
     # ==== Notes
     # :all is the key for */*; It can't be removed.
+    #
+    # @api public
     def remove_mime_type(key)
       return false if key == :all
       ResponderMixin::TYPES.delete(key)
@@ -91,21 +120,12 @@ def remove_mime_type(key)
     #
     # ==== Raises
     # ArgumentError:: The requested mime type is not valid.
+    #
+    # @api public
     def mime_transform_method(key)
       raise ArgumentError, ":#{key} is not a valid MIME-type" unless ResponderMixin::TYPES.key?(key)
       ResponderMixin::TYPES[key][:transform_method]
     end
 
-    # The mime-type for a particular inbound Accepts header.
-    #
-    # ==== Parameters
-    # headerString:: The name of the header to find the mime-type for.
-    #
-    # ==== Returns
-    # Hash:: The mime type information.
-    def mime_by_request_header(header)
-      available_mime_types.find {|key,info| info[:accepts].include?(header)}.first
-    end
-    
   end
 end</field>
	<field name="commit_file_name">authentication.rb</field>
	<field name="commit_diff">@@ -12,6 +12,9 @@ module Merb::AuthenticationMixin
   # realm~to_s:: The realm to authenticate against. Defaults to 'Application'.
   # &authenticator:: A block to check if the authentication is valid.
   #
+  # ==== Returns
+  # Merb::AuthenticationMixin::BasicAuthentication
+  #
   # ==== Examples
   #     class Application  Merb::Controller
   #     
@@ -47,7 +50,7 @@ module Merb::AuthenticationMixin
   #
   # If you need to request basic authentication inside an action you need to use the request! method.
   #
-  # ====Example
+  # ==== Example
   #
   #    class Sessions  Application
   #  
@@ -55,15 +58,24 @@ module Merb::AuthenticationMixin
   #        case content_type
   #        when :html
   #          render
+  #
   #        else
-  #          basic_authentication.request!
+  #         user = basic_authentication.authenticate do |username, password|
+  #           User.authenticate(username, password)
+  #         end
+  #
+  #         if user
+  #           display(user)
+  #         else
+  #           basic_authentication.request
+  #         end
   #        end
   #      end
   # 
   #    end 
   #
-  #---
-  # @public
+  #
+  # @api public
   def basic_authentication(realm = "Application", &authenticator)
     @_basic_authentication ||= BasicAuthentication.new(self, realm, &authenticator)
   end
@@ -72,6 +84,7 @@ class BasicAuthentication
     # So we can have access to the status codes
     include Merb::ControllerExceptions
 
+    # @api private
     def initialize(controller, realm = "Application", &authenticator)
       @controller = controller
       @realm = realm
@@ -79,6 +92,15 @@ def initialize(controller, realm = "Application", &authenticator)
       authenticate_or_request(&authenticator) if authenticator
     end
 
+    # Determines whether or not the user is authenticated using the criteria
+    # in the provided authenticator block.
+    #
+    # ==== Parameters
+    # &authenticator:: A block that decides whether the provided username and password
+    #   are valid.
+    #
+    # ==== Returns
+    # Object:: False if basic auth is not provided, otherwise the return value of the authenticator block.
     def authenticate(&authenticator)
       if @auth.provided? and @auth.basic?
         authenticator.call(*@auth.credentials)
@@ -87,33 +109,56 @@ def authenticate(&authenticator)
       end
     end
 
+    # Request basic authentication and halt the filter chain. This is for use in a before filter.
+    #
+    # ==== Throws
+    # :halt with an "HTTP Basic: Access denied." message with no layout, and sets the status to Unauthorized.
+    #
+    # @api public
     def request
       request!
       throw :halt, @controller.render("HTTP Basic: Access denied.\n", :status = Unauthorized.status, :layout = false)
     end
     
-    # This is a special case for use outside a before filter.  Use this if you need to 
-    # request basic authenticaiton as part of an action
+    # Sets headers to request basic auth.
+    #
+    # ==== Returns
+    # String:: Returns the empty string to provide a response body.
+    #
+    # @api public
     def request!
       @controller.status = Unauthorized.status
       @controller.headers['WWW-Authenticate'] = 'Basic realm="%s"' % @realm
+      ""
     end
     
-    # Checks to see if there has been any basic authentication credentials provided
+    # ==== Returns
+    # Boolean:: Whether there has been any basic authentication credentials provided
+    #
+    # @api public
     def provided?
       @auth.provided?
     end
     
+    # ==== Returns
+    # String:: The username provided in the request.
+    #
+    # @api public
     def username
       provided? ? @auth.credentials.first : nil
     end
     
+    # ==== Returns
+    # String:: The password provided in the request.
+    #
+    # @api public
     def password
       provided? ? @auth.credentials.last : nil
     end
     
     protected
     
+    # @api private
     def authenticate_or_request(&authenticator)
       authenticate(&authenticator) || request
     end</field>
	<field name="commit_file_name">conditional_get.rb</field>
	<field name="commit_diff">@@ -29,6 +29,8 @@ module Merb::ConditionalGetMixin
   # tag~to_s::
   #   value of ETag header enclosed in double quotes
   #   as required by the RFC
+  #
+  # @api public
   def etag=(tag)
     headers[Merb::Const::ETAG] = %("#{tag}")
   end
@@ -36,6 +38,8 @@ def etag=(tag)
   # ==== Returns
   # String::
   #   Value of ETag response header or nil if it's not set.
+  #
+  # @api public
   def etag
     headers[Merb::Const::ETAG]
   end
@@ -44,6 +48,8 @@ def etag
   # Boolean::
   # true if ETag response header equals If-None-Match request header,
   # false otherwise
+  #
+  # @api public
   def etag_matches?(tag = self.etag)
     tag == self.request.if_none_match
   end
@@ -54,6 +60,8 @@ def etag_matches?(tag = self.etag)
   # tagTime::
   # resource modification timestamp converted into format
   # required by the RFC
+  #
+  # @api public
   def last_modified=(time)
     headers[Merb::Const::LAST_MODIFIED] = time.httpdate
   end
@@ -61,6 +69,8 @@ def last_modified=(time)
   # ==== Returns
   # String::
   #   Value of Last-Modified response header or nil if it's not set.
+  #
+  # @api public
   def last_modified
     Time.rfc2822(headers[Merb::Const::LAST_MODIFIED])
   end
@@ -69,6 +79,8 @@ def last_modified
   # Boolean::
   # true if Last-Modified response header is  than
   # If-Modified-Since request header value, false otherwise.
+  #
+  # @api public
   def not_modified?(time = self.last_modified)
     request.if_modified_since && time && time = request.if_modified_since
   end
@@ -77,6 +89,8 @@ def not_modified?(time = self.last_modified)
   # Boolean::
   # true if either ETag matches or entity is not modified,
   # so request is fresh; false otherwise
+  #
+  # @api public
   def request_fresh?
     etag_matches?(self.etag) || not_modified?(self.last_modified)
   end</field>
	<field name="commit_file_name">controller.rb</field>
	<field name="commit_diff">@@ -4,26 +4,27 @@ module ControllerMixin
     
     # Enqueu a block to run in a background thread outside of the request
     # response dispatch
-    #
+    # 
     # ==== Parameters
-    # takes a block to run later
-    #
+    # &blk:: proc to run later
+    # 
     # ==== Example
     # run_later do
     #   SomeBackgroundTask.run
     # end
-    #
+    # 
+    # @api public
     def run_later(&blk)
       Merb::Dispatcher.work_queue  blk
     end
     
     # Renders the block given as a parameter using chunked encoding.
-    #
+    # 
     # ==== Parameters
-    # &blk:: 
+    # &blk::
     #   A block that, when called, will use send_chunks to send chunks of data
     #   down to the server. The chunking will terminate once the block returns.
-    #
+    # 
     # ==== Examples
     #   def stream
     #     prefix = 'p'
@@ -44,6 +45,8 @@ def run_later(&blk)
     #       end
     #     end
     #   end
+    # 
+    # @api public
     def render_chunked(&blk)
       must_support_streaming!
       headers['Transfer-Encoding'] = 'chunked'
@@ -55,12 +58,14 @@ def render_chunked(&blk)
         response.write("0\r\n\r\n")
       }
     end
-
+    
     # Writes a chunk from +render_chunked+ to the response that is sent back to
     # the client. This should only be called within a +render_chunked+ block.
     #
     # ==== Parameters
     # dataString:: a chunk of data to return.
+    # 
+    # @api public
     def send_chunk(data)
       only_runs_on_mongrel!
       @response.write('%x' % data.size + "\r\n")
@@ -71,53 +76,59 @@ def send_chunk(data)
     # &blk::
     #   A proc that should get called outside the mutex, and which will return
     #   the value to render.
-    #
+    # 
     # ==== Returns
     # Proc::
-    #   A block that Mongrel can call later, allowing Merb to release the
+    #   A block that the server can call later, allowing Merb to release the
     #   thread lock and render another request.
+    # 
+    # @api public
     def render_deferred(&blk)
-      Proc.new {|response|
+      Proc.new do |response|
         response.write(blk.call)
-      }
+      end
     end
     
     # Renders the passed in string, then calls the block outside the mutex and
     # after the string has been returned to the client.
-    #
+    # 
     # ==== Parameters
     # strString:: A +String+ to return to the client.
     # &blk:: A block that should get called once the string has been returned.
-    #
+    # 
     # ==== Returns
     # Proc::
     #   A block that Mongrel can call after returning the string to the user.
+    # 
+    # @api public
     def render_then_call(str, &blk)
-      Proc.new {|response|
+      Proc.new do |response|
         response.write(str)
-        blk.call        
-      }      
+        blk.call
+      end
     end
-
+    
     # ==== Parameters
     # urlString::
     #   URL to redirect to. It can be either a relative or fully-qualified URL.
     # optsHash:: An options hash (see below)
-    #
+    # 
     # ==== Options (opts)
     # :messageHash::
     #   Messages to pass in url query string as value for "_message"
     # :permanentBoolean::
     #   When true, return status 301 Moved Permanently
-    #
+    # 
     # ==== Returns
     # String:: Explanation of redirect.
-    #
+    # 
     # ==== Examples
     #   redirect("/posts/34")
     #   redirect("/posts/34", :message = { :notice = 'Post updated successfully!' })
     #   redirect("http://www.merbivore.com/")
     #   redirect("http://www.merbivore.com/", :permanent = true)
+    # 
+    # @api public
     def redirect(url, opts = {})
       default_redirect_options = { :message = nil, :permanent = false }
       opts = default_redirect_options.merge(opts)
@@ -131,17 +142,20 @@ def redirect(url, opts = {})
       "htmlbodyYou are being a href=\"#{url}\"redirected/a./body/html"
     end
     
+    # Retreives the redirect message either locally or from the request.
+    # 
+    # @api public
     def message
       @_message = defined?(@_message) ? @_message : request.message
     end
     
     # Sends a file over HTTP.  When given a path to a file, it will set the
     # right headers so that the static file is served directly.
-    #
+    # 
     # ==== Parameters
     # fileString:: Path to file to send to the client.
     # optsHash:: Options for sending the file (see below).
-    #
+    # 
     # ==== Options (opts)
     # :dispositionString::
     #   The disposition of the file send. Defaults to "attachment".
@@ -151,6 +165,8 @@ def message
     #
     # ==== Returns
     # IO:: An I/O stream for the file.
+    # 
+    # @api public
     def send_file(file, opts={})
       opts.update(Merb::Const::DEFAULT_SEND_FILE_OPTIONS.merge(opts))
       disposition = opts[:disposition].dup || 'attachment'
@@ -160,28 +176,30 @@ def send_file(file, opts={})
         'Content-Disposition'       = disposition,
         'Content-Transfer-Encoding' = 'binary'
       )
-      Proc.new {|response|
+      Proc.new do |response|
         file = File.open(file, 'rb')
         while chunk = file.read(16384)
           response.write chunk
-        end  
+        end
         file.close
-      }
+      end
     end
     
     # Send binary data over HTTP to the user as a file download. May set content type,
     # apparent file name, and specify whether to show data inline or download as an attachment.
-    #
+    # 
     # ==== Parameters
     # dataString:: Path to file to send to the client.
     # optsHash:: Options for sending the data (see below).
-    #
+    # 
     # ==== Options (opts)
     # :dispositionString::
     #   The disposition of the file send. Defaults to "attachment".
     # :filenameString::
     #   The name to use for the file. Defaults to the filename of file.
     # :typeString:: The content type.
+    # 
+    # @api public
     def send_data(data, opts={})
       opts.update(Merb::Const::DEFAULT_SEND_FILE_OPTIONS.merge(opts))
       disposition = opts[:disposition].dup || 'attachment'
@@ -195,13 +213,13 @@ def send_data(data, opts={})
     end
     
     # Streams a file over HTTP.
-    #
+    # 
     # ==== Parameters
     # optsHash:: Options for the file streaming (see below).
     # &stream::
     #   A block that, when called, will return an object that responds to
     #   +get_lines+ for streaming.
-    #
+    # 
     # ==== Options
     # :dispositionString::
     #   The disposition of the file send. Defaults to "attachment".
@@ -216,6 +234,8 @@ def send_data(data, opts={})
     #       response.write chunk
     #     end
     #   end
+    # 
+    # @api public
     def stream_file(opts={}, &stream)
       opts.update(Merb::Const::DEFAULT_SEND_FILE_OPTIONS.merge(opts))
       disposition = opts[:disposition].dup || 'attachment'
@@ -227,32 +247,37 @@ def stream_file(opts={}, &stream)
         # Rack specification requires header values to respond to :each
         'CONTENT-LENGTH'            = opts[:content_length].to_s
       )
-      Proc.new{|response|
+      Proc.new do |response|
         stream.call(response)
-      }
+      end
     end
-
+    
     # Uses the nginx specific +X-Accel-Redirect+ header to send a file directly
-    # from nginx. For more information, see the nginx wiki:
+    # from nginx.
+    # 
+    # ==== Notes
+    # Unless Content-Disposition is set before calling this method,
+    # it is set to attachment with streamed file name.
+    # 
+    # For more information, see the nginx wiki:
     # http://wiki.codemongers.com/NginxXSendfile
-    #
+    # 
     # and the following sample gist:
     # http://gist.github.com/11225
-    #
+    # 
     # there's also example application up on GitHub:
-    #
+    # 
     # http://github.com/michaelklishin/nginx-x-accel-redirect-example-application/tree/master
-    #
-    # Unless Content-Disposition is set before calling this method,
-    # it is set to attachment with streamed file name.
-    #
+    # 
     # ==== Parameters
     # pathString:: Path to file to send to the client.
     # content_typeString:: content type header value. By default is set to empty string to let
     #                        Nginx detect it.
-    #
+    # 
     # ==== Return
-    # One space string.
+    # String:: precisely a single space.
+    # 
+    # @api public
     def nginx_send_file(path, content_type = "")
       # Let Nginx detect content type unless it is explicitly set
       headers['Content-Type']        = content_type
@@ -262,17 +287,17 @@ def nginx_send_file(path, content_type = "")
       
       return ' '
     end  
-  
+    
     # Sets a cookie to be included in the response.
-    #
+    # 
     # If you need to set a cookie, then use the +cookies+ hash.
-    #
+    # 
     # ==== Parameters
     # name~to_s:: A name for the cookie.
     # value~to_s:: A value for the cookie.
     # expires~gmtime:~strftime, Hash:: An expiration time for the cookie, or a hash of cookie options.
-    # ---
-    # @public
+    # 
+    # @api public
     def set_cookie(name, value, expires)
       options = expires.is_a?(Hash) ? expires : {:expires = expires}
       cookies.set_cookie(name, value, options)
@@ -280,11 +305,13 @@ def set_cookie(name, value, expires)
     
     # Marks a cookie as deleted and gives it an expires stamp in the past. This
     # method is used primarily internally in Merb.
-    #
+    # 
     # Use the +cookies+ hash to manipulate cookies instead.
-    #
+    # 
     # ==== Parameters
     # name~to_s:: A name for the cookie to delete.
+    # 
+    # @api public
     def delete_cookie(name)
       set_cookie(name, nil, Merb::Const::COOKIE_EXPIRED_TIME)
     end
@@ -296,6 +323,8 @@ def delete_cookie(name)
     #
     # ==== Returns
     # String:: The escaped object.
+    # 
+    # @api public
     def escape_xml(obj)
       Erubis::XmlHelper.escape_xml(obj.to_s)
     end
@@ -303,14 +332,17 @@ def escape_xml(obj)
     alias escape_html escape_xml
     
     private
-      # Marks an output method that only runs on the mongrel webserver.
-      #
-      # ==== Raises
-      # NotImplemented:: The Rack adapter is not mongrel.
-      def only_runs_on_mongrel!
-        unless Merb::Config[:log_stream] == 'mongrel'
-          raise(Merb::ControllerExceptions::NotImplemented, "Current Rack adapter is not mongrel. cannot support this feature")
-        end
+    
+    # Marks an output method that only runs on the Mongrel webserver.
+    # 
+    # ==== Raises
+    # NotImplemented:: The Rack adapter is not mongrel.
+    # 
+    # @api private
+    def only_runs_on_mongrel!
+      unless Merb::Config[:log_stream] == 'mongrel'
+        raise(Merb::ControllerExceptions::NotImplemented, "Current Rack adapter is not mongrel. cannot support this feature")
       end
+    end
   end
 end</field>
	<field name="commit_file_name">render.rb</field>
	<field name="commit_diff">@@ -4,6 +4,8 @@ module Merb::RenderMixin
 
   # ==== Parameters
   # baseModule:: Module that is including RenderMixin (probably a controller)
+  #
+  # @private
   def self.included(base)
     base.extend(ClassMethods)
     base.class_eval do
@@ -17,6 +19,8 @@ module ClassMethods
     #
     # ==== Returns
     # Hash:: An options hash
+    #
+    # @api public
     def default_render_options
       self._default_render_options ||= {}
     end
@@ -25,6 +29,8 @@ def default_render_options
     #
     # ==== Parameters
     # optsHash:: An options hash
+    #
+    # @api public
     def render_options(opts)
       self._default_render_options = opts
     end
@@ -40,11 +46,18 @@ def render_options(opts)
     #
     # ==== Returns
     # Hash:: The default render options.
+    #
+    # @api public
     def layout(layout)
       self.default_render_options.update(:layout = (layout || false))
     end
 
     # Enable the default layout logic - reset the layout option.
+    #
+    # ==== Returns
+    # ~to_s:: The layout that was previously set.
+    #
+    # @api public
     def default_layout
       self.default_render_options.delete(:layout)
     end
@@ -82,8 +95,8 @@ def default_layout
   # ==== Alternatives
   # If you pass a Hash as the first parameter, it will be moved to opts and
   # "thing" will be the current action
-  #---
-  # @public
+  #
+  # @api public
   def render(thing = nil, opts = {})
     # render :format = :xml means render nil, :format = :xml
     opts, thing = thing, nil if thing.is_a?(Hash)
@@ -188,6 +201,7 @@ def render(thing = nil, opts = {})
   # The transformed object will not be used in a layout unless a :layout is
   # explicitly passed in the opts.
   #
+  # @api public
   def display(object, thing = nil, opts = {})
     template_opt = thing.is_a?(Hash) ? thing.delete(:template) : opts.delete(:template)
 
@@ -268,6 +282,8 @@ def display(object, thing = nil, opts = {})
   #
   # In this case, "one" will be available in the partial through the local
   # variable named +number+.
+  #
+  # @api public
   def partial(template, opts={})
 
     # partial :foo becomes "#{controller_name}/_foo"
@@ -323,6 +339,8 @@ def partial(template, opts={})
   #
   # ==== Returns
   # Hash:: The options hash that was passed in.
+  #
+  # @api private
   def _handle_options!(opts)
     self.status = opts.delete(:status).to_i if opts[:status]
     headers["Location"] = opts.delete(:location) if opts[:location]
@@ -346,6 +364,8 @@ def _handle_options!(opts)
   #   If a layout was specified (either via layout in the class or by passing
   #   one in to this method), and not found. No error will be raised if no
   #   layout was specified, and the default layouts were not found.
+  #
+  # @api private
   def _get_layout(layout = nil)
     return false if layout == false
     
@@ -385,6 +405,8 @@ def _get_layout(layout = nil)
   # ==== Returns
   # Array[Symbol, String]::
   #   A pair consisting of the template method and location.
+  #
+  # @api private
   def _template_for(context, content_type, controller=nil, template=nil, locals=[])
     template_method, template_location = nil, nil
 
@@ -419,6 +441,8 @@ def _template_for(context, content_type, controller=nil, template=nil, locals=[]
   #
   # ==== Returns
   # String:: The method, if it exists. Otherwise return nil.
+  #
+  # @api private
   def _template_method_for(template_location, locals)
     meth = Merb::Template.template_for(template_location, [], locals)
     meth && self.respond_to?(meth) ? meth : nil
@@ -431,8 +455,8 @@ def _template_method_for(template_location, locals)
   #
   # ==== Parameters
   # objObject:: The key in the thrown_content hash. Defaults to :for_layout.
-  #---
-  # @public
+  #
+  # @api public
   def catch_content(obj = :for_layout)
     @_caught_content[obj] || ''
   end
@@ -441,8 +465,8 @@ def catch_content(obj = :for_layout)
   #
   # ==== Parameters
   # objObject:: The key in the thrown_content hash. Defaults to :for_layout.
-  #---
-  # @public
+  #
+  # @api public
   def thrown_content?(obj = :for_layout)
     @_caught_content.key?(obj)
   end
@@ -463,8 +487,8 @@ def thrown_content?(obj = :for_layout)
   # ==== Example
   #   throw_content(:foo, "Foo")
   #   catch_content(:foo) #= "Foo"
-  #---
-  # @public
+  #
+  # @api public
   def throw_content(obj, string = nil, &block)
     unless string || block_given?
       raise ArgumentError, "You must pass a block or a string into throw_content"
@@ -499,8 +523,8 @@ def append_content(obj, string = nil, &block)
   #
   # ==== Parameters
   # objObject:: The key in the thrown_content hash. Defaults to :for_layout.
-  #---
-  # @public
+  #
+  # @api public
   def clear_content(obj = :for_layout)
     @_caught_content.delete(obj) unless @_caught_content[obj].nil?
   end</field>
	<field name="commit_file_name">template.rb</field>
	<field name="commit_diff">@@ -86,7 +86,8 @@ def needs_compilation?(path, locals)
       return true if Merb::Config[:reload_templates] || !METHOD_LIST[path]
       
       current_locals = SUPPORTED_LOCALS_LIST[path]
-      locals.any?{|local| !current_locals.include?(local)}
+      current_locals != locals &&
+        !(locals - current_locals).empty?
     end
     
     # Get all known template extensions</field>
	<field name="commit_file_name">hash.rb</field>
	<field name="commit_diff">@@ -1,4 +1,13 @@
 class Hash
+  # Returns the value of self for each argument and deletes those entries.
+  #
+  # ==== Parameters
+  # *args:: the keys whose values should be extracted and deleted.
+  #
+  # ==== Returns
+  # Array[Object]:: The values of the provided arguments in corresponding order.
+  #
+  # @api public
   def extract!(*args)
     args.map do |arg|
       self.delete(arg)</field>
	<field name="commit_file_name">kernel.rb</field>
	<field name="commit_diff">@@ -39,13 +39,17 @@ def track_dependency(name, *ver, &blk)
   # If that has already happened, the gem will be activated
   # immediately, but it will still be registered.
   # 
-  # @param nameString The name of the gem to load.
-  # @param *verGem::Requirement, Gem::Version, Array, #to_str
+  # ==== Parameters
+  # nameString The name of the gem to load.
+  # *verGem::Requirement, Gem::Version, Array, #to_str
   #   Version requirements to be passed to Gem::Dependency.new.
   #   If the last argument is a Hash, extract the :immediate option,
   #   forcing a dependency to load immediately.
   #
-  # @return Gem::Dependency The dependency information.
+  # ==== Returns
+  # Gem::Dependency:: The dependency information.
+  #
+  # @api public
   def dependency(name, *ver, &blk)
     immediate = ver.last.is_a?(Hash) && ver.pop[:immediate]
     if immediate || Merb::BootLoader.finished?(Merb::BootLoader::Dependencies)
@@ -71,6 +75,8 @@ def dependency(name, *ver, &blk)
   #   as a library.
   #
   # @return Gem::Dependency The dependency information.
+  #
+  # @api private
   def load_dependency(name, *ver, &blk)
     dep = name.is_a?(Gem::Dependency) ? name : track_dependency(name, *ver)
     gem(dep)
@@ -93,7 +99,14 @@ def load_dependency(name, *ver, &blk)
   # Loads both gem and library dependencies that are passed in as arguments.
   # Execution is deferred to the Merb::BootLoader::Dependencies.run during bootup.
   #
-  # @param *argsString, Hash, Array The dependencies to load.
+  # ==== Parameters
+  # *argsString, Hash, Array The dependencies to load.
+  #
+  # ==== Returns
+  # Array[(Gem::Dependency, Array[Gem::Dependency])]:: Gem::Dependencies for the
+  #   dependencies specified in args.
+  #
+  # @api public
   def dependencies(*args)
     args.map do |arg|
       case arg
@@ -118,6 +131,8 @@ def dependencies(*args)
   # @example dependencies "RedCloth"                 # Loads the the RedCloth gem
   # @example dependencies "RedCloth", "merb_helpers" # Loads RedCloth and merb_helpers
   # @example dependencies "RedCloth" = "3.0"        # Loads RedCloth 3.0
+  #
+  # @api private
   def load_dependencies(*args)
     args.map do |arg|
       case arg
@@ -132,7 +147,12 @@ def load_dependencies(*args)
   #
   # @param libraryto_s The library to attempt to include.
   # @param messageString The error to add to the log upon failure. Defaults to nil.
+  #
+  # @api private
+  # @deprecated
   def rescue_require(library, message = nil)
+    Merb.logger.warn("Deprecation warning: rescue_require is deprecated")
+    sleep 2.0
     require library
   rescue LoadError, RuntimeError
     Merb.logger.error!(message) if message
@@ -142,17 +162,22 @@ def rescue_require(library, message = nil)
   # Mapper) you wish to use. Currently Merb has plugins to support
   # ActiveRecord, DataMapper, and Sequel.
   #
-  # @param ormSymbol The ORM to use.
+  # ==== Parameters
+  # ormSymbol:: The ORM to use.
   #
-  # @example
+  # ==== Returns
+  # nil
+  #
+  # ==== Example
   #   use_orm :datamapper
   #
   #   # This will use the DataMapper generator for your ORM
   #   $ merb-gen model ActivityEvent
   #
-  # @note
+  # ==== Notes
   #   If for some reason this is called more than once, latter
   #   call takes over other.
+  #
   # @api public
   def use_orm(orm)
     begin
@@ -163,24 +188,31 @@ def use_orm(orm)
       Merb.logger.warn!("The #{orm_plugin} gem was not found.  You may need to install it.")
       raise e
     end
+    nil
   end
 
   # Used in Merb.root/config/init.rb to tell Merb which testing framework to
   # use. Currently Merb has plugins to support RSpec and Test::Unit.
   #
-  # @param test_frameworkSymbol
+  # ==== Parameters
+  # test_frameworkSymbol::
   #   The test framework to use. Currently only supports :rspec and :test_unit.
   #
-  # @example
+  # ==== Returns
+  # nil
+  #
+  # ==== Example
   #   use_test :rspec
   #
   #   # This will now use the RSpec generator for tests
   #   $ merb-gen model ActivityEvent
+  #
   # @api public
   def use_testing_framework(test_framework, *test_dependencies)
     Merb.test_framework = test_framework
     
     Kernel.dependencies test_dependencies if Merb.env == "test" || Merb.env.nil?
+    nil
   end
 
   def use_test(*args)
@@ -190,14 +222,19 @@ def use_test(*args)
   # Used in Merb.root/config/init.rb to tell Merb which template engine to
   # prefer.
   #
-  # @param template_engineSymbol
+  # ==== Parameters
+  # template_engineSymbol
   #   The template engine to use.
   #
-  # @example
+  # ==== Returns
+  # nil
+  #
+  # ==== Example
   #   use_template_engine :haml
   #
   #   # This will now use haml templates in generators where available.
   #   $ merb-gen resource_controller Project 
+  #
   # @api public
   def use_template_engine(template_engine)
     Merb.template_engine = template_engine
@@ -210,11 +247,14 @@ def use_template_engine(template_engine)
       end
       Kernel.dependency(template_engine_plugin)
     end
+    
+    nil
   rescue LoadError = e
     Merb.logger.warn!("The #{template_engine_plugin} gem was not found.  You may need to install it.")
     raise e
   end
 
+
   # @param iFixnum The caller number. Defaults to 1.
   #
   # @return Array[Array] The file, line and method of the caller.
@@ -222,6 +262,8 @@ def use_template_engine(template_engine)
   # @example
   #   __caller_info__(1)
   #     # = ['/usr/lib/ruby/1.8/irb/workspace.rb', '52', 'irb_binding']
+  #
+  # @api private
   def __caller_info__(i = 1)
     file, line, meth = caller[i].scan(/(.*?):(\d+):in `(.*?)'/).first
   end
@@ -245,6 +287,8 @@ def __caller_info__(i = 1)
   #       [ 123, "      DEBUGGER__.waiting.push Thread.current",      false ],
   #       [ 124, "      @suspend_next = false",                       false ]
   #     ]
+  #
+  # @api private
   def __caller_lines__(file, line, size = 4)
     line = line.to_i
     if file =~ /\(erubis\)/
@@ -262,26 +306,6 @@ def __caller_lines__(file, line, size = 4)
         yield index + line - size, str.chomp
       end
     end
-    # 
-    # lines = File.readlines(file)
-    # current = line.to_i - 1
-    # 
-    # first = current - size
-    # first = first  0 ? 0 : first
-    # 
-    # last = current + size
-    # last = last  lines.size ? lines.size : last
-    # 
-    # log = lines[first..last]
-    # 
-    # area = []
-    # 
-    # log.each_with_index do |line, index|
-    #   index = index + first + 1
-    #   area  [index, line.chomp, index == current + 1]
-    # end
-    # 
-    # area
   end
 
   # Takes a block, profiles the results of running the block
@@ -309,6 +333,8 @@ def __caller_lines__(file, line, size = 4)
   #   Assuming that the total time taken for #puts calls was less than 5% of the
   #   total time to run, #puts won't appear in the profile report.
   #   The code block will be run 30 times in the example above.
+  #
+  # @api private
   def __profile__(name, min=1, iter=100)
     require 'ruby-prof' unless defined?(RubyProf)
     return_result = ''
@@ -334,6 +360,8 @@ def __profile__(name, min=1, iter=100)
   #     opts = extract_options_from_args!(args) || {}
   #     # [...]
   #   end
+  #
+  # @api public
   def extract_options_from_args!(args)
     args.pop if Hash === args.last
   end
@@ -346,6 +374,8 @@ def extract_options_from_args!(args)
   #
   # @raise ArgumentError
   #   An object failed to quack like a condition.
+  #
+  # @api public
   def enforce!(opts = {})
     opts.each do |k,v|
       raise ArgumentError, "#{k.inspect} doesn't quack like #{v.inspect}" unless k.quacks_like?(v)</field>
	<field name="commit_file_name">dispatcher.rb</field>
	<field name="commit_diff">@@ -4,15 +4,19 @@ module Merb
   class Dispatcher
     class  self
       include Merb::ControllerExceptions
-    
+      
       attr_accessor :use_mutex
       
       @@work_queue = Queue.new
-    
+      
+      # ==== Returns
+      # Queue:: the current queue of dispatch jobs.
+      # 
+      # @api private
       def work_queue 
         @@work_queue
       end  
-    
+      
       Merb::Dispatcher.use_mutex = ::Merb::Config[:use_mutex]
       
       # Dispatch the rack environment. ControllerExceptions are rescued here
@@ -25,9 +29,11 @@ def work_queue
       # ==== Returns
       # Merb::Controller::
       #   The Merb::Controller that was dispatched to
+      # 
+      # @api private
       def handle(request)
         request.handle
-      end      
+      end
     end
   end
   
@@ -36,10 +42,16 @@ class Request
     
     @@mutex = Mutex.new
     
+    # Handles request routing and action dispatch.
+    # 
+    # ==== Returns
+    # Merb::Controller:: the controller that handled the action dispatch.
+    # 
+    # @api private
     def handle
       start = Time.now
       Merb.logger.info "Started request handling: #{start.to_s}"
-  
+      
       find_route!
       return rack_response if handled?
       
@@ -57,7 +69,7 @@ def handle
       if klass.abstract?
         raise NotFound, "The '#{klass}' controller has no public actions"
       end
-    
+      
       controller = dispatch_action(klass, params[:action])
       controller._benchmarks[:dispatch_time] = Time.now - start
       Merb.logger.info controller._benchmarks.inspect
@@ -73,13 +85,13 @@ def handle
     # ==== Parameters
     # klassMerb::Controller:: The controller class to dispatch to.
     # actionSymbol:: The action to dispatch.
-    # requestMerb::Request::
-    #   The Merb::Request object that was created in #handle
     # statusInteger:: The status code to respond with.
     #
     # ==== Returns
     # Merb::Controller::
     #   The Merb::Controller that was dispatched to.
+    # 
+    # @api private
     def dispatch_action(klass, action, status=200)
       # build controller
       controller = klass.new(self, status)
@@ -101,8 +113,6 @@ def dispatch_action(klass, action, status=200)
     # StandardError is caught in standard_error).
     #
     # ==== Parameters
-    # requestMerb::Request:: 
-    #   The request object associated with the failed request.
     # exceptionObject::
     #   The exception object that was created when trying to dispatch the
     #   original controller.
@@ -110,6 +120,8 @@ def dispatch_action(klass, action, status=200)
     # ==== Returns
     # Exceptions::
     #   The Merb::Controller that was dispatched to. 
+    # 
+    # @api private
     def dispatch_exception(exception)
       if(exception.is_a?(Merb::ControllerExceptions::Base) &&
          !exception.is_a?(Merb::ControllerExceptions::ServerError))
@@ -117,12 +129,12 @@ def dispatch_exception(exception)
       else
         Merb.logger.error(Merb.exception(exception))
       end
-
+      
       self.exceptions = [exception]
-
+      
       begin
         e = exceptions.first
-
+        
         if action_name = e.action_name
           dispatch_action(Exceptions, action_name, e.class.status)
         else
@@ -134,7 +146,7 @@ def dispatch_exception(exception)
         else
           Merb.logger.error("Dispatching #{e.class} raised another error.")
           Merb.logger.error(Merb.exception(dispatch_issue))
-
+          
           exceptions.unshift dispatch_issue
           retry
         end</field>
	<field name="commit_file_name">request.rb</field>
	<field name="commit_diff">@@ -25,16 +25,26 @@ class Request
     self.http_method_overrides = []
     
     # Initialize the request object.
-    #
+    # 
     # ==== Parameters
     # http_request~params:~[], ~body:IO:: 
     #   An object like an HTTP Request.
+    # 
+    # @api private
     def initialize(rack_env)
       @env  = rack_env
       @body = rack_env['rack.input']
       @route_params = {}
     end
     
+    # Returns the controller object for initialization and dispatching the
+    # request.
+    # 
+    # ==== Returns
+    # Class:: The controller class matching the routed request,
+    #   e.g. Posts.
+    # 
+    # @api private
     def controller
       unless params[:controller]
         raise ControllerExceptions::NotFound, 
@@ -58,13 +68,15 @@ def controller
     METHODS = %w{get post put delete head options}
 
     # ==== Returns
-    # Symbol:: The name of the request method, e.g. :get.
+    # Symbol:: The name of the request method, e.g. :get.
     #
     # ==== Notes
     # If the method is post, then the blocks specified in
     # http_method_overrides will be checked for the masquerading method.
     # The block will get the controller yielded to it.  The first matching workaround wins.
     # To disable this behavior, set http_method_overrides = []
+    # 
+    # @api public
     def method
       @method ||= begin
         request_method = @env['REQUEST_METHOD'].downcase.to_sym
@@ -89,20 +101,24 @@ def method
     METHODS.each do |m|
       class_eval "def #{m}?() method == :#{m} end"
     end
-
+    
+    # ==== Notes
     # Find route using requested URI and merges route
     # parameters (:action, :controller and named segments)
     # into request params hash.
+    # 
+    # @api private
     def find_route!
       @route, @route_params = Merb::Router.route_for(self)
       params.merge! @route_params if @route_params.is_a?(Hash)
     end
     
+    # ==== Notes
     # Processes the return value of a deferred router block
     # and returns the current route params for the current
     # request evaluation
-    # ---
-    # @private
+    # 
+    # @api private
     def _process_block_return(retval)
       # If the return value is an array, then it is a redirect
       # so we must set the request as a redirect and extract
@@ -114,33 +130,54 @@ def _process_block_return(retval)
     
     # Sets the request as matched. This will abort evaluating any
     # further deferred procs.
-    # ---
-    # @private
+    # 
+    # @api private
     def matched!
       @matched = true
     end
     
     # Checks whether or not the request has been matched to a route.
-    # ---
-    # @private
+    # 
+    # @api private
     def matched?
       @matched
     end
     
+    # ==== Returns
+    # (Array, Hash):: the route params for the matched route.
+    # 
+    # ==== Notes
+    # If the response is an Array then it is considered a direct Rack response
+    # to be sent back as a response. Otherwise, the route_params is a Hash with
+    # routing data (controller, action, et al).
+    # 
+    # @api private
     def rack_response
       @route_params
     end
     
     # If @route_params is an Array, then it will be the rack response.
-    # In this case, the request has been handled.
+    # In this case, the request is considered handled.
+    # 
+    # ==== Returns
+    # Boolean:: true if @route_params is an Array, false otherwise.
+    # 
+    # @api private
     def handled?
       @route_params.is_a?(Array)
     end
     
+    # == Params
+    # 
+    # Handles processing params from raw data and merging them together to get
+    # the final request params.
+    
     private
     
     # ==== Returns
     # Hash:: Parameters passed from the URL like ?blah=hello.
+    # 
+    # @api private
     def query_params
       @query_params ||= self.class.query_parse(query_string || '')
     end
@@ -150,6 +187,8 @@ def query_params
     #
     # ==== Returns
     # Hash:: The parameters passed in the body.
+    # 
+    # @api private
     def body_params
       @body_params ||= begin
         if content_type && content_type.match(Merb::Const::FORM_URL_ENCODED_REGEXP) # or content_type.nil?
@@ -157,11 +196,13 @@ def body_params
         end
       end
     end
-
+    
     # ==== Returns
     # Mash::
     #   The parameters gathered from the query string and the request body,
     #   with parameters in the body taking precedence.
+    # 
+    # @api private
     def body_and_query_params
       # ^-- FIXME a better name for this method
       @body_and_query_params ||= begin
@@ -170,13 +211,15 @@ def body_and_query_params
         h.to_mash
       end
     end
-
+    
     # ==== Raises
     # ControllerExceptions::MultiPartParseError::
     #   Unable to parse the multipart form data.
     #
     # ==== Returns
     # Hash:: The parsed multipart parameters.
+    # 
+    # @api private
     def multipart_params
       @multipart_params ||= 
         begin
@@ -192,7 +235,7 @@ def multipart_params
           raise e
         end
     end
-
+    
     # ==== Returns
     # Hash:: Parameters from body if this is a JSON request.
     #
@@ -201,6 +244,8 @@ def multipart_params
     # parameters hash.  If it parses to anything else (such as an Array, or
     # if it inflates to an Object) it will be accessible via the inflated_object
     # parameter.
+    # 
+    # @api private
     def json_params
       @json_params ||= begin
         if Merb::Const::JSON_MIME_TYPE_REGEXP.match(content_type)
@@ -209,9 +254,11 @@ def json_params
         end
       end
     end
-
+    
     # ==== Returns
     # Hash:: Parameters from body if this is an XML request.
+    # 
+    # @api private
     def xml_params
       @xml_params ||= begin
         if Merb::Const::XML_MIME_TYPE_REGEXP.match(content_type)
@@ -228,6 +275,8 @@ def xml_params
     # ==== Notes
     # The order of precedence for the params is XML, JSON, multipart, body and
     # request string.
+    # 
+    # @api public
     def params
       @params ||= begin
         h = body_and_query_params.merge(route_params)      
@@ -238,6 +287,10 @@ def params
       end
     end
     
+    # ==== Returns
+    # String:: Returns the redirect message Base64 unencoded.
+    # 
+    # @api public
     def message
       return {} unless params[:_message]
       begin
@@ -246,14 +299,19 @@ def message
         {}
       end
     end
-
+    
+    # ==== Notes
     # Resets the params to a nil value.
+    # 
+    # @api private
     def reset_params!
       @params = nil
     end
     
     # ==== Returns
     # String:: The raw post.
+    # 
+    # @api private
     def raw_post
       @body.rewind if @body.respond_to?(:rewind)
       @raw_post ||= @body.read
@@ -261,6 +319,8 @@ def raw_post
     
     # ==== Returns
     # Boolean:: If the request is an XML HTTP request.
+    # 
+    # @api public
     def xml_http_request?
       not /XMLHttpRequest/i.match(@env['HTTP_X_REQUESTED_WITH']).nil?
     end
@@ -269,17 +329,19 @@ def xml_http_request?
     
     # ==== Returns
     # String:: The remote IP address.
+    # 
+    # @api public
     def remote_ip
       return @env['HTTP_CLIENT_IP'] if @env.include?('HTTP_CLIENT_IP')
-    
+      
       if @env.include?(Merb::Const::HTTP_X_FORWARDED_FOR) then
         remote_ips = @env[Merb::Const::HTTP_X_FORWARDED_FOR].split(',').reject do |ip|
           ip =~ /^unknown$|^(127|10|172\.16|192\.168)\./i
         end
-    
+        
         return remote_ips.first.strip unless remote_ips.empty?
       end
-    
+      
       return @env[Merb::Const::REMOTE_ADDR]
     end
     
@@ -287,126 +349,168 @@ def remote_ip
     # String::
     #   The protocol, i.e. either "https" or "http" depending on the
     #   HTTPS header.
+    # 
+    # @api public
     def protocol
       ssl? ? 'https' : 'http'
     end
     
     # ==== Returns
     # Boolean::: True if the request is an SSL request.
+    # 
+    # @api public
     def ssl?
       @env['HTTPS'] == 'on' || @env['HTTP_X_FORWARDED_PROTO'] == 'https'
     end
     
     # ==== Returns
     # String:: The HTTP referer.
+    # 
+    # @api public
     def referer
       @env['HTTP_REFERER']
     end
     
     # ==== Returns
     # String:: The full URI, including protocol and host
+    # 
+    # @api public
     def full_uri
       protocol + "://" + host + uri
     end
     
     # ==== Returns
     # String:: The request URI.
+    # 
+    # @api public
     def uri
       @env['REQUEST_PATH'] || @env['REQUEST_URI'] || path_info
     end
-
+    
     # ==== Returns
     # String:: The HTTP user agent.
+    # 
+    # @api public
     def user_agent
       @env['HTTP_USER_AGENT']
     end
-
+    
     # ==== Returns
     # String:: The server name.
+    # 
+    # @api public
     def server_name
       @env['SERVER_NAME']
     end
-
+    
     # ==== Returns
     # String:: The accepted encodings.
+    # 
+    # @api private
     def accept_encoding
       @env['HTTP_ACCEPT_ENCODING']
     end
-
+    
     # ==== Returns
     # String:: The script name.
+    # 
+    # @api public
     def script_name
       @env['SCRIPT_NAME']
     end
-
+    
     # ==== Returns
     # String:: HTTP cache control.
+    # 
+    # @api public
     def cache_control
       @env['HTTP_CACHE_CONTROL']
     end
-
+    
     # ==== Returns
     # String:: The accepted language.
+    # 
+    # @api public
     def accept_language
       @env['HTTP_ACCEPT_LANGUAGE']
     end
-
+    
     # ==== Returns
     # String:: The server software.
+    # 
+    # @api public
     def server_software
       @env['SERVER_SOFTWARE']
     end
-
+    
     # ==== Returns
     # String:: Value of HTTP_KEEP_ALIVE.
+    # 
+    # @api public
     def keep_alive
       @env['HTTP_KEEP_ALIVE']
     end
-
+    
     # ==== Returns
     # String:: The accepted character sets.
+    # 
+    # @api public
     def accept_charset
       @env['HTTP_ACCEPT_CHARSET']
     end
-
+    
     # ==== Returns
     # String:: The HTTP version
+    # 
+    # @api private
     def version
       @env['HTTP_VERSION']
     end
-
+    
     # ==== Returns
     # String:: The gateway.
+    # 
+    # @api public
     def gateway
       @env['GATEWAY_INTERFACE']
     end
-
+    
     # ==== Returns
     # String:: The accepted response types. Defaults to "*/*".
+    # 
+    # @api private
     def accept
       @env['HTTP_ACCEPT'].blank? ? "*/*" : @env['HTTP_ACCEPT']
     end
-
+    
     # ==== Returns
     # String:: The HTTP connection.
+    # 
+    # @api private
     def connection
       @env['HTTP_CONNECTION']
     end
-
+    
     # ==== Returns
     # String:: The query string.
+    # 
+    # @api private
     def query_string
       @env['QUERY_STRING']  
     end
-
+    
     # ==== Returns
     # String:: The request content type.
+    # 
+    # @api private
     def content_type
       @env['CONTENT_TYPE']
     end
-
+    
     # ==== Returns
     # Fixnum:: The request content length.
+    # 
+    # @api public
     def content_length
       @content_length ||= @env[Merb::Const::CONTENT_LENGTH].to_i
     end
@@ -415,6 +519,8 @@ def content_length
     # String::
     #   The URI without the query string. Strips trailing "/" and reduces
     #   duplicate "/" to a single "/".
+    # 
+    # @api public
     def path
       path = (uri.empty? ? '/' : uri.split('?').first).squeeze("/")
       path = path[0..-2] if (path[-1] == ?/) && path.size  1
@@ -423,18 +529,24 @@ def path
     
     # ==== Returns
     # String:: The path info.
+    # 
+    # @api public
     def path_info
       @path_info ||= self.class.unescape(@env['PATH_INFO'])
     end
     
     # ==== Returns
     # Fixnum:: The server port.
+    # 
+    # @api public
     def port
       @env['SERVER_PORT'].to_i
     end
     
     # ==== Returns
     # String:: The full hostname including the port.
+    # 
+    # @api public
     def host
       @env['HTTP_X_FORWARDED_HOST'] || @env['HTTP_HOST'] 
     end
@@ -446,6 +558,8 @@ def host
     #
     # ==== Returns
     # Array:: All the subdomain parts of the host.
+    # 
+    # @api public
     def subdomains(tld_length = 1)
       parts = host.split('.')
       parts[0..-(tld_length+2)]
@@ -458,18 +572,24 @@ def subdomains(tld_length = 1)
     #
     # ==== Returns
     # String:: The full domain name without the port number.
+    # 
+    # @api public
     def domain(tld_length = 1)
       host.split('.').last(1 + tld_length).join('.').sub(/:\d+$/,'')
     end
-
+    
     # ==== Returns
     # Value of If-None-Match request header.
+    # 
+    # @api private
     def if_none_match
       @env[Merb::Const::HTTP_IF_NONE_MATCH]
     end
-
+    
     # ==== Returns
     # Value of If-Modified-Since request header.
+    # 
+    # @api private
     def if_modified_since
       if time = @env[Merb::Const::HTTP_IF_MODIFIED_SINCE]
         Time.rfc2822(time)
@@ -497,6 +617,8 @@ class  self
       #     # = "search[page]=10&search[word]=ruby"
       #   params_to_query_string([ "ice-cream", "cake" ], "shopping_list")
       #     # = "shopping_list[]=ice-cream&shopping_list[]=cake"
+      # 
+      # @api private
       def params_to_query_string(value, prefix = nil)
         case value
         when Array
@@ -517,17 +639,21 @@ def params_to_query_string(value, prefix = nil)
       #
       # ==== returns
       # String:: The escaped string.
+      # 
+      # @api private
       def escape(s)
         s.to_s.gsub(/([^ a-zA-Z0-9_.-]+)/n) {
           '%'+$1.unpack('H2'*$1.size).join('%').upcase
         }.tr(' ', '+')
       end
-
+      
       # ==== Parameter
       # sString:: String to URL unescape.
       #
       # ==== returns
       # String:: The unescaped string.
+      # 
+      # @api private
       def unescape(s)
         s.tr('+', ' ').gsub(/((?:%[0-9a-fA-F]{2})+)/n){
           [$1.delete('%')].pack('H*')
@@ -545,6 +671,8 @@ def unescape(s)
       # ==== Examples
       #   query_parse("bar=nik&post[body]=heya")
       #     # = { :bar = "nik", :post = { :body = "heya" } }
+      # 
+      # @api private
       def query_parse(query_string, delimiter = '&;', preserve_order = false)
         query = preserve_order ? Dictionary.new : {}
         for pair in (query_string || '').split(/[#{delimiter}] */n)
@@ -558,13 +686,13 @@ def query_parse(query_string, delimiter = '&;', preserve_order = false)
         end
         preserve_order ? query : query.to_mash
       end
-    
+      
       NAME_REGEX = /Content-Disposition:.* name="?([^\";]*)"?/ni.freeze
       CONTENT_TYPE_REGEX = /Content-Type: (.*)\r\n/ni.freeze
       FILENAME_REGEX = /Content-Disposition:.* filename="?([^\";]*)"?/ni.freeze
       CRLF = "\r\n".freeze
       EOL = CRLF
-
+      
       # ==== Parameters
       # requestIO:: The raw request.
       # boundaryString:: The boundary string.
@@ -575,6 +703,8 @@ def query_parse(query_string, delimiter = '&;', preserve_order = false)
       #
       # ==== Returns
       # Hash:: The parsed request.
+      # 
+      # @api private
       def parse_multipart(request, boundary, content_length)
         boundary = "--#{boundary}"
         paramhsh = {}
@@ -605,19 +735,19 @@ def parse_multipart(request, boundary, content_length)
               filename = head[FILENAME_REGEX, 1]
               content_type = head[CONTENT_TYPE_REGEX, 1]
               name = head[NAME_REGEX, 1]
-            
+              
               if filename && !filename.empty?
                 body = Tempfile.new(:Merb)
                 body.binmode if defined? body.binmode
               end
               next
             end
-          
+            
             # Save the read body part.
             if head && (boundary_size+4  buf.size)
               body  buf.slice!(0, buf.size - (boundary_size+4))
             end
-          
+            
             read_size = bufsize  content_length ? bufsize : content_length
             if( read_size  0 )
               c = input.read(read_size)
@@ -626,15 +756,15 @@ def parse_multipart(request, boundary, content_length)
               content_length -= c.size
             end
           end
-        
+          
           # Save the rest.
           if i = buf.index(rx)
             body  buf.slice!(0, i)
             buf.slice!(0, boundary_size+2)
-          
+            
             content_length = -1  if $1 == "--"
           end
-        
+          
           if filename && !filename.empty?   
             body.rewind
             data = { 
@@ -651,7 +781,7 @@ def parse_multipart(request, boundary, content_length)
         }
         paramhsh
       end
-
+      
       # Converts a query string snippet to a hash and adds it to existing
       # parameters.
       #
@@ -662,6 +792,8 @@ def parse_multipart(request, boundary, content_length)
       #
       # ==== Returns
       # Hash:: Normalized parameters
+      # 
+      # @api private
       def normalize_params(parms, name, val=nil)
         name =~ %r([\[\]]*([^\[\]]+)\]*)
         key = $1 || ''
@@ -687,4 +819,4 @@ def normalize_params(parms, name, val=nil)
       end
     end
   end
-end    
+end</field>
	<field name="commit_file_name">router.rb</field>
	<field name="commit_diff">@@ -6,19 +6,19 @@
 module Merb
   # Router stores route definitions and finds the first
   # route that matches the incoming request URL.
-  #
+  # 
   # Then information from route is used by dispatcher to
   # call action on the controller.
-  #
+  # 
   # ==== Routes compilation.
-  #
+  # 
   # The most interesting method of Router (and heart of
   # route matching machinery) is match method generated
   # on the fly from routes definitions. It is called routes
   # compilation. Generated match method body contains
   # one if/elsif statement that picks the first matching route
   # definition and sets values to named parameters of the route.
-  #
+  # 
   # Compilation is synchronized by mutex.
   class Router
     @routes          = []
@@ -26,14 +26,14 @@ class Router
     @resource_routes = {}
     @compiler_mutex  = Mutex.new
     @root_behavior   = Behavior.new.defaults(:action = "index")
-
+    
     # Raised when route lookup fails.
     class RouteNotFound  StandardError; end;
     # Raised when parameters given to generation
     # method do not match route parameters.
     class GenerationError  StandardError; end;
     class NotCompiledError  StandardError; end;
-
+    
     class  self
       # @private
       attr_accessor :routes, :named_routes, :resource_routes, :root_behavior
@@ -41,19 +41,20 @@ class  self
       # Creates a route building context and evaluates the block in it. A
       # copy of +root_behavior+ (and instance of Behavior) is copied as
       # the context.
-      #
+      # 
       # ==== Parameters
       # firstArray::
       #   An array containing routes that should be prepended to the routes
       #   defined in the block.
-      #
       # lastArray::
       #   An array containing routes that should be appended to the routes
       #   defined in the block.
-      #
+      # 
       # ==== Returns
       # Merb::Router::
       #   Returns self to allow chaining of methods.
+      # 
+      # @api public
       def prepare(first = [], last = [], &block)
         @routes = []
         root_behavior._with_proxy(&block)
@@ -63,17 +64,23 @@ def prepare(first = [], last = [], &block)
       end
       
       # Appends route in the block to routing table.
+      # 
+      # @api public
       def append(&block)
         prepare(routes, [], &block)
       end
-
+      
       # Prepends routes in the block to routing table.
+      # 
+      # @api public
       def prepend(&block)
         prepare([], routes, &block)
       end
       
       # Clears the routing table. Route generation and request matching
       # won't work anymore until a new routing table is built.
+      # 
+      # @api private
       def reset!
         class  self
           alias_method :match, :match_before_compilation
@@ -84,18 +91,16 @@ class  self
       # Finds route matching URI of the request and returns a tuple of
       # [route index, route params]. This method is called by the
       # dispatcher and isn't as useful in applications.
-      #
+      # 
       # ==== Parameters
       # requestMerb::Request:: request to match.
-      #
+      # 
       # ==== Returns
-      # Array(Integer, Hash)::
-      #   Two-tuple: route index and route parameters. Route
-      #   parameters are :controller, :action and all the named
-      #   segments of the route.
-      #
-      # ---
-      # @private
+      # Array[Integer, Hash]::
+      #   Two-tuple: route index and route parameters. Route parameters
+      #   are :controller, :action and all the named segments of the route.
+      # 
+      # @api private
       def route_for(request) #:nodoc:
         index, params = match(request)
         route = routes[index] if index
@@ -105,43 +110,85 @@ def route_for(request) #:nodoc:
         end
         [route, params]
       end
-
-      # Just a placeholder for the compiled match method
+      
+      # A placeholder for the compiled match method.
+      # 
+      # ==== Notes
+      # This method is aliased as +match+ but this method gets overridden with
+      # the actual +match+ method (generated from the routes definitions) after
+      # being compiled. This method is only ever called before routes are
+      # compiled.
+      # 
+      # ==== Raises
+      # NotCompiledError:: routes have not been compiled yet.
+      # 
+      # @api private
       def match_before_compilation(request) #:nodoc:
         raise NotCompiledError, "The routes have not been compiled yet"
       end
-
+      
       alias_method :match, :match_before_compilation
       
-      # Generates a URL from the params
+      # There are three possible ways to use this method.  First, if you have a named route, 
+      # you can specify the route as the first parameter as a symbol and any paramters in a 
+      # hash.  Second, you can generate the default route by just passing the params hash, 
+      # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+      # allows you to specify the parameters to a named route in the order they appear in the 
+      # router.  
       #
-      # ==== Parameters
-      # nameSymbol::
-      #   The name of the route to generate
+      # ==== Parameters(Named Route)
+      # nameSymbol:: 
+      #   The name of the route. 
+      # argsHash:: 
+      #   Parameters for the route generation.
       #
-      # anonymous_paramsObject::
+      # ==== Parameters(Default Route)
+      # argsHash:: 
+      #   Parameters for the route generation.  This route will use the default route. 
+      #
+      # ==== Parameters(Anonymous Parameters)
+      # nameSymbol::
+      #   The name of the route.  
+      # argsArray:: 
       #   An array of anonymous parameters to generate the route
       #   with. These parameters are assigned to the route parameters
       #   in the order that they are passed.
       #
-      # paramsHash::
-      #   Named parameters to generate the route with.
-      #
-      # defaultsHash::
-      #   A hash of default parameters to generate the route with.
-      #   This is usually the request parameters. If there are any
-      #   required params that are missing to generate the route,
-      #   they are pulled from this hash.
       # ==== Returns
-      # String:: The generated URL
-      # ---
-      # @private
+      # String:: The generated URL.
+      #
+      # ==== Examples
+      # Named Route
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, :title = "new_article")
+      #
+      # Default Route
+      #
+      # Merb::Router.prepare do
+      #   default_routes
+      # end
+      #
+      # url(:controller = "articles", :action = "new")
+      #
+      # Anonymous Paramters
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, 2008, 10, "test_article")
+      #
+      # @api private
       def url(name, *args)
         unless name.is_a?(Symbol)
           args.unshift(name)
           name = :default
         end
-
+        
         unless route = Merb::Router.named_routes[name]
           raise Merb::Router::GenerationError, "Named route not found: #{name}"
         end
@@ -152,25 +199,25 @@ def url(name, *args)
       end
       
       # Generates a URL from the resource(s)
-      #
+      # 
       # ==== Parameters
       # resourcesSymbol,Object::
       #   The identifiers for the resource route to generate. These
       #   can either be symbols or objects. Symbols denote resource
       #   collection routes and objects denote the members.
-      #
+      # 
       # paramsHash::
       #   Any extra parameters needed to generate the route.
       # ==== Returns
       # String:: The generated URL
-      # ---
-      # @private
+      # 
+      # @api private
       def resource(*args)
         defaults = args.pop
         options  = extract_options_from_args!(args) || {}
         key      = []
         params   = []
-
+        
         args.each do |arg|
           if arg.is_a?(Symbol) || arg.is_a?(String)
             key  arg.to_s
@@ -179,19 +226,21 @@ def resource(*args)
             params  arg
           end
         end
-
+        
         params  options
-
+        
         unless route = Merb::Router.resource_routes[key]
           raise Merb::Router::GenerationError, "Resource route not found: #{args.inspect}"
         end
-
+        
         route.generate(params, defaults)
       end
-
-    private
-    
-      # Defines method with a switch statement that does routes recognition.
+      
+      private
+      
+      # Compiles the routes and creates the +match+ method.
+      # 
+      # @api private
       def compile
         if routes.any?
           eval(compiled_statement, binding, "Generated Code for Router", 1)
@@ -199,18 +248,21 @@ def compile
           reset!
         end
       end
-
-      # Generates method that does route recognition with a switch statement.
+      
+      # Generates the method for evaluation defining a +match+ method to match
+      # a request with the defined routes.
+      # 
+      # @api private
       def compiled_statement
         @compiler_mutex.synchronize do
           condition_keys, if_statements = Set.new, ""
-
+          
           routes.each_with_index do |route, i|
             route.freeze
             route.conditions.keys.each { |key| condition_keys  key }
             if_statements  route.compiled_statement(i == 0)
           end
-
+          
           statement =  "def match(request)\n"
           statement  condition_keys.inject("") do |cached, key|
             cached  "  cached_#{key} = request.#{key}.to_s\n"
@@ -222,7 +274,7 @@ def compiled_statement
           statement  "end"
         end
       end
-
+      
     end # class  self
   end
 end</field>
	<field name="commit_file_name">behavior.rb</field>
	<field name="commit_diff">@@ -3,31 +3,51 @@ module Merb
   class Router
     
     class Behavior
-
-      class Error  StandardError; end;
+      
+      class Error  StandardError; end
       
       # Proxy catches any methods and proxies them to the current behavior.
       # This allows building routes without constantly having to catching the
       # yielded behavior object
-      # ---
-      # @private
-      class Proxy #:nodoc:
+      # 
+      # @api private
+      class Proxy
+        
         # Undefine as many methods as possible so that everything can be proxied
         # along to the behavior
         instance_methods.each { |m| undef_method m unless %w[ __id__ __send__ class kind_of? respond_to? assert_kind_of should should_not instance_variable_set instance_variable_get instance_eval].include?(m) }
         
+        # @api private
         def initialize
           @behaviors = []
         end
         
+        # Puts a behavior on the bottom of the stack.
+        # 
+        # ==== Notes
+        # The behaviors keep track of nested scopes.
+        # 
+        # @api private
         def push(behavior)
           @behaviors.push(behavior)
         end
         
+        # Removes the top-most behavior.
+        # 
+        # ==== Notes
+        # This occurs at the end of a nested scope (namespace, etc).
+        # 
+        # @api private
         def pop
           @behaviors.pop
         end
         
+        # Tests whether the top-most behavior responds to the arguments.
+        # 
+        # ==== Notes
+        # Behaviors contain the actual functionality of the proxy.
+        # 
+        # @api private
         def respond_to?(*args)
           super || @behaviors.last.respond_to?(*args)
         end
@@ -35,7 +55,7 @@ def respond_to?(*args)
         # Rake does some stuff with methods in the global namespace, so if I don't
         # explicitly define the Behavior methods to proxy here (specifically namespace)
         # Rake's methods take precedence.
-        # ---
+        # 
         # Removing the following:
         # name full_name fixatable redirect
         %w(
@@ -49,25 +69,86 @@ def #{method}(*args, &block)
           }
         end
         
-        # --- These methods are to be used in defer_to blocks
+        # == These methods are to be used in defer_to blocks
         
-        # Generates a URL from the passed arguments. This method is for use
-        # inside of defer_to 
+        # There are three possible ways to use this method.  First, if you have a named route, 
+        # you can specify the route as the first parameter as a symbol and any paramters in a 
+        # hash.  Second, you can generate the default route by just passing the params hash, 
+        # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+        # allows you to specify the parameters to a named route in the order they appear in the 
+        # router.  
+        #
+        # ==== Parameters(Named Route)
+        # nameSymbol:: 
+        #   The name of the route. 
+        # argsHash:: 
+        #   Parameters for the route generation.
+        #
+        # ==== Parameters(Default Route)
+        # argsHash:: 
+        #   Parameters for the route generation.  This route will use the default route. 
+        #
+        # ==== Parameters(Anonymous Parameters)
+        # nameSymbol::
+        #   The name of the route.  
+        # argsArray:: 
+        #   An array of anonymous parameters to generate the route
+        #   with. These parameters are assigned to the route parameters
+        #   in the order that they are passed.
+        #
+        # ==== Returns
+        # String:: The generated URL.
+        #
+        # ==== Examples
+        # Named Route
+        #
+        # Merb::Router.prepare do
+        #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+        # end
+        #
+        # url(:articles, :title = "new_article")
+        #
+        # Default Route
+        #
+        # Merb::Router.prepare do
+        #   default_routes
+        # end
+        #
+        # url(:controller = "articles", :action = "new")
+        #
+        # Anonymous Paramters
+        #
+        # Merb::Router.prepare do
+        #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+        # end
+        #
+        # url(:articles, 2008, 10, "test_article")
+        #
+        # @api public
         def url(name, *args)
           args  {}
           Merb::Router.url(name, *args)
         end
         
+        # Generates a Rack redirection response.
+        # 
+        # ==== Notes
+        # Refer to Merb::Rack::Helpers.redirect for documentation.
+        # 
+        # @api public
         def redirect(url, opts = {})
           Merb::Rack::Helpers.redirect(url, opts)
         end
         
-        def route(params)
-          params
-        end
+        private
         
-      private
-      
+        # Proxies the method calls to the behavior.
+        # 
+        # ==== Notes
+        # Please refer to:
+        # http://ruby-doc.org/core/classes/Kernel.html#M005951
+        # 
+        # @api private
         def method_missing(method, *args, &block)
           behavior = @behaviors.last
           
@@ -78,14 +159,14 @@ def method_missing(method, *args, &block)
           end
         end
       end
-
+      
       # Behavior objects are used for the Route building DSL. Each object keeps
       # track of the current definitions for the level at which it is defined.
       # Each time a method is called on a Behavior object that accepts a block,
       # a new instance of the Behavior class is created.
-      #
+      # 
       # ==== Parameters
-      #
+      # 
       # proxyProxy::
       #   This is the object initialized by Merb::Router.prepare that tracks the
       #   current Behavior object stack so that Behavior methods can be called
@@ -100,11 +181,11 @@ def method_missing(method, *args, &block)
       #   The initial route options. See #options.
       # blocksArray::
       #   The stack of deferred routing blocks for the route
-      #
+      # 
       # ==== Returns
       # Behavior:: The initialized Behavior object
-      #---
-      # @private
+      # 
+      # @api private
       def initialize(proxy = nil, conditions = {}, params = {}, defaults = {}, identifiers = {}, options = {}, blocks = []) #:nodoc:
         @proxy       = proxy
         @conditions  = conditions
@@ -113,130 +194,129 @@ def initialize(proxy = nil, conditions = {}, params = {}, defaults = {}, identif
         @identifiers = identifiers
         @options     = options
         @blocks      = blocks
-
+        
         stringify_condition_values
       end
-
+      
       # Defines the +conditions+ that are required to match a Request. Each
       # +condition+ is applied to a method of the Request object. Conditions
       # can also be applied to segments of the +path+.
-      #
+      # 
       # If #match is passed a block, it will create a new route scope with
       # the conditions passed to it and yield to the block such that all
       # routes that are defined in the block have the conditions applied
       # to them.
-      #
+      # 
       # ==== Parameters
-      #
+      # 
       # pathString, Regexp::
       #   The pattern against which Merb::Request path is matched.
-      #
+      # 
       #   When +path+ is a String, any substring that is wrapped in parenthesis
       #   is considered optional and any segment that begins with a colon, ex.:
       #   ":login", defines both a capture and a named param. Extra conditions
       #   can then be applied each named param individually.
-      #
+      # 
       #   When +path+ is a Regexp, the pattern is left untouched and the
       #   Merb::Request path is matched against it as is.
       #
       #   +path+ is optional.
-      #
+      # 
       # conditionsHash::
       #   Additional conditions that the request must meet in order to match.
       #   The keys must be the names of previously defined path segments or
       #   be methods that the Merb::Request instance will respond to.  The
       #   value is the string or regexp that matched the returned value.
       #   Conditions are inherited by child routes.
-      #
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the conditions
       #   defined by the #match method.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: +optional+ - The match behavior object.
-      #
+      # 
       # ==== Returns
       # Behavior::
       #   A new instance of Behavior with the specified path and conditions.
-      #
+      # 
       # +Tip+: When nesting always make sure the most inner sub-match registers
-      # a Route and doesn't just returns new Behaviors.
-      #
+      # a Route and doesn't just return new Behaviors.
+      # 
       # ==== Examples
-      #
+      # 
       #   # registers /foo/bar to controller = "foo", :action = "bar"
       #   # and /foo/baz to controller = "foo", :action = "baz"
       #   match("/foo") do
       #     match("/bar").to(:controller = "foo", :action = "bar")
       #     match("/baz").to(:controller = "foo", :action = "caz")
       #   end
-      #
+      # 
       #   # Checks the format of the segments against the specified Regexp
       #   match("/:string/:number", :string = /[a-z]+/, :number = /\d+/).
       #     to(:controller = "string_or_numbers")
-      #
+      # 
       #   # Equivalent to the default_route
       #   match("/:controller(/:action(:id))(.:format)").register
-      #
+      # 
       #   #match only if the browser string contains MSIE or Gecko
       #   match("/foo", :user_agent = /(MSIE|Gecko)/ )
       #        .to(:controller = 'foo', :action = 'popular')
-      #
+      # 
       #   # Route GET and POST requests to different actions (see also #resources)
       #   r.match('/foo', :method = :get).to(:action = 'show')
       #   r.match('/foo', :method = :post).to(:action = 'create')
-      #
+      # 
       #   # match also takes regular expressions
-      #
+      # 
       #   r.match(%r[/account/([a-z]{4,6})]).to(:controller = "account",
       #      :action = "show", :id = "[1]")
-      #
+      # 
       #   r.match(%r{/?(en|es|fr|be|nl)?}).to(:language = "[1]") do
       #     match("/guides/:action/:id").to(:controller = "tour_guides")
       #   end
-      #---
-      # @public
+      # 
+      # @api public
       def match(path = {}, conditions = {}, &block)
         path, conditions = path[:path], path if path.is_a?(Hash)
-
-        raise Error, "The route has already been committed. Further conditions cannot be specified" if @route
         
+        raise Error, "The route has already been committed. Further conditions cannot be specified" if @route
         
         conditions.delete_if { |k, v| v.nil? }
         conditions[:path] = merge_paths(path)
-
+        
         behavior = Behavior.new(@proxy, @conditions.merge(conditions), @params, @defaults, @identifiers, @options, @blocks)
         with_behavior_context(behavior, &block)
       end
       
       # Creates a Route from one or more Behavior objects, unless a +block+ is
       # passed in.
-      #
+      # 
       # ==== Parameters
       # paramsHash:: The parameters the route maps to.
-      #
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the params
       #   defined by the #to method.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: +optional+ - The to behavior object.
-      #
+      # 
       # ==== Returns
       # Route:: It registers a new route and returns it.
-      #
+      # 
       # ==== Examples
       #   match('/:controller/:id).to(:action = 'show')
-      #
+      # 
       #   to(:controller = 'simple') do
       #     match('/test').to(:action = 'index')
       #     match('/other').to(:action = 'other')
       #   end
-      #---
-      # @public
+      # 
+      # @api public
       def to(params = {}, &block)
         raise Error, "The route has already been committed. Further params cannot be specified" if @route
-
+        
         behavior = Behavior.new(@proxy, @conditions, @params.merge(params), @defaults, @identifiers, @options, @blocks)
         
         if block_given?
@@ -247,7 +327,8 @@ def to(params = {}, &block)
       end
       
       # Equivalent of #to. Allows for some nicer syntax when scoping blocks
-      # --- Ex:
+      # 
+      # ==== Examples
       # Merb::Router.prepare do
       #   with(:controller = "users") do
       #     match("/signup").to(:action = "signup")
@@ -255,32 +336,32 @@ def to(params = {}, &block)
       #     match("/logout").to(:action = "logout")
       #   end
       # end
-      alias_method :with, :to
+      alias :with :to
       
       # Equivalent of #to. Allows for nicer syntax when registering routes with no params
-      # --- Ex:
+      # 
+      # ==== Examples
       # Merb::Router.prepare do
       #   match("/:controller(/:action(/:id))(.:format)").register
       # end
-      #
-      alias_method :register, :to
+      alias :register :to
       
       # Sets default values for route parameters. If no value for the key
       # can be extracted from the request, then the value provided here
       # will be used.
-      #
+      # 
       # ==== Parameters
       # defaultsHash::
       #   The default values for named segments.
-      #
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the defaults defined
       #   by the #default method.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: +optional+ - The defaults behavior object.
-      # ---
-      # @public
+      # 
+      # @api public
       def default(defaults = {}, &block)
         behavior = Behavior.new(@proxy, @conditions, @params, @defaults.merge(defaults), @identifiers, @options, @blocks)
         with_behavior_context(behavior, &block)
@@ -289,34 +370,34 @@ def default(defaults = {}, &block)
       alias_method :defaults, :default
       
       # Allows the fine tuning of certain router options.
-      #
+      # 
       # ==== Parameters
       # optionsHash::
       #   The options to set for all routes defined in the scope. The currently
       #   supported options are:
       #   * :controller_prefix - The module that the controller is included in.
       #   * :name_prefix       - The prefix added to all routes named with #name
-      #
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the options defined
       #   by the #options method.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: The options behavior object. This is optional
-      #
+      # 
       # ==== Examples
       #   # If :group is not matched in the path, it will be "registered" instead
       #   # of nil.
       #   match("/users(/:group)").default(:group = "registered")
-      # ---
-      # @public
+      # 
+      # @api public
       def options(opts = {}, &block)
         options = @options.dup
-
+        
         opts.each_pair do |key, value|
           options[key] = (options[key] || []) + [value.freeze] if value
         end
-
+        
         behavior = Behavior.new(@proxy, @conditions, @params, @defaults, @identifiers, options, @blocks)
         with_behavior_context(behavior, &block)
       end
@@ -325,44 +406,47 @@ def options(opts = {}, &block)
       
       # Creates a namespace for a route. This way you can have logical
       # separation to your routes.
-      #
+      # 
       # ==== Parameters
       # name_or_pathString, Symbol::
       #   The name or path of the namespace.
-      #
+      # 
       # optionsHash::
-      #   Optional hash, set :path if you want to override what appears on the url
-      #
+      #   Optional hash (see below)
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the namespace defined
       #   by the #namespace method.
-      #
+      # 
+      # ==== Options (opts)
+      # :pathString:: match against this url
+      # 
       # ==== Block parameters
       # rBehavior:: The namespace behavior object. This is optional
-      #
+      # 
       # ==== Examples
       #   namespace :admin do
       #     resources :accounts
       #     resource :email
       #   end
-      #
+      # 
       #   # /super_admin/accounts
       #   namespace(:admin, :path="super_admin") do
       #     resources :accounts
       #   end
-      # ---
-      # @public
+      # 
+      # @api public
       def namespace(name_or_path, opts = {}, &block)
         name = name_or_path.to_s # We don't want this modified ever
         path = opts.has_key?(:path) ? opts[:path] : name
-
+        
         raise Error, "The route has already been committed. Further options cannot be specified" if @route
-
+        
         # option keys could be nil
         opts[:controller_prefix] = name unless opts.has_key?(:controller_prefix)
         opts[:name_prefix]       = name unless opts.has_key?(:name_prefix)
         opts[:resource_prefix]   = opts[:name_prefix] unless opts.has_key?(:resource_prefix)
-
+        
         behavior = self
         behavior = behavior.match("/#{path}") unless path.nil? || path.empty?
         behavior.options(opts, &block)
@@ -372,22 +456,22 @@ def namespace(name_or_path, opts = {}, &block)
       # insertion into a route. This is useful when using models and want a
       # specific method to be called on it (For example, for ActiveRecord::Base
       # it would be #to_param).
-      #
+      # 
       # The default method called on objects is #to_s.
-      #
+      # 
       # ==== Paramters
       # identifiersHash::
       #   The keys are Classes and the values are the method that instances of the specified
       #   class should have called on.
-      #
+      # 
       # &block::
       #   All routes defined in the block will be call the specified methods during
       #   generation.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: The identify behavior object. This is optional
-      # ---
-      # @public
+      # 
+      # @api public
       def identify(identifiers = {}, &block)
         identifiers = if Hash === identifiers
           @identifiers.merge(identifiers)
@@ -402,23 +486,23 @@ def identify(identifiers = {}, &block)
       # Creates the most common routes /:controller/:action/:id.format when
       # called with no arguments. You can pass a hash or a block to add parameters
       # or override the default behavior.
-      #
+      # 
       # ==== Parameters
       # paramsHash::
       #   This optional hash can be used to augment the default settings
-      #
+      # 
       # &block::
       #   When passing a block a new behavior is yielded and more refinement is
       #   possible.
-      #
+      # 
       # ==== Returns
       # Route:: the default route
-      #
+      # 
       # ==== Examples
-      #
+      # 
       #   # Passing an extra parameter "mode" to all matches
       #   r.default_routes :mode = "default"
-      #
+      # 
       #   # specifying exceptions within a block
       #   r.default_routes do |nr|
       #     nr.defer_to do |request, params|
@@ -426,31 +510,31 @@ def identify(identifiers = {}, &block)
       #         :action = "new") if request.env["REQUEST_URI"] =~ /\/private\//
       #     end
       #   end
-      #---
-      # @public
+      # 
+      # @api public
       def default_routes(params = {}, &block)
         match("/:controller(/:action(/:id))(.:format)").to(params, &block).name(:default)
       end
       
       # Takes a block and stores it for deferred conditional routes. The block
       # takes the +request+ object and the +params+ hash as parameters.
-      #
+      # 
       # ==== Parameters
       # paramsHash:: Parameters and conditions associated with this behavior.
       # &conditional_block::
       #   A block with the conditions to be met for the behavior to take
       #   effect.
-      #
+      # 
       # ==== Returns
       # Route :: The default route.
-      #
+      # 
       # ==== Examples
       #   defer_to do |request, params|
       #     params.merge :controller = 'here',
       #       :action = 'there' if request.xhr?
       #   end
-      #---
-      # @public
+      # 
+      # @api public
       def defer_to(params = {}, &block)
         defer(block).to(params)
       end
@@ -458,27 +542,39 @@ def defer_to(params = {}, &block)
       # Takes a Proc as a parameter and applies it as a deferred proc for all the
       # routes defined in the block. This is mostly interesting for plugin
       # developers.
+      # 
+      # ==== Examples
+      #   defered_block = proc do |r, p|
+      #     p.merge :controller = 'api/comments' if request.xhr?
+      #   end
+      #   defer(defered_block) do
+      #     resources :comments
+      #   end
+      # 
+      # @api public
       def defer(deferred_block, &block)
         blocks = @blocks + [CachedProc.new(deferred_block)]
         behavior = Behavior.new(@proxy, @conditions, @params, @defaults, @identifiers, @options, blocks)
         with_behavior_context(behavior, &block)
       end
       
-      # Names this route in Router. Name must be a Symbol.
-      #
+      # Registers the route as a named route with the name given.
+      # 
       # ==== Parameters
-      # symbolSymbol:: The name of the route.
-      #
+      # symbolSymbol:: the name of the route.
+      # 
       # ==== Raises
       # ArgumentError:: symbol is not a Symbol.
+      # 
+      # @api public
       def name(prefix, name = nil)
         unless name
           name, prefix = prefix, nil
         end
-
+        
         full_name([prefix, @options[:name_prefix], name].flatten.compact.join('_'))
       end
-
+      
       # Names this route in Router. Name must be a Symbol. The current
       # name_prefix is ignored.
       #
@@ -487,6 +583,8 @@ def name(prefix, name = nil)
       #
       # ==== Raises
       # ArgumentError:: symbol is not a Symbol.
+      # 
+      # @api private
       def full_name(name)
         if @route
           @route.name = name
@@ -496,27 +594,34 @@ def full_name(name)
         end
       end
       
+      # Specifies that a route can be fixatable.
+      # 
       # ==== Parameters
       # enabledBoolean:: True enables fixation on the route.
+      # 
+      # @api public
       def fixatable(enable = true)
         @route.fixation = enable
         self
       end
-
-      # Sets the current route as a redirect.
-      #
+      
+      # Redirects the current route.
+      # 
       # ==== Parameters
-      # pathString::
-      #   The path to redirect to
-      #
+      # pathString:: The path to redirect to.
+      # 
       # optionsHash::
-      #   Options for the redirect
-      #   The supported options are:
-      #   * :permanent: Whether or not the redirect should be permanent.
-      #                 The default value is false.
+      #   Options (see below)
+      # 
+      # ==== Options (opts)
+      # :permanentBoolean::
+      #   Whether or not the redirect should be permanent.
+      #   The default value is false.
+      # 
+      # @api public
       def redirect(url, opts = {})
         raise Error, "The route has already been committed." if @route
-
+        
         status = opts[:permanent] ? 301 : 302
         @route = Route.new(@conditions, {:url = url.freeze, :status = status.freeze}, @blocks, :redirects = true)
         @route.register
@@ -529,6 +634,8 @@ def redirect(url, opts = {})
       # it doesn't affect how/which routes are added.
       #
       # &block:: A context in which routes are generated.
+      # 
+      # @api public
       def capture(&block)
         captured_routes = {}
         name_prefix     = [@options[:name_prefix]].flatten.compact.map { |p| "#{p}_"}
@@ -545,27 +652,42 @@ def capture(&block)
         captured_routes
       end
       
-      # So that Router can have a default route
-      # ---
-      # @private
-      def _with_proxy(&block) #:nodoc:
+      # Proxy routes with the default behaviors.
+      # 
+      # ==== Parameters
+      # &block:: defines routes within the provided context.
+      # 
+      # @api private
+      def _with_proxy(&block)
         proxy = Proxy.new
         proxy.push Behavior.new(proxy, @conditions, @params, @defaults, @identifiers, @options, @blocks)
         proxy.instance_eval(&block)
         proxy
       end
       
-    protected
-    
+      protected
+      
+      # Returns the current route.
+      # 
+      # ==== Returns
+      # Route:: the route.
+      # 
+      # @api private
       def _route
         @route
       end
       
-      def to_route # :nodoc:
+      # Turns a route definition into a Route object.
+      # 
+      # ==== Returns
+      # Route:: the route generated.
+      # 
+      # @api private
+      def to_route
         raise Error, "The route has already been committed." if @route
-
+        
         controller = @params[:controller]
-
+        
         if prefixes = @options[:controller_prefix]
           controller ||= ":controller"
           
@@ -594,12 +716,22 @@ def to_route # :nodoc:
       
       # Allows to insert the route at a certain spot in the list of routes
       # instead of appending to the list.
-      def before(route, &block) #:nodoc:
+      # 
+      # ==== Params
+      # routeRoute:: the route to insert before.
+      # &block:: the route definition to insert.
+      # 
+      # @api plugin
+      def before(route, &block)
         options(:before = route, &block)
       end
-
-    private
-    
+      
+      private
+      
+      # Takes @conditions and turns values into strings (except for Regexp and
+      # Array values).
+      # 
+      # @api private
       def stringify_condition_values # :nodoc:
         @conditions.each do |key, value|
           unless value.nil? || Regexp === value || Array === value
@@ -607,7 +739,18 @@ def stringify_condition_values # :nodoc:
           end
         end
       end
-    
+      
+      # Creates a new context with a given behavior for the route definition in
+      # the block.
+      # 
+      # ==== Params
+      # behaviorBehavior:: the behavior to proxy the calls in the block.
+      # &block:: the routing definitions to be nested within the behavior.
+      # 
+      # ==== Returns
+      # Behavior:: the behavior wrapping.
+      # 
+      # @api private
       def with_behavior_context(behavior, &block) # :nodoc:
         if block_given?
           @proxy.push(behavior)
@@ -616,11 +759,25 @@ def with_behavior_context(behavior, &block) # :nodoc:
         end
         behavior
       end
-
+      
+      # Merges the path elements together into an array to be joined for
+      # generating named routes.
+      # 
+      # ==== Parameters
+      # pathString:: the path to merge at the end.
+      # 
+      # ==== Returns
+      # Array:: array of path elements.
+      # 
+      # ==== Notes
+      # An array of ['a', 'b'] (the 'a' namespace with the 'b' action) will
+      # produce a name of :a_b.
+      # 
+      # @api private
       def merge_paths(path) # :nodoc:
         [@conditions[:path], path.freeze].flatten.compact
       end
-
+      
     end
   end
 end
\ No newline at end of file</field>
	<field name="commit_file_name">session.rb</field>
	<field name="commit_diff">@@ -6,6 +6,8 @@ class Config
     # Returns stores list constructed from
     # configured session stores (:session_stores config option)
     # or default one (:session_store config option).
+    # 
+    # @api private
     def self.session_stores
       @session_stores ||= begin
         config_stores = Array(
@@ -15,7 +17,7 @@ def self.session_stores
       end
     end
   end # Config
-
+  
   # The Merb::Session module gets mixed into Merb::SessionContainer to allow
   # app-level functionality (usually found in app/models/merb/session.rb) for
   # session.
@@ -23,35 +25,37 @@ def self.session_stores
   # You can use this module to implement additional methods to simplify
   # building wizard-like application components,
   # authentication frameworks, etc.
+  # 
+  # Session configuration options:
+  #
+  # :session_id_key           The key by which a session value/id is
+  #                           retrieved; defaults to _session_id
+  #
+  # :session_expiry           When to expire the session cookie;
+  #                           defaults to 2 weeks
+  #
+  # :session_secret_key       A secret string which is used to sign/validate
+  #                           session data; min. 16 chars
+  #
+  # :default_cookie_domain    The default domain to write cookies for.
   module Session
   end
-
+  
   # This is mixed into Merb::Controller on framework boot.
   module SessionMixin
     # Raised when no suitable session store has been setup.
     class NoSessionContainer  StandardError; end
-
+    
     # Raised when storing more data than the available space reserved.
     class SessionOverflow  StandardError; end
-
-    # Session configuration options:
-    #
-    # :session_id_key           The key by which a session value/id is
-    #                           retrieved; defaults to _session_id
-    #
-    # :session_expiry           When to expire the session cookie;
-    #                           defaults to 2 weeks
-    #
-    # :session_secret_key       A secret string which is used to sign/validate
-    #                           session data; min. 16 chars
-    #
-    # :default_cookie_domain    The default domain to write cookies for.
+    
+    # @api private
     def self.included(base)
       # Register a callback to finalize sessions - needs to run before the cookie
       # callback extracts Set-Cookie headers from request.cookies.
       base._after_dispatch_callbacks.unshift lambda { |c| c.request.finalize_session }
     end
-
+    
     # ==== Parameters
     # session_storeString:: The type of session store to access.
     #
@@ -60,9 +64,9 @@ def self.included(base)
     def session(session_store = nil)
       request.session(session_store)
     end
-
+    
     # Module methods
-
+    
     # ==== Returns
     # String:: A random 32 character string for use as a unique session ID.
     def rand_uuid
@@ -77,59 +81,76 @@ def rand_uuid
       ]
       "%04x%04x%04x%04x%04x%06x%06x" % values
     end
-
+    
     # Marks this session as needing a new cookie.
+    # 
+    # @api private
     def needs_new_cookie!
       @_new_cookie = true
     end
-
+    
+    # Does session need new cookie?
+    # 
+    # ==== Returns
+    # Boolean:: true if a new cookie is needed, false otherwise.
+    # 
+    # @api private
     def needs_new_cookie?
       @_new_cookie
     end
-
+    
     module_function :rand_uuid, :needs_new_cookie!, :needs_new_cookie?
-
+    
     module RequestMixin
-
+      
+      # Adds class methods to Merb::Request object.
+      # Sets up repository of session store types.
+      # Sets the session ID key and expiry values.
       def self.included(base)
         base.extend ClassMethods
-
+        
         # Keep track of all known session store types.
         base.cattr_accessor :registered_session_types
         base.registered_session_types = Dictionary.new
         base.class_inheritable_accessor :_session_id_key, :_session_secret_key,
                                         :_session_expiry
-
+        
         base._session_id_key        = Merb::Config[:session_id_key] || '_session_id'
         base._session_expiry        = Merb::Config[:session_expiry] || 0
         base._session_secret_key    = Merb::Config[:session_secret_key]
       end
-
+      
       module ClassMethods
-
+        
         # ==== Parameters
         # name~to_sym:: Name of the session type to register.
         # class_nameString:: The corresponding class name.
         #
         # === Notres
         # This is automatically called when Merb::SessionContainer is subclassed.
+        # 
+        # @api private
         def register_session_type(name, class_name)
           self.registered_session_types[name.to_sym] = class_name
         end
-
+        
       end
-
+      
       # The default session store type.
+      # 
+      # @api private
       def default_session_store
         Merb::Config[:session_store] && Merb::Config[:session_store].to_sym
       end
-
+      
       # ==== Returns
       # Hash:: All active session stores by type.
+      # 
+      # @api private
       def session_stores
         @session_stores ||= {}
       end
-
+      
       # Returns session container. Merb is able to handle multiple session
       # stores, hence a parameter to pick it.
       #
@@ -140,6 +161,12 @@ def session_stores
       # === Notes
       # If no suitable session store type is given, it defaults to
       # cookie-based sessions.
+      # 
+      # ==== Returns
+      # SessionContainer::
+      #   an instance of a session store extending Merb::SessionContainer.
+      # 
+      # @api public
       def session(session_store = nil)
         session_store ||= default_session_store
         if class_name = self.class.registered_session_types[session_store]
@@ -154,12 +181,14 @@ def session(session_store = nil)
           raise NoSessionContainer, msg            
         end
       end
-
+      
       # ==== Parameters
       # new_sessionMerb::SessionContainer:: A session store instance.
       #
       # === Notes
       # The session is assigned internally by its session_store_type key.
+      # 
+      # @api private
       def session=(new_session)
         if self.session?(new_session.class.session_store_type)
           original_session_id = self.session(new_session.class.session_store_type).session_id
@@ -169,21 +198,30 @@ def session=(new_session)
         end
         session_stores[new_session.class.session_store_type] = new_session
       end
-
+      
       # Whether a session has been setup
+      # 
+      # ==== Returns
+      # Boolean:: true if the session is part of the session stores configured.
+      # 
+      # @api private
       def session?(session_store = nil)
         (session_store ? [session_store] : session_stores).any? do |type, store|
           store.is_a?(Merb::SessionContainer)
         end
       end
-
+      
       # Teardown and/or persist the current sessions.
+      # 
+      # @api private
       def finalize_session
         session_stores.each { |name, store| store.finalize(self) }
       end
       alias :finalize_sessions :finalize_session
-
+      
       # Assign default cookie values
+      # 
+      # @api private
       def default_cookies
         defaults = {}
         if route && route.allow_fixation? && params.key?(_session_id_key)
@@ -198,6 +236,8 @@ def default_cookies
       # ==== Parameters
       # valueString:: The value of the session cookie; either the session id or the actual encoded data.
       # optionsHash:: Cookie options like domain, path and expired.
+      # 
+      # @api private
       def set_session_cookie_value(value, options = {})
         defaults = {}
         defaults[:expires] = Time.now + _session_expiry if _session_expiry  0
@@ -207,12 +247,16 @@ def set_session_cookie_value(value, options = {})
 
       # ==== Returns
       # String:: The value of the session cookie; either the session id or the actual encoded data.
+      # 
+      # @api private
       def session_cookie_value
         cookies[_session_id_key]
       end
       alias :session_id :session_cookie_value
       
       # Destroy the session cookie.
+      # 
+      # @api private
       def destroy_session_cookie
         cookies.delete(_session_id_key)
       end</field>
	<field name="commit_file_name">container.rb</field>
	<field name="commit_diff">@@ -1,41 +1,49 @@
 module Merb
   class SessionContainer  Mash
-  
+    
     class_inheritable_accessor :session_store_type
     cattr_accessor :subclasses 
     self.subclasses = []
-  
+    
     attr_reader :session_id
     attr_accessor :needs_new_cookie
-  
+    
     class  self
-  
+      
       # Register the subclass as an available session store type.
       def inherited(klass)
         self.subclasses  klass.to_s
         super
       end
-
+      
       # Generates a new session ID and creates a new session.
       #
       # ==== Returns
       # SessionContainer:: The new session.
+      # 
+      # @api private
       def generate
       end
-    
+      
       # ==== Parameters
       # requestMerb::Request:: The Merb::Request that came in from Rack.
       #
+      # ==== Notes
+      # If no sessions were found, a new SessionContainer will be generated.
+      # 
       # ==== Returns
-      # SessionContainer:: a SessionContainer. If no sessions were found, 
-      # a new SessionContainer will be generated.
+      # SessionContainer:: a SessionContainer.
+      # 
+      # @api private
       def setup(request)
-      end    
-    
+      end
+      
     end
-  
+    
     # ==== Parameters
     # session_idString:: A unique identifier for this session.
+    # 
+    # @api private
     def initialize(session_id)
       @_destroy = false
       self.session_id = session_id
@@ -45,11 +53,13 @@ def initialize(session_id)
     #
     # Recreates the cookie with the default expiration time. Useful during log
     # in for pushing back the expiration date.
+    # 
+    # @api private
     def session_id=(sid)
       self.needs_new_cookie = (@session_id && @session_id != sid)
       @session_id = sid
     end
-  
+    
     # Teardown and/or persist the current session.
     #
     # If @_destroy is true, clear out the session completely, including
@@ -57,18 +67,24 @@ def session_id=(sid)
     #
     # ==== Parameters
     # requestMerb::Request:: The Merb::Request that came in from Rack.
+    # 
+    # @api private
     def finalize(request)
     end
-  
+    
     # Destroy the current session - clears data and removes session cookie.
+    # 
+    # @api private
     def clear!
       @_destroy = true
       self.clear
     end
-  
+    
     # Regenerate the session_id.
+    # 
+    # @api private
     def regenerate
     end
-
+    
   end
 end
\ No newline at end of file</field>
	<field name="commit_file_name">cookie.rb</field>
	<field name="commit_diff">@@ -1,7 +1,7 @@
 require 'base64'        # to convert Marshal.dump to ASCII
 require 'openssl'       # to generate the HMAC message digest
 module Merb
-
+  
   # If you have more than 4K of session data or don't want your data to be
   # visible to the user, pick another session store.
   #
@@ -19,31 +19,33 @@ class CookieSession  SessionContainer
     # TODO (maybe):
     # include request ip address
     # AES encrypt marshaled data
-
+    
     # Raised when storing more than 4K of session data.
     class CookieOverflow  StandardError; end
-
+    
     # Raised when the cookie fails its integrity check.
     class TamperedWithCookie  StandardError; end
-
+    
     # Cookies can typically store 4096 bytes.
     MAX = 4096
     DIGEST = OpenSSL::Digest::Digest.new('SHA1') # or MD5, RIPEMD160, SHA256?
-
+    
     attr_accessor :_original_session_data
-
+    
     # The session store type
     self.session_store_type = :cookie
-
+    
     class  self
       # Generates a new session ID and creates a new session.
       #
       # ==== Returns
       # SessionContainer:: The new session.
+      # 
+      # @api private
       def generate
         self.new(Merb::SessionMixin.rand_uuid, "", Merb::Request._session_secret_key)
       end
-
+      
       # Set up a new session on request: make it available on request instance.
       #
       # ==== Parameters
@@ -52,22 +54,26 @@ def generate
       # ==== Returns
       # SessionContainer:: a SessionContainer. If no sessions were found,
       # a new SessionContainer will be generated.
+      # 
+      # @api private
       def setup(request)
         session = self.new(Merb::SessionMixin.rand_uuid,
           request.session_cookie_value, request._session_secret_key)
         session._original_session_data = session.to_cookie
         request.session = session
       end
-
+      
     end
-
+    
     # ==== Parameters
     # session_idString:: A unique identifier for this session.
     # cookieString:: The raw cookie data.
     # secretString:: A session secret.
     #
     # ==== Raises
-    # ArgumentError:: Nil or blank secret.
+    # ArgumentError:: blank or insufficiently long secret.
+    # 
+    # @api private
     def initialize(session_id, cookie, secret)
       super session_id
       if secret.blank? || secret.length  16
@@ -78,7 +84,7 @@ def initialize(session_id, cookie, secret)
       @secret = secret
       self.update(unmarshal(cookie))
     end
-
+    
     # Teardown and/or persist the current session.
     #
     # If @_destroy is true, clear out the session completely, including
@@ -86,6 +92,8 @@ def initialize(session_id, cookie, secret)
     #
     # ==== Parameters
     # requestMerb::Request:: request object created from Rack environment.
+    # 
+    # @api private
     def finalize(request)
       if @_destroy
         request.destroy_session_cookie
@@ -95,10 +103,12 @@ def finalize(request)
     end
     
     # Regenerate the session_id.
+    # 
+    # @api private
     def regenerate
       self.session_id = Merb::SessionMixin.rand_uuid
     end
-
+    
     # Create the raw cookie string; includes an HMAC keyed message digest.
     #
     # ==== Returns
@@ -111,6 +121,8 @@ def regenerate
     # Session data is converted to a Hash first, since a container might
     # choose to marshal it, which would make it persist
     # attributes like 'needs_new_cookie', which it shouldn't.
+    # 
+    # @api private
     def to_cookie
       unless self.empty?
         data = self.serialize
@@ -123,24 +135,31 @@ def to_cookie
         value
       end
     end
-
+    
     private
-
+    
     # Generate the HMAC keyed message digest. Uses SHA1.
+    # 
+    # ==== Returns
+    # String:: an HMAC digest of the cookie data.
+    # 
+    # @api private
     def generate_digest(data)
       OpenSSL::HMAC.hexdigest(DIGEST, @secret, data)
     end
-
+    
     # Unmarshal cookie data to a hash and verify its integrity.
-    #
+    # 
     # ==== Parameters
     # cookie~to_s:: The cookie to unmarshal.
-    #
+    # 
     # ==== Raises
     # TamperedWithCookie:: The digests don't match.
-    #
+    # 
     # ==== Returns
     # Hash:: The stored session data.
+    # 
+    # @api private
     def unmarshal(cookie)
       if cookie.blank?
         {}
@@ -156,16 +175,26 @@ def unmarshal(cookie)
         unserialize(data)
       end
     end
-
+    
     protected
-
+    
     # Serialize current session data as a Hash.
     # Uses Base64 encoding for integrity.
+    # 
+    # ==== Returns
+    # String:: Base64 encoded dump of the session hash.
+    # 
+    # @api private
     def serialize
       Base64.encode64(Marshal.dump(self.to_hash)).chop
     end
-
+    
     # Unserialize the raw cookie data to a Hash
+    # 
+    # ==== Returns
+    # Hash:: the session hash Base64 decoded from the data dump.
+    # 
+    # @api private
     def unserialize(data)
       Marshal.load(Base64.decode64(data)) rescue {}
     end</field>
	<field name="commit_file_name">memcached.rb</field>
	<field name="commit_diff">@@ -28,33 +28,37 @@ class MemcacheSession  SessionStoreContainer
   end
   
   module MemcacheStore
-
+    
     # Make the Memcached gem conform to the SessionStoreContainer interface
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to retrieve.
     #
     # ==== Returns
     # ContainerSession:: The session corresponding to the ID.
+    # 
+    # @api private
     def retrieve_session(session_id)
       get("session:#{session_id}")
     end
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to set.
     # dataContainerSession:: The session to set.
+    # 
+    # @api private
     def store_session(session_id, data)
       set("session:#{session_id}", data)
     end
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to delete.
     def delete_session(session_id)
       delete("session:#{session_id}")
     end
-
+    
   end
-
+  
 end
 
 # For the memcached gem.</field>
	<field name="commit_file_name">memory.rb</field>
	<field name="commit_diff">@@ -34,9 +34,11 @@ def self.store
   
   # Used for handling multiple sessions stored in memory.
   class MemorySessionStore
-
+    
     # ==== Parameters
     # ttlFixnum:: Session validity time in seconds. Defaults to 1 hour.
+    # 
+    # @api private
     def initialize(ttl=nil)
       @sessions = Hash.new
       @timestamps = Hash.new
@@ -50,41 +52,51 @@ def initialize(ttl=nil)
     #
     # ==== Returns
     # ContainerSession:: The session corresponding to the ID.
+    # 
+    # @api private
     def retrieve_session(session_id)
       @mutex.synchronize {
         @timestamps[session_id] = Time.now
         @sessions[session_id]
       }
     end
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to set.
     # dataContainerSession:: The session to set.
+    # 
+    # @api private
     def store_session(session_id, data)
       @mutex.synchronize {
         @timestamps[session_id] = Time.now
         @sessions[session_id] = data
       }
     end
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to delete.
+    # 
+    # @api private
     def delete_session(session_id)
       @mutex.synchronize {
         @timestamps.delete(session_id)
         @sessions.delete(session_id)
       }
     end
-
+    
     # Deletes any sessions that have reached their maximum validity.
+    # 
+    # @api private
     def reap_expired_sessions
       @timestamps.each do |session_id,stamp|
         delete_session(session_id) if (stamp + @session_ttl)  Time.now 
       end
       GC.start
     end
-
+    
     # Starts the timer that will eventually reap outdated sessions.
+    # 
+    # @api private
     def start_timer
       Thread.new do
         loop {</field>
	<field name="commit_file_name">store_container.rb</field>
	<field name="commit_diff">@@ -45,25 +45,31 @@ class SessionStoreContainer  SessionContainer
     self.session_store_type = :store
     
     class  self
-
+      
       # Generates a new session ID and creates a new session.
-      #
+      # 
       # ==== Returns
       # SessionStoreContainer:: The new session.
+      # 
+      # @api private
       def generate
         session = new(Merb::SessionMixin.rand_uuid)
         session.needs_new_cookie = true
         session
       end
-
-      # Setup a new session.
-      #
+      
+      # Setup a new session or retreive an existing session.
+      # 
       # ==== Parameters
       # requestMerb::Request:: The Merb::Request that came in from Rack.
-      #
+      # 
+      # ==== Notes
+      # If no sessions were found, a new SessionContainer will be generated.
+      # 
       # ==== Returns
-      # SessionContainer:: a SessionContainer. If no sessions were found, 
-      # a new SessionContainer will be generated.
+      # SessionContainer:: a SessionContainer.
+      # 
+      # @api private
       def setup(request)
         session = retrieve(request.session_id)
         request.session = session
@@ -84,6 +90,8 @@ def setup(request)
       # ==== Notes
       # If there are persisted exceptions callbacks to execute, they all get executed
       # when Memcache library raises an exception.
+      # 
+      # @api private
       def retrieve(session_id)
         unless session_id.blank?
           begin
@@ -121,6 +129,8 @@ def retrieve(session_id)
     # The data (self) is converted to a Hash first, since a container might 
     # choose to do a full Marshal on the data, which would make it persist 
     # attributes like 'needs_new_cookie', which it shouldn't.
+    # 
+    # @api private
     def finalize(request)
       if @_destroy
         store.delete_session(self.session_id)
@@ -138,8 +148,10 @@ def finalize(request)
         end
       end
     end
-
+    
     # Regenerate the session ID.
+    # 
+    # @api private
     def regenerate
       store.delete_session(self.session_id)
       self.session_id = Merb::SessionMixin.rand_uuid</field>
	<field name="commit_file_name">worker.rb</field>
	<field name="commit_diff">@@ -3,14 +3,24 @@ class Worker
     
     attr_accessor :thread
     
+    # ==== Returns
+    # Merb::Worker:: instance of a worker.
+    # 
+    # @api private
     def self.start
       new
     end
     
+    # Creates a new worker thread that loops over the work queue.
+    # 
+    # @api private
     def initialize
       @thread = Thread.new { loop { process_queue } }
     end
     
+    # Processes tasks in the Merb::Dispatcher.work_queue.
+    # 
+    # @api private
     def process_queue
       begin
         while blk = Merb::Dispatcher.work_queue.pop
@@ -25,8 +35,8 @@ def process_queue
       rescue Exception = e
         Merb.logger.warn! %Q!Worker Thread Crashed with Exception:\n#{Merb.exception(e)}\nRestarting Worker Thread!
         retry
-      end    
+      end
     end
     
   end
-end    
\ No newline at end of file
+end
\ No newline at end of file</field>
	<field name="commit_file_name">erubis.rb</field>
	<field name="commit_diff">@@ -1,5 +1,9 @@
 require 'erubis'
 module Erubis
+  # This adds support for embedding the return value of a block call:
+  #   %= foo do %...% end =%
+  #
+  # @api private
   module Basic::Converter
     def convert_input(src, input)
       pat = @pattern</field>
	<field name="commit_file_name">logger.rb</field>
	<field name="commit_diff">@@ -1,16 +1,5 @@
 # Merb::Logger = Extlib::Logger
 
-class Merb::Logger  Extlib::Logger
-  def verbose!(message, level = :warn)
-    send("#{level}!", message) if Merb::Config[:verbose]
-  end
-
-  def verbose(message, level = :warn)
-    send(level, message) if Merb::Config[:verbose]
-  end
-end
-
-# require "time" # httpdate
 # ==== Public Merb Logger API
 #
 # To replace an existing logger with a new one:
@@ -45,168 +34,37 @@ def verbose(message, level = :warn)
 #   Merb::Logger.new(log{String, IO},level{Symbol, String})
 module Merb
 
-  class Logger
-
-    attr_accessor :level
-    attr_accessor :delimiter
-    attr_accessor :auto_flush
-    attr_reader   :buffer
-    attr_reader   :log
-    attr_reader   :init_args
-
-    # ==== Notes
-    # Ruby (standard) logger levels:
-    # :fatal:: An unhandleable error that results in a program crash
-    # :error:: A handleable error condition
-    # :warn:: A warning
-    # :info:: generic (useful) information about system operation
-    # :debug:: low-level information for developers
-    Levels = Mash.new({
-      :fatal = 7,
-      :error = 6,
-      :warn  = 4,
-      :info  = 3,
-      :debug = 0
-    }) unless const_defined?(:Levels)
-
-    @@mutex = {}
+  class Logger  Extlib::Logger
 
-    private
-
-    # Readies a log for writing.
+    # Appends a message to the log if the specified log level is at least as high as
+    # the log level of the logger if Merb::Config[:verbose]. Then flushes the log 
+    # buffer to disk.
     #
     # ==== Parameters
-    # logIO, String:: Either an IO object or a name of a logfile.
-    def initialize_log(log)
-      close if @log # be sure that we don't leave open files laying around.
-
-      if log.respond_to?(:write)
-        @log = log
-      elsif File.exist?(log)
-        @log = open(log, (File::WRONLY | File::APPEND))
-        @log.sync = true
-      else
-        FileUtils.mkdir_p(File.dirname(log)) unless File.directory?(File.dirname(log))
-        @log = open(log, (File::WRONLY | File::APPEND | File::CREAT))
-        @log.sync = true
-        @log.write("#{Time.now.httpdate} #{delimiter} info #{delimiter} Logfile created\n")
-      end
-    end
-
-    public
-
-    # To initialize the logger you create a new object, proxies to set_log.
+    # messageString:: The message to be logged.
+    # levelSymbol:: The level at which to log. Default is :warn.
     #
-    # ==== Parameters
-    # *args:: Arguments to create the log from. See set_logs for specifics.
-    def initialize(*args)
-      set_log(*args)
-    end
-
-    # Replaces an existing logger with a new one.
+    # ==== Returns
+    # self:: The logger object for chaining.
     #
-    # ==== Parameters
-    # logIO, String:: Either an IO object or a name of a logfile.
-    # log_level~to_sym::
-    #   The log level from, e.g. :fatal or :info. Defaults to :error in the
-    #   production environment and :debug otherwise.
-    # delimiterString::
-    #   Delimiter to use between message sections. Defaults to " ~ ".
-    # auto_flushBoolean::
-    #   Whether the log should automatically flush after new messages are
-    #   added. Defaults to false.
-    def set_log(stream = Merb::Config[:log_stream],
-      log_level = Merb::Config[:log_level],
-      delimiter = Merb::Config[:log_delimiter],
-      auto_flush = Merb::Config[:log_auto_flush])
-
-      @buffer                   = []
-      @delimiter                = delimiter
-      @auto_flush               = auto_flush
-
-      if Levels[log_level]
-        @level                  = Levels[log_level]
-      else
-        @level                  = log_level
-      end
-
-      @log                      = stream
-      @mutex = (@@mutex[@log] ||= Mutex.new)
-    end
-
-    # Flush the entire buffer to the log object.
-    def flush
-      return unless @buffer.size  0
-      @mutex.synchronize do
-        @log.write(@buffer.slice!(0..-1).to_s)
-      end
-    end
-
-    # Close and remove the current log object.
-    def close
-      flush
-      @log.close if @log.respond_to?(:close) && !@log.tty?
-      @log = nil
+    # @api plugin
+    def verbose!(message, level = :warn)
+      send("#{level}!", message) if Merb::Config[:verbose]
     end
 
-    # Appends a message to the log. The methods yield to an optional block and
-    # the output of this block will be appended to the message.
+    # Appends a message to the log if the specified log level is at least as high as
+    # the log level of the logger if Merb::Config[:verbose].
     #
     # ==== Parameters
-    # stringString:: The message to be logged. Defaults to nil.
+    # messageString:: The message to be logged.
+    # levelSymbol:: The level at which to log. Default is :warn.
     #
     # ==== Returns
-    # String:: The resulting message added to the log file.
-    def (string = nil)
-      message = ""
-      message  delimiter
-      message  string if string
-      message  "\n" unless message[-1] == ?\n
-      @buffer  message
-      flush if @auto_flush
-
-      message
-    end
-    alias :push :
-
-    # Generate the logging methods for Merb.logger for each log level.
-    Levels.each_pair do |name, number|
-      class_eval -LEVELMETHODS, __FILE__, __LINE__
-
-      # Appends a message to the log if the log level is at least as high as
-      # the log level of the logger.
-      #
-      # ==== Parameters
-      # stringString:: The message to be logged. Defaults to nil.
-      #
-      # ==== Returns
-      # self:: The logger object for chaining.
-      def #{name}(message = nil)
-        self  message if #{number} = level
-        self
-      end
-
-      # Appends a message to the log if the log level is at least as high as
-      # the log level of the logger. The bang! version of the method also auto
-      # flushes the log buffer to disk.
-      #
-      # ==== Parameters
-      # stringString:: The message to be logged. Defaults to nil.
-      #
-      # ==== Returns
-      # self:: The logger object for chaining.
-      def #{name}!(message = nil)
-        self  message if #{number} = level
-        flush if #{number} = level
-        self
-      end
-
-      # ==== Returns
-      # Boolean:: True if this level will be logged by this logger.
-      def #{name}?
-        #{number} = level
-      end
-      LEVELMETHODS
+    # self:: The logger object for chaining.
+    #
+    # @api plugin
+    def verbose(message, level = :warn)
+      send(level, message) if Merb::Config[:verbose]
     end
 
   end</field>
	<field name="commit_file_name">plugins.rb</field>
	<field name="commit_diff">@@ -2,10 +2,15 @@ module Merb
 
   module Plugins
 
+    # Returns the configuration settings hash for plugins. This is prepopulated from
+    # Merb.root / "config/plugins.yml" if it is present.
+    #
     # ==== Returns
     # Hash::
     #   The configuration loaded from Merb.root / "config/plugins.yml" or, if
     #   the load fails, an empty hash whose default value is another Hash.
+    #
+    # @api plugin
     def self.config
       @config ||= begin
         # this is so you can do Merb.plugins.config[:helpers][:awesome] = "bar"
@@ -25,12 +30,16 @@ def self.config
 
     # ==== Returns
     # Array(String):: All Rakefile load paths Merb uses for plugins.
+    #
+    # @api plugin
     def self.rakefiles
       Merb.rakefiles
     end
     
     # ==== Returns
     # Array(String):: All Generator load paths Merb uses for plugins.
+    #
+    # @api plugin
     def self.generators
       Merb.generators
     end
@@ -49,6 +58,8 @@ def self.generators
     # if defined(Merb::Plugins)
     #   Merb::Plugins.add_rakefiles "merb_sequel" / "merbtasks"
     # end
+    #
+    # @api plugin
     def self.add_rakefiles(*rakefiles)
       Merb.add_rakefiles(*rakefiles)
     end
@@ -60,6 +71,8 @@ def self.add_rakefiles(*rakefiles)
     #
     # This is the recommended way to register your plugin's generators
     # in Merb.
+    #
+    # @api plugin
     def self.add_generators(*generators)
       Merb.add_generators(*generators)
     end</field>
	<field name="commit_file_name">adapter.rb</field>
	<field name="commit_diff">@@ -5,6 +5,7 @@ module Rack
     class Adapter
 
       class  self
+        # Get a rack adapter by id. 
         # ==== Parameters
         # idString:: The identifier of the Rack adapter class to retrieve.
         #</field>
	<field name="commit_file_name">abstract.rb</field>
	<field name="commit_diff">@@ -2,7 +2,51 @@ module Merb
   module Rack
     class AbstractAdapter
 
+      # This method is designed to be overridden in a rack adapter.  It 
+      # will be called to start a server created with the new_server method.
+      # This is called from the AbstractAdapter start method.
+      #
+      # @api plugin
+      # @overridable
+      def self.start_server
+        raise NotImplemented
+      end
+      
+      # This method is designed to be overridden in a rack adapter.  It will
+      # be called to create a new instance of the server for the adapter to 
+      # start.  The adapter should attempt to bind to a port at this point. 
+      # This is called from the AbstractAdapter start method.
+      #
+      # ==== Parameters
+      # portInteger:: The port the server should listen on
+      #
+      # @api plugin
+      # @overridable
+      def self.new_server(port)
+        raise NotImplemented
+      end
+      
+      # This method is designed to be overridden in a rack adapter.  It will
+      # be called to stop the adapter server.  
+      #
+      # ==== Parameters
+      # statusInteger:: The exit status the adapter should exit with. 
+      #
+      # ==== Returns
+      # Boolean:: True if the server was properly stopped.  
+      #
+      # @api plugin
+      # @overridable
+      def self.stop(status)
+        raise NotImplemented
+      end
+
       # Spawn a new worker process at a port.
+      #
+      # ==== Parameters
+      # portInteger:: The port to start the worker process on. 
+      #
+      # @api private
       def self.spawn_worker(port)
         worker_pid = Kernel.fork
         start_at_port(port, @opts) unless worker_pid
@@ -15,6 +59,17 @@ def self.spawn_worker(port)
       end
 
       # The main start method for bootloaders that support forking.
+      # This method launches the adapters which inherit using the 
+      # new_server and start_server methods.  This method should not
+      # be overridden in adapters which want to fork.  
+      #
+      # ==== Parameters
+      # optsHash:: A hash of options
+      #   socket: the socket to bind to
+      #   port: the port to bind to
+      #   cluster: the number 
+      #
+      # @api private
       def self.start(opts={})
         @opts = opts
         $WORKERS ||= []
@@ -88,6 +143,14 @@ def self.start(opts={})
 
       end
 
+      # Fork a server on the specified port and start the app.
+      #
+      # ==== Parameters
+      # portInteger:: The port to start the server on
+      # optsHash:: The hash of options, defaults to the @opts 
+      #   instance variable.  
+      #
+      # @api private
       def self.start_at_port(port, opts = @opts)
         at_exit do
           Merb::Server.remove_pid(port)
@@ -167,11 +230,24 @@ def self.start_at_port(port, opts = @opts)
         start_server
       end
 
-      # This can be overridden in adapters, but shouldn't need to be.
+      # Exit the process with the specified status.  
+      #
+      # ==== Parameters
+      # statusInteger:: The exit code of the process.
+      # 
+      # @api private
       def self.exit_process(status = 0)
         exit(status)
       end
 
+      # Set the process title.
+      #
+      # ==== Parameters
+      # whoamiSymbol:: Either :spawner for the master process or :worker for any of the worker
+      #   processes. 
+      # portInteger:: The base port that the app is running on. 
+      #
+      # @api private
       def self.process_title(whoami, port)
         name = Merb::Config[:name]
         app  = "merb#{" : #{name}" if (name && name != "merb")}"</field>
	<field name="commit_file_name">irb.rb</field>
	<field name="commit_diff">@@ -1,15 +1,60 @@
 module Merb
   module Rack
     class Console
-      # ==== Parameters
-      # name~to_sym, Hash:: The name of the route to generate.
-      # paramsHash:: The params to use in the route generation.
+      # There are three possible ways to use this method.  First, if you have a named route, 
+      # you can specify the route as the first parameter as a symbol and any paramters in a 
+      # hash.  Second, you can generate the default route by just passing the params hash, 
+      # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+      # allows you to specify the parameters to a named route in the order they appear in the 
+      # router.  
+      #
+      # ==== Parameters(Named Route)
+      # nameSymbol:: 
+      #   The name of the route. 
+      # argsHash:: 
+      #   Parameters for the route generation.
+      #
+      # ==== Parameters(Default Route)
+      # argsHash:: 
+      #   Parameters for the route generation.  This route will use the default route. 
+      #
+      # ==== Parameters(Anonymous Parameters)
+      # nameSymbol::
+      #   The name of the route.  
+      # argsArray:: 
+      #   An array of anonymous parameters to generate the route
+      #   with. These parameters are assigned to the route parameters
+      #   in the order that they are passed.
       #
       # ==== Returns
       # String:: The generated URL.
       #
-      # ==== Alternatives
-      # If name is a hash, it will be merged with params.
+      # ==== Examples
+      # Named Route
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, :title = "new_article")
+      #
+      # Default Route
+      #
+      # Merb::Router.prepare do
+      #   default_routes
+      # end
+      #
+      # url(:controller = "articles", :action = "new")
+      #
+      # Anonymous Paramters
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, 2008, 10, "test_article")
+      #
+      # @api public
       def url(name, *args)
         args  {}
         Merb::Router.url(name, *args)</field>
	<field name="commit_file_name">application.rb</field>
	<field name="commit_diff">@@ -2,6 +2,16 @@ module Merb
   module Rack
     class Application
       
+      # The main rack application call method.  This is the entry point from rack (and the webserver) 
+      # to your application.  
+      #
+      # ==== Parameters
+      # envHash:: A rack request of parameters.  
+      #
+      # ==== Returns
+      # Array:: A rack response of [statusInteger, headersHash, bodyString, Stream]
+      #
+      # @api private
       def call(env) 
         begin
           rack_response = ::Merb::Dispatcher.handle(Merb::Request.new(env))
@@ -18,6 +28,18 @@ def call(env)
         rack_response
       end
 
+      # Determines whether this request is a "deferred_action", usually a long request. 
+      # Rack uses this method to detemine whether to use an evented request or a deferred 
+      # request in evented rack handlers.  
+      #
+      # ==== Parameters
+      # envHash:: The rack request
+      #
+      # ==== Returns
+      # Boolean::
+      #   True if the request should be deferred.  
+      #
+      # @api private
       def deferred?(env)
         path = env[Merb::Const::PATH_INFO] ? env[Merb::Const::PATH_INFO].chomp('/') : ""
         if path =~ Merb.deferred_actions</field>
	<field name="commit_file_name">helpers.rb</field>
	<field name="commit_diff">@@ -2,6 +2,20 @@ module Merb
   module Rack
     module Helpers
       
+      # A helper to build a rack response which implements a redirect.  The status will be set to 
+      # the passed in status if passed.  If you pass in permanent it will be a 301, permanent redirect,
+      # otherwise it defaults to a temporary 302 redirect.  
+      #
+      # ==== Parameters
+      # url~to_s:: The url to redirect to.
+      # optionsHash:: A hash of options for the redirect
+      #   status: The status code to use for the redirect
+      #   permanent:  True if this is a permanent redirect (301)
+      #
+      # ==== Returns
+      # Array:: A rack response to redirect to the specified url.  
+      #
+      # @api plugin
       def self.redirect(url, options = {})
         # Build the rack array
         status   = options.delete(:status)</field>
	<field name="commit_file_name">server.rb</field>
	<field name="commit_diff">@@ -18,6 +18,8 @@ class  self
       # ==== Alternatives
       # If cluster is left out, then one process will be started. This process
       # will be daemonized if Merb::Config[:daemonize] is true.
+      #
+      # @api private
       def start(port, cluster=nil)
 
         @port = port
@@ -47,6 +49,8 @@ def start(port, cluster=nil)
       # ==== Returns
       # Boolean::
       #   True if Merb is running on the specified port.
+      #
+      # @api private
       def alive?(port)
         puts "About to check if port #{port} is alive..." if Merb::Config[:verbose]
         pidfile = pid_file(port)
@@ -68,6 +72,8 @@ def alive?(port)
       # ==== Alternatives
       # If you pass "all" as the port, the signal will be sent to all Merb
       # processes.
+      #
+      # @api private
       def kill(port, sig="INT")
         Merb::BootLoader::BuildFramework.run
         if sig == 9 && port == "main"
@@ -90,6 +96,8 @@ def kill(port, sig="INT")
         end
       end
 
+      # Kills the process pointed at by the provided pid file.
+      # @api private
       def kill_pid(sig, file)
         begin
           pid = File.read(file).chomp.to_i
@@ -118,6 +126,8 @@ def kill_pid(sig, file)
 
       # ==== Parameters
       # port~to_s:: The port of the Merb process to daemonize.
+      #
+      # @api private
       def daemonize(port)
         puts "About to fork..." if Merb::Config[:verbose]
         fork do
@@ -142,6 +152,9 @@ def daemonize(port)
         Merb.fatal! "Daemonized mode is not supported on your platform", e
       end
 
+      # Starts up Merb by running the bootloader and starting the adapter.
+      #
+      # @api private
       def bootup
         Merb.trap('TERM') {
           Merb::BootLoader::LoadClasses.reap_workers if Merb::Config[:fork_for_class_load]
@@ -154,6 +167,9 @@ def bootup
         Merb.adapter.start(Merb::Config.to_hash)
       end
 
+      # Change process user/group to those specified in Merb::Config.
+      #
+      # @api private
       def change_privilege
         if Merb::Config[:user] && Merb::Config[:group]
           Merb.logger.verbose! "About to change privilege to group " \
@@ -179,6 +195,8 @@ def change_privilege
       # ==== Alternatives
       # If Merb::Config[:pid_file] has been specified, that will be used
       # instead of the port based PID file.
+      #
+      # @api private
       def remove_pid_file(port)
         pidfile = pid_file(port)
         if File.exist?(pidfile)
@@ -198,14 +216,32 @@ def remove_pid_file(port)
       # ==== Alternatives
       # If Merb::Config[:pid_file] has been specified, that will be used
       # instead of the port based PID file.
+      #
+      # @api private
       def store_pid(port)
         store_details(port)
       end
 
+      # Delete the pidfile for the specified port.
+      #
+      # @api private
       def remove_pid(port)
         FileUtils.rm(pid_file(port)) if File.file?(pid_file(port))
       end
 
+      # Stores a PID file on the filesystem.
+      # This uses :pid_file options from configuration when provided
+      # or merb.port.pid in log directory by default.
+      #
+      # ==== Parameters
+      # port~to_s::
+      #   The port of the Merb process to whom the the PID file belongs to.
+      #
+      # ==== Alternatives
+      # If Merb::Config[:pid_file] has been specified, that will be used
+      # instead of the port based PID file.
+      #
+      # @api private
       def store_details(port = nil)
         file = pid_file(port)
         begin
@@ -233,6 +269,8 @@ def store_details(port = nil)
       # String::
       #   Location of pid file for specified port. If clustered and pid_file option
       #   is specified, it adds the port value to the path.
+      #
+      # @api private
       def pid_file(port)
         pidfile = Merb::Config[:pid_file] || (Merb.log_path / "merb.%s.pid")
         pidfile % port
@@ -243,6 +281,8 @@ def pid_file(port)
       # ==== Returns
       # Array::
       #   List of pid file paths. If not clustered, array contains a single path.
+      #
+      # @api private
       def pid_files
         if Merb::Config[:pid_file]
           if Merb::Config[:cluster]
@@ -263,6 +303,8 @@ def pid_files
       #
       # ==== Alternatives
       # If group is left out, the user will be used as the group.
+      #
+      # @api private
       def _change_privilege(user, group=user)
 
         Merb.logger.warn! "Changing privileges to #{user}:#{group}"
@@ -297,6 +339,7 @@ def _change_privilege(user, group=user)
         false
       end
 
+      # @api private
       def add_irb_trap
         Merb.trap('INT') do
           if @interrupted</field>
	<field name="commit_file_name">route_helper.rb</field>
	<field name="commit_diff">@@ -3,14 +3,60 @@ module Test
     module RouteHelper
       include RequestHelper
       
-      # Mimics the url method available to controllers.
+      # There are three possible ways to use this method.  First, if you have a named route, 
+      # you can specify the route as the first parameter as a symbol and any paramters in a 
+      # hash.  Second, you can generate the default route by just passing the params hash, 
+      # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+      # allows you to specify the parameters to a named route in the order they appear in the 
+      # router.  
       #
-      # ==== Parameters
-      # name~to_sym:: The name of the URL to generate.
-      # paramsHash:: Parameters for the route generation.
+      # ==== Parameters(Named Route)
+      # nameSymbol:: 
+      #   The name of the route. 
+      # argsHash:: 
+      #   Parameters for the route generation.
+      #
+      # ==== Parameters(Default Route)
+      # argsHash:: 
+      #   Parameters for the route generation.  This route will use the default route. 
+      #
+      # ==== Parameters(Anonymous Parameters)
+      # nameSymbol::
+      #   The name of the route.  
+      # argsArray:: 
+      #   An array of anonymous parameters to generate the route
+      #   with. These parameters are assigned to the route parameters
+      #   in the order that they are passed.
       #
       # ==== Returns
       # String:: The generated URL.
+      #
+      # ==== Examples
+      # Named Route
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, :title = "new_article")
+      #
+      # Default Route
+      #
+      # Merb::Router.prepare do
+      #   default_routes
+      # end
+      #
+      # url(:controller = "articles", :action = "new")
+      #
+      # Anonymous Paramters
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, 2008, 10, "test_article")
+      #
+      # @api public
       def url(*args)
         args  (@request_params || {})
         Merb::Router.url(*args)</field>
	<field name="commit_file_name">kernel_spec.rb</field>
	<field name="commit_diff">@@ -1,19 +1,5 @@
 require File.dirname(__FILE__) + '/../../spec_helper'
 
-describe "Kernel#require" do
-  before do
-    @logger = StringIO.new
-  end
-
-  it "should be able to require and throw a useful error message" do
-    Kernel.stub!(:require).with("redcloth").and_raise(LoadError)
-    Merb.logger.should_receive(:error!).with("foo")
-    Kernel.rescue_require("redcloth", "foo")
-  end
-end
-
-
-
 describe "Kernel#caller" do
   it "should be able to determine caller info" do
     __caller_info__.should be_kind_of(Array)
@@ -71,7 +57,7 @@
     end
   end
 
-  it "deferres load of dependencies given as Hash" do
+  it "defers load of dependencies given as Hash" do
     self.should_receive(:dependency).with("hpricot", "0.6").and_return(true)
     self.should_receive(:dependency).with("rake", "0.8.1").and_return(true)
 </field>
	<field name="commit_file_name">bootloader_spec.rb</field>
	<field name="commit_diff">@@ -5,14 +5,16 @@
   it "should default to rack config (rack.rb)" do
     options = {:merb_root = File.dirname(__FILE__) / 'fixture'}
     Merb::Config.setup(options)
-    app = Merb::BootLoader::RackUpApplication.run
+    Merb::BootLoader::RackUpApplication.run
+    app = Merb::Config[:app]
     app.class.should == Merb::Rack::Static
   end
 
   it "should use rackup config that we specified" do
     options = {:rackup = File.dirname(__FILE__) / 'fixture' / 'config' / 'black_hole.rb'}
     Merb::Config.setup(options)
-    app = Merb::BootLoader::RackUpApplication.run
+    Merb::BootLoader::RackUpApplication.run
+    app = Merb::Config[:app]
     app.class.should == Rack::Adapter::BlackHole
 
     env = Rack::MockRequest.env_for("/black_hole")</field>
	<field name="commit_file_name">logger_spec.rb</field>
	<field name="commit_diff">@@ -21,6 +21,14 @@
 
 describe Merb::Logger do
 
+  describe "Levels" do
+    it "should have the same entries as Extlib::Logger::Levels" do
+      Extlib::Logger::Levels.each do |level, value|
+        Merb::Logger::Levels[level].should == value
+      end
+    end
+  end
+
   describe "#new" do
     it "should call set_log with the arguments it was passed." do
       logger = Merb::Logger.allocate # create an object sans initialization
@@ -41,6 +49,12 @@
       Merb.logger.level.should == 4
     end
 
+    it "should set the log level to a specific numeric value when that value is set into Mer" do
+      Merb::Config[:log_level] = 5
+      Merb.reset_logger!
+      Merb.logger.level.should == 5
+    end
+
     it "should set the log level to :debug (0) when Merb.environment is development" do
       Merb.environment = "development"
       Merb::Config.delete(:log_level)
@@ -280,4 +294,81 @@ def set_level(level)
       Merb.logger.should log_with_method(:fatal)
     end
   end # #fatal
+  
+  describe "#verbose" do
+    before do
+      @stream = Merb::Config[:log_stream] = StringIO.new
+      Merb.reset_logger!
+    end
+    
+    describe "when Merb::Config[:verbose] is false" do
+      it "should not log any messages" do
+        Merb::Config[:verbose] = false
+        Merb::Config[:log_level] = :debug
+        Merb.logger.verbose("message", :fatal)
+        Merb.logger.flush
+        
+        Merb.logger.log.string.should_not include("message")
+      end
+    end
+    
+    describe "when Merb::Config[:verbose] is true" do
+      before do
+        Merb::Config[:verbose] = true
+        Merb::Config[:log_level] = :debug
+      end
+
+      it "adds to the buffer with error level" do
+        set_level(:error)
+        Merb.logger.verbose("message", :error)
+        Merb.logger.flush
+        Merb.logger.log.string.should include("message")
+      end
+
+      it "adds to the buffer with fatal level" do
+        set_level(:fatal)
+        Merb.logger.verbose("message", :error)
+        Merb.logger.flush
+        Merb.logger.log.string.should_not include("message")
+      end
+      
+    end
+  end
+  
+  describe "#verbose!" do
+    before do
+      @stream = Merb::Config[:log_stream] = StringIO.new
+      Merb.reset_logger!
+    end
+    
+    describe "when Merb::Config[:verbose] is false" do
+      it "should not log any messages" do
+        Merb::Config[:verbose] = false
+        Merb::Config[:log_level] = :debug
+        Merb.logger.verbose!("message", :fatal)
+        Merb.logger.log.string.should_not include("message")
+      end
+    end
+    
+    describe "when Merb::Config[:verbose] is true" do
+      before do
+        Merb::Config[:verbose] = true
+        Merb::Config[:log_level] = :debug
+      end
+
+      it "adds to the buffer with error level" do
+        set_level(:error)
+        Merb.logger.verbose!("message", :error)
+        Merb.logger.log.string.should include("message")
+      end
+
+      it "adds to the buffer with fatal level" do
+        set_level(:fatal)
+        Merb.logger.verbose!("message", :error)
+        Merb.logger.log.string.should_not include("message")
+      end
+      
+    end
+  end
+  
 end # Merb::Logger</field>
	<field name="commit_sha">5e4a862e856bd0a5b90deebbf2be3340a8955b6a</field>
	<field name="commit_message">Merge commit 'adelcambre/sprint' into sprint</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-11T06:27:59Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-11T06:27:59Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_file_name">merb-core.rb</field>
	<field name="commit_diff">@@ -278,7 +278,11 @@ def root_path(*path)
 
     # Logger settings
     def logger
-      Thread.current[:merb_logger] ||= Merb::Logger.new
+      Thread.current[:merb_logger] ||= Merb::Logger.new(
+        Merb::Config[:log_stream],
+        Merb::Config[:log_level],
+        Merb::Config[:log_delimiter],
+        Merb::Config[:log_auto_flush])
     end
 
     def reset_logger!</field>
	<field name="commit_file_name">bootloader.rb</field>
	<field name="commit_diff">@@ -3,8 +3,8 @@ module Merb
   class BootLoader
 
     # def self.subclasses
-    #---
-    # @semipublic
+    #
+    # @api plugin
     cattr_accessor :subclasses, :after_load_callbacks, :before_load_callbacks, :finished
     self.subclasses, self.after_load_callbacks,
       self.before_load_callbacks, self.finished = [], [], [], []
@@ -16,29 +16,44 @@ class  self
       #
       # ==== Parameters
       # klassClass:: The class inheriting from Merb::BootLoader.
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api plugin
       def inherited(klass)
         subclasses  klass.to_s
         super
       end
 
+      # Execute this boot loader after the specified boot loader.
+      #
       # ==== Parameters
       # klass~to_s::
       #   The boot loader class after which this boot loader should be run.
       #
-      #---
-      # @public
+      # ==== Returns
+      # nil
+      # 
+      # @api plugin
       def after(klass)
         move_klass(klass, 1)
+        nil
       end
 
+      # Execute this boot loader before the specified boot loader.
+      #
       # ==== Parameters
       # klass~to_s::
       #   The boot loader class before which this boot loader should be run.
       #
-      #---
-      # @public
+      # ==== Returns
+      # nil
+      #
+      # @api plugin
       def before(klass)
         move_klass(klass, 0)
+        nil
       end
 
       # Move a class that is inside the bootloader to some place in the Array,
@@ -49,15 +64,26 @@ def before(klass)
       #   The klass to move the bootloader relative to
       # whereInteger::
       #   0 means insert it before; 1 means insert it after
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api private
       def move_klass(klass, where)
         index = Merb::BootLoader.subclasses.index(klass.to_s)
         if index
           Merb::BootLoader.subclasses.delete(self.to_s)
           Merb::BootLoader.subclasses.insert(index + where, self.to_s)
         end
+        nil
       end
 
       # Runs all boot loader classes by calling their run methods.
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api plugin
       def run
         Merb.started = true
         subklasses = subclasses.dup
@@ -74,6 +100,7 @@ def run
           self.finished  bootloader
         end
         self.subclasses = subklasses
+        nil
       end
 
       # Determines whether or not a specific bootloader has finished yet.
@@ -83,6 +110,8 @@ def run
       #
       # ==== Returns
       # Boolean:: Whether or not the bootloader has finished.
+      #
+      # @api private
       def finished?(bootloader)
         self.finished.include?(bootloader.to_s)
       end
@@ -92,8 +121,8 @@ def finished?(bootloader)
       # ==== Returns
       # nil
       #
-      #---
-      # @public
+      # @api plugin
+      # @overridable
       def default_framework
         %w[view model helper controller mailer part].each do |component|
           Merb.push_path(component.to_sym, Merb.root_path("app/#{component}s"))
@@ -111,24 +140,26 @@ def default_framework
         nil
       end
 
+      # Execute a block of code after the app loads.
+      #
       # ==== Parameters
       # &block::
       #   A block to be added to the callbacks that will be executed after the
       #   app loads.
       #
-      #---
-      # @public
+      # @api public
       def after_app_loads(&block)
         after_load_callbacks  block
       end
 
+      # Execute a block of code before the app loads but after dependencies load.
+      #
       # ==== Parameters
       # &block::
       #   A block to be added to the callbacks that will be executed before the
       #   app loads.
       #
-      #---
-      # @public
+      # @api public
       def before_app_loads(&block)
         before_load_callbacks  block
       end
@@ -145,6 +176,11 @@ def before_app_loads(&block)
 class Merb::BootLoader::Logger  Merb::BootLoader
 
   # Sets Merb.logger to a new logger created based on the config settings.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb::Config[:log_level] ||= begin
       if Merb.environment == "production"
@@ -157,8 +193,16 @@ def self.run
     Merb::Config[:log_stream] = Merb.log_stream
 
     print_warnings
+    
+    nil
   end
 
+  # Print a warning if the installed version of rubygems is not supported
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.print_warnings
     if Gem::Version.new(Gem::RubyGemsVersion)  Gem::Version.new("1.1")
       Merb.fatal! "Merb requires Rubygems 1.1 and later. " \
@@ -175,19 +219,32 @@ class Merb::BootLoader::DropPidFile  Merb::BootLoader
   class  self
 
     # Stores a PID file if Merb is running daemonized or clustered.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api plugin
     def run
       Merb::Server.store_pid("main") #if Merb::Config[:daemonize] || Merb::Config[:cluster]
+      nil
     end
   end
 end
 
 # Setup some useful defaults
 class Merb::BootLoader::Defaults  Merb::BootLoader
+  # Sets up the defaults
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb::Request.http_method_overrides.concat([
       proc { |c| c.params[:_method] },
       proc { |c| c.env['HTTP_X_HTTP_METHOD_OVERRIDE'] }
     ])
+    nil
   end
 end
 
@@ -231,12 +288,24 @@ class Merb::BootLoader::BuildFramework  Merb::BootLoader
   class  self
 
     # Builds the framework directory structure.
+    #
+    # ==== Returns
+    # nil
     def run
       build_framework
+      nil
     end
 
-    # This method should be overridden in init.rb before Merb.start to set up
-    # a different framework structure.
+    # Sets up merb paths to support the app's file layout. First, config/framework.rb is checked,
+    # next we look for Merb.root/framework.rb, finally we use the default merb layout (Merb::BootLoader.default_framework)
+    #
+    # This method can be overriden to support other application layouts.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api plugin
+    # @overridable
     def build_framework
       if File.exists?(Merb.root / "config" / "framework.rb")
         require Merb.root / "config" / "framework"
@@ -249,12 +318,17 @@ def build_framework
         path = Array(path)
         Merb.push_path(name, path.first, path.length == 2 ? path[1] : "**/*.rb")
       end
+      nil
     end
   end
 end
 
 class Merb::BootLoader::Dependencies  Merb::BootLoader
 
+  # ==== Returns
+  # Array[Gem::Dependency]:: The dependencies regiestered in init.rb.
+  #
+  # @api plugin
   cattr_accessor :dependencies
   self.dependencies = []
 
@@ -267,7 +341,11 @@ class Merb::BootLoader::Dependencies  Merb::BootLoader
   # before or after insertion methods. Since these are loaded from this
   # bootloader (Dependencies), they can only adapt the bootloaders that
   # haven't been loaded up until this point.
-
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     set_encoding
     # this is crucial: load init file with all the preferences
@@ -280,12 +358,24 @@ def self.run
     enable_json_gem unless Merb::disabled?(:json)
     load_dependencies
     update_logger
+    nil
   end
 
+  # Load each dependency that has been declared so far.
+  # 
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.load_dependencies
     dependencies.each { |dependency| Kernel.load_dependency(dependency) }
+    nil
   end
 
+  # Loads json or json_pure and requires it.
+  #
+  # ==== Returns
+  # nil
   def self.enable_json_gem
     gem "json"
     require "json/ext"
@@ -294,6 +384,13 @@ def self.enable_json_gem
     require "json/pure"
   end
 
+  # Resets the logger and sets the log_stream to Merb::Config[:log_file] 
+  # if one is specified, falling back to STDOUT.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.update_logger
     Merb.reset_logger!
 
@@ -306,34 +403,64 @@ def self.update_logger
     else
       Merb::Config[:log_stream] ||= STDOUT
     end
+    
+    nil
   end
 
+  # Default encoding to UTF8 if it has not already been set to something else.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.set_encoding
     $KCODE = 'UTF8' if $KCODE == 'NONE' || $KCODE.blank?
+    nil
   end
 
   private
 
     # Determines the path for the environment configuration file
+    #
+    # ==== Returns
+    # String:: The path to the config file for the environment
+    #
+    # @api private
     def self.env_config
       Merb.dir_for(:config) / "environments" / (Merb.environment + ".rb")
     end
 
     # Checks to see whether or not an environment configuration exists
+    #
+    # ==== Returns
+    # Boolean:: Whether or not the environment configuration file exists.
+    #
+    # @api private
     def self.env_config?
       Merb.environment && File.exist?(env_config)
     end
 
-    # Loads the environment configuration file, if any
+    # Loads the environment configuration file, if it is present
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def self.load_env_config
       if env_config?
         STDOUT.puts "Loading #{env_config}" unless Merb.testing?
         load(env_config)
       end
+      nil
     end
 
     # Determines the init file to use, if any.
     # By default Merb uses init.rb from application config directory.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def self.initfile
       if Merb::Config[:init_file]
         Merb::Config[:init_file].chomp(".rb") + ".rb"
@@ -343,6 +470,11 @@ def self.initfile
     end
 
     # Loads the init file, should one exist
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def self.load_initfile
       if File.exists?(initfile)
         STDOUT.puts "Loading init file from #{initfile}" unless Merb.testing?
@@ -352,6 +484,7 @@ def self.load_initfile
           "a flat application and have not specified the init file. If you " \
           "are trying to create a new merb application, use merb-gen app."
       end
+      nil
     end
 end
 
@@ -364,6 +497,11 @@ class Merb::BootLoader::MixinSession  Merb::BootLoader
   #
   # Note: access to Merb::Config is needed, so it needs to run after
   # Merb::BootLoader::Dependencies is done.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     require 'merb-core/dispatch/session'
     Merb::Controller.send(:include, ::Merb::SessionMixin)
@@ -376,8 +514,14 @@ class Merb::BootLoader::BeforeAppLoads  Merb::BootLoader
 
   # Call any before_app_loads hooks that were registered via before_app_loads
   # in any plugins.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb::BootLoader.before_load_callbacks.each { |x| x.call }
+    nil
   end
 end
 
@@ -396,6 +540,18 @@ class Merb::BootLoader::LoadClasses  Merb::BootLoader
   class  self
 
     # Load all classes from Merb's native load paths.
+    #
+    # If fork-based loading is used, every time classes are loaded this will return in a new spawner process
+    # and boot loading will continue from this point in the boot loading process.
+    #
+    # If fork-based loading is not in use, this only returns once and does not fork a new
+    # process.
+    #
+    # ==== Returns
+    # Returns at least once:
+    #   nil
+    #
+    # @api plugin
     def run
       # Add models, controllers, helpers and lib to the load path
       unless @ran
@@ -432,17 +588,37 @@ def run
       end
 
       Merb::Controller.send :include, Merb::GlobalHelpers
+      
+      nil
     end
 
-    # Wait for workers to exit, remove the "main" PID, and exit.
+    # Wait for any children to exit, remove the "main" PID, and
+    # exit.
+    #
+    # ==== Returns
+    # (Does not return.)
+    #
+    # @api private
     def exit_gracefully
       Process.waitall
       Merb::Server.remove_pid("main")
       exit
     end
 
-    # If using fork-based code reloading, set up the BEGIN
-    # point and set up any signals in the parent and worker.
+    # Set up the BEGIN point for fork-based loading and sets up 
+    # any signals in the parent and child. This is done by forking
+    # the app. The child process continues on to run the app. The parent
+    # process waits for the child process to finish and either forks again
+    # 
+    #
+    # ==== Returns
+    # Parent Process:
+    #   (Does not return.)
+    # Child Process returns at least once:
+    #   nil
+    #
+    # @api private
+
     def start_transaction
       Merb.logger.warn! "Parent pid: #{Process.pid}"
       reader, writer = nil, nil
@@ -535,7 +711,13 @@ def start_transaction
     # of 128 when a master process exists will cause the
     # spawner process to be recreated, and the app code reloaded.
     #
-    # @param statusInteger The status code to exit with
+    # ==== Parameters
+    # statusInteger:: The status code to exit with. Defaults to 0.
+    #
+    # ==== Returns
+    # (Does not return.)
+    #
+    # @api private
     def reap_workers(status = 0)
       Merb.exiting = true unless status == 128
 
@@ -559,8 +741,15 @@ def reap_workers(status = 0)
       exit(status)
     end
 
+    # Loads a file, tracking its modified time and, if necessary, the classes it declared.
+    #
     # ==== Parameters
     # fileString:: The file to load.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def load_file(file)
       # Don't do this expensive operation unless we need to
       unless Merb::Config[:fork_for_class_load]
@@ -583,12 +772,20 @@ def load_file(file)
       unless Merb::Config[:fork_for_class_load]
         LOADED_CLASSES[file] = ObjectSpace.classes - klasses
       end
+      
+      nil
     end
 
     # Load classes from given paths - using path/glob pattern.
     #
+    # ==== Parameters
     # *pathsArray::
     #   Array of paths to load classes from - may contain glob pattern
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def load_classes(*paths)
       orphaned_classes = []
       paths.flatten.each do |path|
@@ -602,9 +799,22 @@ def load_classes(*paths)
       end
       load_classes_with_requirements(orphaned_classes)
     end
-
+    
+    # Reloads the classes in the specified file. If fork-based loading is used,
+    # this causes the current processes to be killed and and all classes to be
+    # reloaded. If class-based loading is not in use, the classes declared in that file
+    # are removed and the file is reloaded.
+    #
     # ==== Parameters
     # fileString:: The file to reload.
+    #
+    # ==== Returns
+    # When fork-based loading is used:
+    #   (Does not return.)
+    # When fork-based loading is not in use:
+    #   nil
+    #
+    # @api private
     def reload(file)
       if Merb::Config[:fork_for_class_load]
         reap_workers(128)
@@ -613,9 +823,20 @@ def reload(file)
       end
     end
 
+    # Removes all classes declared in the specified file. Any hashes which use classes as keys
+    # will be protected provided they have been added to Merb.klass_hashes. These hashes have their
+    # keys substituted with placeholders before the file's classes are unloaded. If a block is provided,
+    # it is called before the substituted keys are reconstituted.
+    #
     # ==== Parameters
     # fileString:: The file to remove classes for.
-    # &block:: A block to call with the file that has been removed.
+    # &block:: A block to call with the file that has been removed before klass_hashes are updated
+    # to use the current values of the constants they used as keys.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def remove_classes_in_file(file, &block)
       Merb.klass_hashes.each { |x| x.protect_keys! }
       if klasses = LOADED_CLASSES.delete(file)
@@ -623,15 +844,26 @@ def remove_classes_in_file(file, &block)
       end
       yield file if block_given?
       Merb.klass_hashes.each {|x| x.unprotect_keys!}
+      nil
     end
 
+    # Removes the specified class. 
+    #
+    # Additionally, removes the specified class from the subclass list of every superclass that
+    # tracks it's subclasses in an array returned by _subclasses_list. Classes that wish to use this
+    # functionality are required to alias the reader for their list of subclasses
+    # to _subclasses_list. Plugins for ORMs and other libraries should keep this in mind.
+    #
     # ==== Parameters
     # constClass:: The class to remove.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def remove_constant(const)
       # This is to support superclasses (like AbstractController) that track
-      # their subclasses in a class variable. Classes that wish to use this
-      # functionality are required to alias it to _subclasses_list. Plugins
-      # for ORMs and other libraries should keep this in mind.
+      # their subclasses in a class variable.
       superklass = const
       until (superklass = superklass.superclass).nil?
         if superklass.respond_to?(:_subclasses_list)
@@ -649,16 +881,22 @@ def remove_constant(const)
       rescue NameError
         Merb.logger.debug("Failed to remove constant #{object} from #{base}")
       end
+      nil
     end
 
     private
 
-    # "Better loading" of classes.  If a class fails to load due to a NameError
+    # "Better loading" of classes.  If a file fails to load due to a NameError
     # it will be added to the failed_classes and load cycle will be repeated unless
     # no classes load.
     #
     # ==== Parameters
     # klassesArray[Class]:: Classes to load.
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api private
     def load_classes_with_requirements(klasses)
       klasses.uniq!
 
@@ -696,26 +934,35 @@ def load_classes_with_requirements(klasses)
         end
         break if(klasses.size == size_at_start || klasses.size == 0)
       end
+      
+      nil
     end
 
   end
 
 end
 
+# Loads the router file. This needs to happen after everything else is loaded while merb is starting up to ensure
+# the router has everything it needs to run.
 class Merb::BootLoader::Router  Merb::BootLoader
   class  self
-
+    
+    # load the router file
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api plugin
     def run
       Merb::BootLoader::LoadClasses.load_file(router_file) if router_file
+      
+      nil
     end
 
-    def reload!
-      if router_file
-        Merb::Router.reset!
-        Merb::BootLoader::LoadClasses.reload(router_file)
-      end
-    end
-
+    # Tries to find the router file.
+    #
+    # ==== Returns
+    # String:: The path to the router file if it exists, nil otherwise.
     def router_file
       @router_file ||= begin
         if File.file?(router = Merb.dir_for(:router) / Merb.glob_for(:router))
@@ -727,18 +974,28 @@ def router_file
   end
 end
 
+# Precompiles all non-partial templates.
 class Merb::BootLoader::Templates  Merb::BootLoader
   class  self
 
-    # Loads the templates into the Merb::InlineTemplates module.
+    # Loads all non-partial templates into the Merb::InlineTemplates module.
+    #
+    # ==== Returns
+    # Array[String]:: The list of template files which were loaded.
+    #
+    # @api plugin
     def run
       template_paths.each do |path|
         Merb::Template.inline_template(File.open(path))
       end
     end
 
+    # Finds a list of templates to load.
+    #
     # ==== Returns
-    # Array[String]:: Template files found.
+    # Array[String]:: All found template files whose basename does not begin with "_".
+    #
+    # @api private
     def template_paths
       extension_glob = "{#{Merb::Template.template_extensions.join(',')}}"
 
@@ -777,6 +1034,11 @@ def template_paths
 class Merb::BootLoader::MimeTypes  Merb::BootLoader
 
   # Registers the default MIME types.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb.add_mime_type(:all,  nil,      %w[*/*])
     Merb.add_mime_type(:yaml, :to_yaml, %w[application/x-yaml text/yaml], :charset = "utf-8")
@@ -785,15 +1047,24 @@ def self.run
     Merb.add_mime_type(:xml,  :to_xml,  %w[application/xml text/xml application/x-xml], {:charset = "utf-8"}, 0.9998)
     Merb.add_mime_type(:js,   :to_json, %w[text/javascript application/javascript application/x-javascript], :charset = "utf-8")
     Merb.add_mime_type(:json, :to_json, %w[application/json text/x-json], :charset = "utf-8")
+    nil
   end
 end
 
+# Set up cookies support in Merb::Controller and Merb::Request
 class Merb::BootLoader::Cookies  Merb::BootLoader
 
+  # Set up cookies support in Merb::Controller and Merb::Request
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     require 'merb-core/dispatch/cookies'
     Merb::Controller.send(:include, Merb::CookiesMixin)
     Merb::Request.send(:include, Merb::CookiesMixin::RequestMixin)
+    nil
   end
 
 end
@@ -802,6 +1073,11 @@ class Merb::BootLoader::SetupSession  Merb::BootLoader
 
   # Enable the configured session container(s); any class that inherits from
   # SessionContainer will be considered by its session_store_type attribute.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     # Require all standard session containers.
     Dir[Merb.framework_root / "merb-core" / "dispatch" / "session" / "*.rb"].each do |file|
@@ -826,6 +1102,7 @@ def self.run
 
     # Mixin the Merb::Session module to add app-level functionality to sessions
     Merb::SessionContainer.send(:include, Merb::Session)
+    nil
   end
 
 end
@@ -834,14 +1111,26 @@ class Merb::BootLoader::AfterAppLoads  Merb::BootLoader
 
   # Call any after_app_loads hooks that were registered via after_app_loads in
   # init.rb.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb::BootLoader.after_load_callbacks.each {|x| x.call }
+    nil
   end
 end
 
 # In case someone's running a sparse app, the default exceptions require the
 # Exceptions class.
 class Merb::BootLoader::SetupStubClasses  Merb::BootLoader
+  # Declares empty Application and Exception controllers.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     unless defined?(Exceptions)
       Object.class_eval -RUBY
@@ -853,23 +1142,47 @@ class Exceptions  Application
         end
       RUBY
     end
+    nil
   end
 end
 
 class Merb::BootLoader::ChooseAdapter  Merb::BootLoader
 
   # Choose the Rack adapter/server to use and set Merb.adapter.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     Merb.adapter = Merb::Rack::Adapter.get(Merb::Config[:adapter])
   end
 end
 
+class Merb::BootLoader::StartWorkerThread  Merb::BootLoader
+
+  # Starts the worker thread used by the run_later helper.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
+  def self.run
+    Merb::Worker.start
+  end
+end
+
 class Merb::BootLoader::RackUpApplication  Merb::BootLoader
   # Setup the Merb Rack App or read a rackup file located at
   # Merb::Config[:rackup] with the same syntax as the
   # rackup tool that comes with rack. Automatically evals the file in
   # the context of a Rack::Builder.new { } block. Allows for mounting
   # additional apps or middleware.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     require 'rack'
     if File.exists?(Merb.dir_for(:config) / "rack.rb")
@@ -888,13 +1201,24 @@ def self.run
          run Merb::Rack::Application.new
        }.to_app
     end
-
+    
+    nil
   end
 end
 
 class Merb::BootLoader::ReloadClasses  Merb::BootLoader
 
   class TimedExecutor
+    # Executes the associated block every @seconds@ seconds in a separate thread.
+    #
+    # ==== Parameters
+    # secondsInteger:: Number of seconds to sleep in between runs of &block.
+    # &block:: The block to execute periodically.
+    #
+    # ==== Returns
+    # Thread:: The thread executing the block periodically.
+    #
+    # @api private
     def self.every(seconds, &block)
       Thread.abort_on_exception = true
       Thread.new do
@@ -907,7 +1231,14 @@ def self.every(seconds, &block)
     end
   end
 
-  # Setup the class reloader if it's been specified in config.
+  # Set up the class reloader if class reloading is enabled. This checks periodically 
+  # for modifications to files loaded by the LoadClasses BootLoader and reloads them
+  # when they are modified.
+  # 
+  # ==== Returns
+  # nil
+  #
+  # @api plugin
   def self.run
     return unless Merb::Config[:reload_classes]
 
@@ -928,10 +1259,16 @@ def self.run
       GC.start
       reload(paths)
     end
-
+    
+    nil
   end
 
-  # Reloads all files.
+  # Reloads all files which have been modified since they were last loaded.
+  #
+  # ==== Returns
+  # nil
+  #
+  # @api private
   def self.reload(paths)
     paths.each do |file|
       next if LoadClasses::MTIMES[file] &&
@@ -939,5 +1276,7 @@ def self.reload(paths)
 
       LoadClasses.reload(file)
     end
+    
+    nil
   end
 end</field>
	<field name="commit_file_name">config.rb</field>
	<field name="commit_diff">@@ -6,8 +6,12 @@ class Config
 
     class  self
 
+      # Returns the hash of default config values for Merb.
+      #
       # ==== Returns
       # Hash:: The defaults for the config.
+      #
+      # @api private
       def defaults
         @defaults ||= {
           :host                   = "0.0.0.0",
@@ -39,29 +43,45 @@ def defaults
       #     config[:exception_details] = false
       #     config[:log_stream]        = STDOUT
       #   end
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api public
       def use
         @configuration ||= {}
         yield @configuration
+        nil
       end
-
+      
+      # Detects whether the provided key is in the config.
+      #
       # ==== Parameters
       # keyObject:: The key to check.
       #
       # ==== Returns
       # Boolean:: True if the key exists in the config.
+      #
+      # @api public
       def key?(key)
         @configuration.key?(key)
       end
 
+      # Retrieve the value of a config entry.
+      #
       # ==== Parameters
       # keyObject:: The key to retrieve the parameter for.
       #
       # ==== Returns
       # Object:: The value of the configuration parameter.
+      #
+      # @api public
       def [](key)
         (@configuration ||= setup)[key]
       end
 
+      # Set the value of a config entry.
+      #
       # ==== Parameters
       # keyObject:: The key to set the parameter for.
       # valObject:: The value of the parameter.
@@ -69,12 +89,21 @@ def []=(key, val)
         (@configuration ||= setup)[key] = val
       end
 
+      # Remove the value of a config entry.
+      #
       # ==== Parameters
       # keyObject:: The key of the parameter to delete.
+      #
+      # ==== Returns
+      # Object:: The value of the removed entry.
+      #
+      # @api public
       def delete(key)
         @configuration.delete(key)
       end
 
+      # Retrieve the value of a config entry, returning the provided default if the key is not present
+      #
       # ==== Parameters
       # keyObject:: The key to retrieve the parameter for.
       # defaultObject::
@@ -86,14 +115,22 @@ def fetch(key, default)
         @configuration.fetch(key, default)
       end
 
+      # Returns the configuration as a hash.
+      #
       # ==== Returns
       # Hash:: The config as a hash.
+      #
+      # @api public
       def to_hash
         @configuration
       end
 
+      # Returns the config as YAML.
+      #
       # ==== Returns
       # String:: The config as YAML.
+      #
+      # @api public
       def to_yaml
         require "yaml"
         @configuration.to_yaml
@@ -104,6 +141,11 @@ def to_yaml
       # ==== Parameters
       # settingsHash::
       #   Configuration settings to use. These are merged with the defaults.
+      #
+      # ==== Returns
+      # The configuration as a hash.
+      #
+      # @api private
       def setup(settings = {})
         @configuration = defaults.merge(settings)
         
@@ -118,6 +160,11 @@ def setup(settings = {})
       #
       # ==== Parameters
       # argvString:: The command line arguments. Defaults to +ARGV+.
+      #
+      # ==== Returns
+      # The configuration as a hash.
+      #
+      # @api private
       def parse_args(argv = ARGV)
         @configuration ||= {}
         # Our primary configuration hash for the length of this method
@@ -352,8 +399,14 @@ def parse_args(argv = ARGV)
       #     log_level   "debug"
       #     log_file    Merb.root / "log" / "special.log"
       #   end
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api public
       def configure(&block)
         ConfigBlock.new(self, &block) if block_given?
+        nil
       end
 
       # Allows retrieval of single key config values via Merb.config.key
@@ -362,6 +415,11 @@ def configure(&block)
       # ==== Parameters
       # method~to_s:: Method name as hash key value.
       # *args:: Value to set the configuration parameter to.
+      #
+      # ==== Returns
+      # The value of the entry fetched or assigned to.
+      #
+      # @api public
       def method_missing(method, *args)
         if method.to_s[-1,1] == '='
           @configuration[method.to_s.tr('=','').to_sym] = *args
@@ -374,11 +432,26 @@ def method_missing(method, *args)
 
     class ConfigBlock
 
+      # Evaluates the provided block, where any call to a method causes
+      # #[]= to be called on klass with the method name as the key and the arguments
+      # as the value.
+      #
+      # ==== Parameters
+      # klassObject~[]=:: The object on which to assign values.
+      # &block:: The block which specifies the config values to set.
+      #
+      # ==== Returns
+      # nil
+      #
+      # @api private
       def initialize(klass, &block)
         @klass = klass
         instance_eval(&block)
       end
 
+      # Assign args as the value of the entry keyed by method.
+      #
+      # @api private
       def method_missing(method, *args)
         @klass[method] = *args
       end</field>
	<field name="commit_file_name">abstract_controller.rb</field>
	<field name="commit_diff">@@ -124,12 +124,13 @@ class Merb::AbstractController
 
   # ==== Returns
   # String:: The controller name in path form, e.g. "admin/items".
-  #---
-  # @public
+  # @api public
   def self.controller_name() @controller_name ||= self.name.to_const_path end
 
   # ==== Returns
   # String:: The controller name in path form, e.g. "admin/items".
+  #
+  # @api public
   def controller_name()      self.class.controller_name                   end
   
   # This is called after the controller is instantiated to figure out where to
@@ -138,9 +139,9 @@ def controller_name()      self.class.controller_name                   end
   #
   # ==== Parameters
   # context~to_s:: The controller context (the action or template name).
-  # type~to_s:: The content type. Defaults to nil.
+  # type~to_s:: The content type. Could be nil. 
   # controller~to_s::
-  #   The name of the controller. Defaults to controller_name.
+  #   The name of the controller. Defaults to being called with the controller_name.  Set t
   #
   #
   # ==== Returns
@@ -160,29 +161,41 @@ def controller_name()      self.class.controller_name                   end
   #
   # This would look for templates at controller.action.mime.type instead
   # of controller/action.mime.type
-  #---
-  # @public
+  #
+  # @api public
+  # @overridable
   def _template_location(context, type, controller)
     controller ? "#{controller}/#{context}" : context
   end
 
-  # The location to look for a template - stub method for particular behaviour.
+  # The location to look for a template - override this method for particular behaviour. 
   #
   # ==== Parameters
   # templateString:: The absolute path to a template - without template extension.
   # type~to_s::
-  #    The mime-type of the template that will be rendered. Defaults to nil.
+  #    The mime-type of the template that will be rendered. Defaults to being called with nil.
   #
-  # @public
+  # @api public
+  # @overridable
   def _absolute_template_location(template, type)
     template
   end
 
+  # Resets the template roots to the template root passed in.
+  #
+  # ==== Parameters
+  # root~to_s:: 
+  #   The new path to set the template root to.  
+  #
+  # @api public
   def self._template_root=(root)
     @_template_root = root
     _reset_template_roots
   end
 
+  # Reset the template root based on the @_template_root ivar.
+  #
+  # @api private
   def self._reset_template_roots
     self.template_roots = [[self._template_root, :_template_location]]
   end
@@ -191,6 +204,8 @@ def self._reset_template_roots
   # rootsArray[Array]::
   #   Template roots as pairs of template root path and template location
   #   method.
+  #
+  # @api unknown
   def self._template_roots
     self.template_roots || _reset_template_roots
   end
@@ -199,45 +214,62 @@ def self._template_roots
   # rootsArray[Array]::
   #   Template roots as pairs of template root path and template location
   #   method.
+  #
+  # @api unknown
   def self._template_roots=(roots)
     self.template_roots = roots
   end
   
+  # Returns the list of classes that have specifically subclassed AbstractController.  
+  # Does not include all decendents.  
+  #
   # ==== Returns
   # Set:: The subclasses.
+  #
+  # @api private
   def self.subclasses_list() _abstract_subclasses end
   
-  class  self
-    # ==== Parameters
-    # klassMerb::AbstractController::
-    #   The controller that is being inherited from Merb::AbstractController
-    def inherited(klass)
-      _abstract_subclasses  klass.to_s
-      helper_module_name = klass.to_s =~ /^(#|Merb::)/ ? "#{klass}Helper" : "Merb::#{klass}Helper"
-      Object.make_module helper_module_name
-      klass.class_eval -HERE
-        include Object.full_const_get("#{helper_module_name}") rescue nil
-      HERE
-      super
-    end    
-  end
+  # ==== Parameters
+  # klassMerb::AbstractController::
+  #   The controller that is being inherited from Merb::AbstractController
+  #
+  # @api private
+  def self.inherited(klass)
+    _abstract_subclasses  klass.to_s
+    helper_module_name = klass.to_s =~ /^(#|Merb::)/ ? "#{klass}Helper" : "Merb::#{klass}Helper"
+    Object.make_module helper_module_name
+    klass.class_eval -HERE
+      include Object.full_const_get("#{helper_module_name}") rescue nil
+    HERE
+    super
+  end    
   
+  # This will initialize the controller, it is designed to be overridden in subclasses (like MerbController)
   # ==== Parameters
-  # *args:: The args are ignored.
+  # *args:: The args are ignored in this class, but we need this so that subclassed initializes can have parameters
+  #
+  # @overridable
   def initialize(*args)
     @_benchmarks = {}
     @_caught_content = {}
   end
   
-  # This will dispatch the request, calling internal before/after dispatch_callbacks
+  # This will dispatch the request, calling internal before/after dispatch callbacks.  
+  # If the return value of _call_filters is not :filter_chain_completed the action is not called, and the return from the filters is used instead. 
   # 
   # ==== Parameters
   # action~to_s::
   #   The action to dispatch to. This will be #send'ed in _call_action.
   #   Defaults to :to_s.
   #
+  # ==== Returns
+  # ~to_s::
+  #   Returns the string that was returned from the action. 
+  #
   # ==== Raises
-  # MerbControllerError:: Invalid body content caught.
+  # ArgumentError:: Invalid result caught from before filters.
+  #
+  # @api plugin
   def _dispatch(action)
     self._before_dispatch_callbacks.each { |cb| cb.call(self) }
     self.action_name = action
@@ -252,7 +284,8 @@ def _dispatch(action)
     @body = case caught
     when :filter_chain_completed  then _call_action(action_name)
     when String                   then caught
-    when nil                      then _filters_halted
+    # return *something* if you throw halt with nothing
+    when nil                      then "htmlbodyh1Filter Chain Halted!/h1/body/html"
     when Symbol                   then __send__(caught)
     when Proc                     then self.instance_eval(&caught)
     else
@@ -267,14 +300,19 @@ def _dispatch(action)
     @body
   end
   
-  # This method exists to provide an overridable hook for ActionArgs
+  # This method exists to provide an overridable hook for ActionArgs.  It uses #send to call the action method.
   #
   # ==== Parameters
   # action~to_s:: the action method to dispatch to
+  #
+  # @api plugin
+  # @overridable
   def _call_action(action)
     send(action)
   end
   
+  # Calls a filter chain. 
+  #
   # ==== Parameters
   # filter_setArray[Filter]::
   #   A set of filters in the form [[:filter, rule], [:filter, rule]]
@@ -290,6 +328,8 @@ def _call_action(action)
   # Procs::
   #   Execute the +Proc+, in the context of the controller (self will be the
   #   controller)
+  #
+  # @api private
   def _call_filters(filter_set)
     (filter_set || []).each do |filter, rule|
       if _call_filter_for_action?(rule, action_name) && _filter_condition_met?(rule)
@@ -308,6 +348,8 @@ def _call_filters(filter_set)
     return :filter_chain_completed
   end
 
+  # Determine whether the filter should be called for the current action using :only and :exclude.
+  #
   # ==== Parameters
   # ruleHash:: Rules for the filter (see below).
   # action_name~to_s:: The name of the action to be called.
@@ -322,6 +364,8 @@ def _call_filters(filter_set)
   #
   # ==== Returns
   # Boolean:: True if the action should be called.
+  #
+  # @api private
   def _call_filter_for_action?(rule, action_name)
     # Both:
     # * no :only or the current action is in the :only list
@@ -330,6 +374,8 @@ def _call_filter_for_action?(rule, action_name)
     (!rule.key?(:exclude) || !rule[:exclude].include?(action_name))
   end
 
+  # Determines whether the filter should be run based on the conditions passed (:if and :unless)
+  #
   # ==== Parameters
   # ruleHash:: Rules for the filter (see below).
   #
@@ -340,6 +386,8 @@ def _call_filter_for_action?(rule, action_name)
   #
   # ==== Returns
   # Boolean:: True if the conditions are met.
+  #
+  # @api private
   def _filter_condition_met?(rule)
     # Both:
     # * no :if or the if condition evaluates to true
@@ -348,6 +396,8 @@ def _filter_condition_met?(rule)
     (!rule.key?(:unless) || ! _evaluate_condition(rule[:unless]))
   end
 
+  # Evaluates a filter condition (:if or :unless)
+  #
   # ==== Parameters
   # conditionSymbol, Proc:: The condition to evaluate.
   #
@@ -360,6 +410,8 @@ def _filter_condition_met?(rule)
   # ==== Alternatives
   # If condition is a symbol, it will be send'ed. If it is a Proc it will be
   # called directly with self as an argument.
+  #
+  # @api private
   def _evaluate_condition(condition)
     case condition
     when Symbol : self.send(condition)
@@ -370,6 +422,7 @@ def _evaluate_condition(condition)
     end
   end
 
+  # Adds a filter to the after filter chain
   # ==== Parameters
   # filterSymbol, Proc:: The filter to add. Defaults to nil.
   # optsHash::
@@ -377,11 +430,15 @@ def _evaluate_condition(condition)
   # &block:: A block to use as a filter if filter is nil.
   #
   # ==== Notes
-  # If the filter already exists, its options will be replaced with opts.
+  # If the filter already exists, its options will be replaced with opts.;
+  #
+  # @api public
   def self.after(filter = nil, opts = {}, &block)
     add_filter(self._after_filters, filter || block, opts)
   end
 
+  # Adds a filter to the before filter chain.  
+  #
   # ==== Parameters
   # filterSymbol, Proc:: The filter to add. Defaults to nil.
   # optsHash::
@@ -390,44 +447,90 @@ def self.after(filter = nil, opts = {}, &block)
   #
   # ==== Notes
   # If the filter already exists, its options will be replaced with opts.
+  #
+  # @api public
   def self.before(filter = nil, opts = {}, &block)
     add_filter(self._before_filters, filter || block, opts)
   end
      
-  # Skip an after filter that has been previously defined (perhaps in a
-  # superclass)
+  # Removes a filter from the after filter chain.  This removes the 
+  # filter from the filter chain for the whole controller and does not 
+  # take any options. 
   #
   # ==== Parameters
-  # filterSymbol:: A filter name to skip.
+  # filterSymbol, String:: A filter name to skip.
+  #
+  # @api public
   def self.skip_after(filter)
     skip_filter(self._after_filters, filter)
   end
   
-  # Skip a before filter that has been previously defined (perhaps in a
-  # superclass).
+  # Removes a filter from the before filter chain.  This removes the 
+  # filter from the filter chain for the whole controller and does not 
+  # take any options.
   #
   # ==== Parameters
-  # filterSymbol:: A filter name to skip.
+  # filterSymbol, String:: A filter name to skip.
+  #
+  # @api public
   def self.skip_before(filter)
     skip_filter(self._before_filters , filter)
   end  
-  
-  #---
-  # Defaults that can be overridden by plugins, other mixins, or subclasses
-  def _filters_halted()   "htmlbodyh1Filter Chain Halted!/h1/body/html"  end
-  
-  # ==== Parameters
-  # name~to_sym, Hash:: The name of the URL to generate.
-  # rparamsHash:: Parameters for the route generation.
+
+  # There are three possible ways to use this method.  First, if you have a named route, 
+  # you can specify the route as the first parameter as a symbol and any paramters in a 
+  # hash.  Second, you can generate the default route by just passing the params hash, 
+  # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+  # allows you to specify the parameters to a named route in the order they appear in the 
+  # router.  
+  #
+  # ==== Parameters(Named Route)
+  # nameSymbol:: 
+  #   The name of the route. 
+  # argsHash:: 
+  #   Parameters for the route generation.
+  #
+  # ==== Parameters(Default Route)
+  # argsHash:: 
+  #   Parameters for the route generation.  This route will use the default route. 
+  #
+  # ==== Parameters(Anonymous Parameters)
+  # nameSymbol::
+  #   The name of the route.  
+  # argsArray:: 
+  #   An array of anonymous parameters to generate the route
+  #   with. These parameters are assigned to the route parameters
+  #   in the order that they are passed.
   #
   # ==== Returns
   # String:: The generated URL.
   #
-  # ==== Alternatives
-  # If a hash is used as the first argument, a default route will be
-  # generated based on it and rparams.
-  # ====
-  # TODO: Update this documentation
+  # ==== Examples
+  # Named Route
+  #
+  # Merb::Router.prepare do
+  #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+  # end
+  #
+  # url(:articles, :title = "new_article")
+  #
+  # Default Route
+  #
+  # Merb::Router.prepare do
+  #   default_routes
+  # end
+  #
+  # url(:controller = "articles", :action = "new")
+  #
+  # Anonymous Paramters
+  #
+  # Merb::Router.prepare do
+  #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+  # end
+  #
+  # url(:articles, 2008, 10, "test_article")
+  #
+  # @api public
   def url(name, *args)
     args  {}
     Merb::Router.url(name, *args)
@@ -435,22 +538,12 @@ def url(name, *args)
   
   alias_method :relative_url, :url
 
-  # ==== Parameters
-  # name~to_sym, Hash:: The name of the URL to generate.
-  # rparamsHash:: Parameters for the route generation.
-  #
-  # ==== Returns
-  # String:: The generated url with protocol + hostname + URL.
-  #
-  # ==== Options
-  #
-  # :protocol and :host options are special: use them to explicitly
-  # specify protocol and host of resulting url. If you omit them,
-  # protocol and host of request are used.
+  # Returns the absolute url including the passed protocol and host.  
+  # 
+  # This uses the same arguments as the url method, with added requirements 
+  # of protocol and host options. 
   #
-  # ==== Alternatives
-  # If a hash is used as the first argument, a default route will be
-  # generated based on it and rparams.
+  # @api public
   def absolute_url(name, *args)
     # FIXME: arrgh, why request.protocol returns http://?
     # :// is not part of protocol name
@@ -494,8 +587,9 @@ def absolute_url(name, *args)
   # resource(:users, :new)      # = /users/new
   # resource(:@user, :edit)     # = /users/10/edit
   #
+  # @api public
   def resource(*args)
-    args  params
+    args  {}
     Merb::Router.resource(*args)
   end
 
@@ -507,6 +601,8 @@ def resource(*args)
   #
   # ==== Returns
   # String:: The output of a template block or the return value of a non-template block converted to a string.
+  #
+  # @api public
   def capture(*args, &block)
     ret = nil
 
@@ -523,13 +619,16 @@ def capture(*args, &block)
   # ==== Parameters
   # strString:: The string to concatenate to the buffer.
   # bindingBinding:: The binding to use for the buffer.
+  #
+  # @api public
   def concat(str, binding)
     send("concat_#{@_engine}", str, binding)
   end
 
   private
+  # adds a filter to the specified filter chain
   # ==== Parameters
-  # filtersArray[Filter]:: The filter list that this should be added to.
+  # filtersArray[Filter]:: The filter chain that this should be added to.
   # filterFilter:: A filter that should be added.
   # optsHash::
   #   Filter options (see class documentation under ttFilter Options/tt).
@@ -538,6 +637,8 @@ def concat(str, binding)
   # ArgumentError::
   #   Both :only and :exclude, or :if and :unless given, if filter is not a
   #   Symbol, String or Proc, or if an unknown option is passed.
+  #
+  # @api private
   def self.add_filter(filters, filter, opts={})
     raise(ArgumentError,
       "You can specify either :only or :exclude but 
@@ -576,11 +677,13 @@ def self.add_filter(filters, filter, opts={})
   # inheritence hierarchies.
   #
   # ==== Parameters
-  # filtersArray[Filter]:: The filter list that this should be removed from.
+  # filtersArray[Filter]:: The filter chain that this should be removed from.
   # filterFilter:: A filter that should be removed.
   #
   # ==== Raises
   # ArgumentError:: filter not Symbol or String.
+  #
+  # @api private
   def self.skip_filter(filters, filter)
     raise(ArgumentError, 'You can only skip filters that have a String or Symbol name.') unless
       [Symbol, String].include? filter.class
@@ -600,6 +703,8 @@ def self.skip_filter(filters, filter)
   #
   # ==== Examples
   #   normalize_filters!(:only = :new) #= {:only = [:new]}
+  #
+  # @api public
   def self.normalize_filters!(opts={})
     opts[:only]     = Array(opts[:only]).map {|x| x.to_s} if opts[:only]
     opts[:exclude]  = Array(opts[:exclude]).map {|x| x.to_s} if opts[:exclude]</field>
	<field name="commit_file_name">exceptions.rb</field>
	<field name="commit_diff">@@ -1,12 +1,35 @@
 class Exception
+  # Returns the action_name that will be invoked on your Exceptions controller when this
+  # exception is raised. Override this method to force a different action to be invoked.
+  #
+  # ==== Returns
+  # String:: The name of the action in the Exceptions controller which will get invoked
+  #   when this exception is raised during a request.
+  # 
+  # @api public
+  # @overridable
   def action_name() self.class.action_name end
   
+  
+  # ==== Returns
+  # Boolean:: Whether or not this exception is the same as another.
+  #
+  # @api public
   def same?(other)
     self.class == other.class &&
     self.message == other.message &&
     self.backtrace == other.backtrace
   end
   
+  # Returns the action_name that will be invoked on your Exceptions controller when an instance
+  # is raised during a request.
+  #
+  # ==== Returns
+  # String:: The name of the action in the Exceptions controller which will get invoked
+  #   when an instance of this Exception sub/class is raised by an action.
+  # 
+  # @api public
+  # @overridable
   def self.action_name
     if self == Exception
       return nil unless Object.const_defined?(:Exceptions) && 
@@ -17,6 +40,14 @@ def self.action_name
       Exceptions.method_defined?(name) ? name : superclass.action_name
   end
   
+  # The status that will be sent in the response when an instance is
+  # raised during a request. Override this to send a different status.
+  #
+  # ==== Returns
+  # Integer:: The status code to send in the response. Defaults to 500.
+  #
+  # @api public
+  # @overridable
   def self.status
     500
   end
@@ -135,6 +166,8 @@ class  self
         #
         # ==== Returns
         # Fixnum:: The status code of this exception.
+        #
+        # @api public
         def status
           const_get(:STATUS) rescue 0
         end
@@ -147,6 +180,11 @@ def status
         #
         # ==== Parameters
         # num~to_i:: The status code
+        #
+        # ==== Returns
+        # (Integer, nil):: The status set on this exception, or nil if a status was already set.
+        #
+        # @api private
         def status=(num)
           unless self.status?
             register_status_code(self, num)
@@ -157,7 +195,9 @@ def status=(num)
         # See if a status-code has been defined (on self explicitly).
         #
         # ==== Returns
-        # Boolean:: Whether the a status code has been set
+        # Boolean:: Whether a status code has been set
+        #
+        # @api private
         def status?
           self.const_defined?(:STATUS)
         end
@@ -172,6 +212,8 @@ def status?
         # 
         # subclassMerb::ControllerExceptions::Base::
         #   The Exception class that is inheriting from Merb::ControllerExceptions::Base
+        #
+        # @api public
         def inherited(subclass)
           # don't set the constant yet - any class methods will be called after self.inherited
           # unless self.status = ... is set explicitly, the status code will be inherited
@@ -184,6 +226,8 @@ def inherited(subclass)
         #
         # ==== Parameters
         # num~to_i:: The status code
+        #
+        # @api privaate
         def register_status_code(klass, code)
           name = self.to_s.split('::').last.snake_case
           STATUS_CODES[name.to_sym] = code.to_i</field>
	<field name="commit_file_name">merb_controller.rb</field>
	<field name="commit_diff">@@ -15,104 +15,106 @@ def self.subclasses_list() _subclasses end
   include Merb::AuthenticationMixin
   include Merb::ConditionalGetMixin
 
-  class  self
-
-    # ==== Parameters
-    # klassMerb::Controller::
-    #   The Merb::Controller inheriting from the base class.
-    def inherited(klass)
-      _subclasses  klass.to_s
-      super
-      klass._template_root = Merb.dir_for(:view) unless self._template_root
-    end
+  # ==== Parameters
+  # klassMerb::Controller::
+  #   The Merb::Controller inheriting from the base class.
+  #
+  # @api private
+  def self.inherited(klass)
+    _subclasses  klass.to_s
+    super
+    klass._template_root = Merb.dir_for(:view) unless self._template_root
+  end
 
-    # Hide each of the given methods from being callable as actions.
-    #
-    # ==== Parameters
-    # *names~to-s:: Actions that should be added to the list.
-    #
-    # ==== Returns
-    # Array[String]::
-    #   An array of actions that should not be possible to dispatch to.
-    #
-    #---
-    # @public
-    def hide_action(*names)
-      self._hidden_actions = self._hidden_actions | names.map { |n| n.to_s }
-    end
+  # Hide each of the given methods from being callable as actions.
+  #
+  # ==== Parameters
+  # *names~to-s:: Actions that should be added to the list.
+  #
+  # ==== Returns
+  # Array[String]::
+  #   An array of actions that should not be possible to dispatch to.
+  #
+  # @api public
+  def self.hide_action(*names)
+    self._hidden_actions = self._hidden_actions | names.map { |n| n.to_s }
+  end
 
-    # Makes each of the given methods being callable as actions. You can use
-    # this to make methods included from modules callable as actions.
-    #
-    # ==== Parameters
-    # *names~to-s:: Actions that should be added to the list.
-    #
-    # ==== Returns
-    # Array[String]::
-    #   An array of actions that should be dispatched to even if they would not
-    #   otherwise be.
-    #
-    # ==== Example
-    #   module Foo
-    #     def self.included(base)
-    #       base.show_action(:foo)
-    #     end
-    #
-    #     def foo
-    #       # some actiony stuff
-    #     end
-    #
-    #     def foo_helper
-    #       # this should not be an action
-    #     end
-    #   end
-    #
-    #---
-    # @public
-    def show_action(*names)
-      self._shown_actions = self._shown_actions | names.map {|n| n.to_s}
-    end
+  # Makes each of the given methods being callable as actions. You can use
+  # this to make methods included from modules callable as actions.
+  #
+  # ==== Parameters
+  # *names~to-s:: Actions that should be added to the list.
+  #
+  # ==== Returns
+  # Array[String]::
+  #   An array of actions that should be dispatched to even if they would not
+  #   otherwise be.
+  #
+  # ==== Example
+  #   module Foo
+  #     def self.included(base)
+  #       base.show_action(:foo)
+  #     end
+  #
+  #     def foo
+  #       # some actiony stuff
+  #     end
+  #
+  #     def foo_helper
+  #       # this should not be an action
+  #     end
+  #   end
+  #
+  # @api public
+  def self.show_action(*names)
+    self._shown_actions = self._shown_actions | names.map {|n| n.to_s}
+  end
 
-    # The list of actions that are callable, after taking defaults,
-    # _hidden_actions and _shown_actions into consideration. It is calculated
-    # once, the first time an action is dispatched for this controller.
-    #
-    # ==== Returns
-    # SimpleSet[String]:: A set of actions that should be callable.
-    def callable_actions
-      @callable_actions ||= Extlib::SimpleSet.new(_callable_methods)
-    end
+  # The list of actions that are callable, after taking defaults,
+  # _hidden_actions and _shown_actions into consideration. It is calculated
+  # once, the first time an action is dispatched for this controller.
+  #
+  # ==== Returns
+  # SimpleSet[String]:: A set of actions that should be callable.
+  #
+  # @api public
+  def self.callable_actions
+    @callable_actions ||= Extlib::SimpleSet.new(_callable_methods)
+  end
 
-    # This is a stub method so plugins can implement param filtering if they want.
-    #
-    # ==== Parameters
-    # paramsHash{Symbol = String}:: A list of params
-    #
-    # ==== Returns
-    # Hash{Symbol = String}:: A new list of params, filtered as desired
-    #---
-    # @semipublic
-    def _filter_params(params)
-      params
-    end
+  # This is a stub method so plugins can implement param filtering if they want.
+  #
+  # ==== Parameters
+  # paramsHash{Symbol = String}:: A list of params
+  #
+  # ==== Returns
+  # Hash{Symbol = String}:: A new list of params, filtered as desired
+  # 
+  # @api plugin
+  # @overridable
+  def self._filter_params(params)
+    params
+  end
 
-    private
+  private
 
-    # All methods that are callable as actions.
-    #
-    # ==== Returns
-    # Array:: A list of method names that are also actions
-    def _callable_methods
-      callables = []
-      klass = self
-      begin
-        callables  (klass.public_instance_methods(false) + klass._shown_actions) - klass._hidden_actions
-        klass = klass.superclass
-      end until klass == Merb::AbstractController || klass == Object
-      callables.flatten.reject{|action| action =~ /^_.*/}
-    end
+  # All methods that are callable as actions.
+  #
+  # ==== Returns
+  # Array:: A list of method names that are also actions
+  #
+  # @api private
+  def self._callable_methods
+    callables = []
+    klass = self
+    begin
+      callables  (klass.public_instance_methods(false) + klass._shown_actions) - klass._hidden_actions
+      klass = klass.superclass
+    end until klass == Merb::AbstractController || klass == Object
+    callables.flatten.reject{|action| action =~ /^_.*/}
+  end
 
-  end # class  self
 
   # The location to look for a template for a particular controller, context,
   # and mime-type. This is overridden from AbstractController, which defines a
@@ -124,14 +126,14 @@ def _callable_methods
   #    The mime-type of the template that will be rendered. Defaults to nil.
   # controller~to_s::
   #   The name of the controller that will be rendered. Defaults to
-  #   controller_name.
+  #   controller_name.  This will be "layout" for rendering a layout.  
   #
   # ==== Notes
   # By default, this renders ":controller/:action.:type". To change this,
   # override it in your application class or in individual controllers.
   #
-  #---
-  # @public
+  # @api public
+  # @overridable
   def _template_location(context, type, controller)
     _conditionally_append_extension(controller ? "#{controller}/#{context}" : "#{context}", type)
   end
@@ -148,7 +150,7 @@ def _template_location(context, type, controller)
   # type~to_s::
   #    The mime-type of the template that will be rendered. Defaults to nil.
   #
-  # @public
+  # @api public
   def _absolute_template_location(template, type)
     _conditionally_append_extension(template, type)
   end
@@ -164,8 +166,9 @@ def _absolute_template_location(template, type)
   # headersHash{header = value}::
   #   A hash of headers to start the controller with. These headers can be
   #   overridden later by the #headers method.
-  #---
-  # @semipublic
+  # 
+  # @api plugin
+  # @overridable
   def initialize(request, status=200, headers={'Content-Type' = 'text/html; charset=utf-8'})
     super()
     @request, @_status, @headers = request, status, headers
@@ -181,8 +184,8 @@ def initialize(request, status=200, headers={'Content-Type' = 'text/html; chars
   #
   # ==== Raises
   # ActionNotFound:: The requested action was not found in class.
-  #---
-  # @semipublic
+  #
+  # @api plugin
   def _dispatch(action=:index)
     Merb.logger.info("Params: #{self.class._filter_params(request.params).inspect}")
     start = Time.now
@@ -197,6 +200,10 @@ def _dispatch(action=:index)
 
   attr_reader :request, :headers
 
+  # ==== Returns
+  # Fixnum:: The response status code
+  #
+  # @api public
   def status
     @_status
   end
@@ -205,6 +212,8 @@ def status
   #
   # ==== Parameters
   # sFixnum, Symbol:: A status-code or named http-status
+  #
+  # @api public
   def status=(s)
     if s.is_a?(Symbol) && STATUS_CODES.key?(s)
       @_status = STATUS_CODES[s]
@@ -217,27 +226,112 @@ def status=(s)
 
   # ==== Returns
   # Hash:: The parameters from the request object
+  # 
+  # @api public
   def params()  request.params  end
     
-  # ==== Parameters
-  # name~to_sym, Hash:: The name of the URL to generate.
-  # rparamsHash:: Parameters for the route generation.
+  # There are three possible ways to use this method.  First, if you have a named route, 
+  # you can specify the route as the first parameter as a symbol and any paramters in a 
+  # hash.  Second, you can generate the default route by just passing the params hash, 
+  # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+  # allows you to specify the parameters to a named route in the order they appear in the 
+  # router.  
+  #
+  # ==== Parameters(Named Route)
+  # nameSymbol:: 
+  #   The name of the route. 
+  # argsHash:: 
+  #   Parameters for the route generation.
+  #
+  # ==== Parameters(Default Route)
+  # argsHash:: 
+  #   Parameters for the route generation.  This route will use the default route. 
+  #
+  # ==== Parameters(Anonymous Parameters)
+  # nameSymbol::
+  #   The name of the route.  
+  # argsArray:: 
+  #   An array of anonymous parameters to generate the route
+  #   with. These parameters are assigned to the route parameters
+  #   in the order that they are passed.
   #
   # ==== Returns
   # String:: The generated URL.
   #
-  # ==== Alternatives
-  # If a hash is used as the first argument, a default route will be
-  # generated based on it and rparams.
-  # ====
-  # TODO: Update this documentation
+  # ==== Examples
+  # Named Route
+  #
+  # Merb::Router.prepare do
+  #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+  # end
+  #
+  # url(:articles, :title = "new_article")
+  #
+  # Default Route
+  #
+  # Merb::Router.prepare do
+  #   default_routes
+  # end
+  #
+  # url(:controller = "articles", :action = "new")
+  #
+  # Anonymous Paramters
+  #
+  # Merb::Router.prepare do
+  #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+  # end
+  #
+  # url(:articles, 2008, 10, "test_article")
+  #
+  # @api public
   def url(name, *args)
     args  params
     Merb::Router.url(name, *args)
   end
+  
+  # Generates a URL for a single or nested resource.
+  #
+  # ==== Parameters
+  # resourcesSymbol,Object:: The resources for which the URL
+  #   should be generated. These resources should be specified
+  #   in the router.rb file using #resources and #resource.
+  #
+  # optionsHash:: Any extra parameters that are needed to
+  #   generate the URL.
+  #
+  # ==== Returns
+  # String:: The generated URL.
+  #
+  # ==== Examples
+  #
+  # Merb::Router.prepare do
+  #   resources :users do
+  #     resources :comments
+  #   end
+  # end
+  #
+  # resource(:users)            # = /users
+  # resource(@user)             # = /users/10
+  # resource(@user, :comments)  # = /users/10/comments
+  # resource(@user, @comment)   # = /users/10/comments/15
+  # resource(:users, :new)      # = /users/new
+  # resource(:@user, :edit)     # = /users/10/edit
+  #
+  # @api public
+  def resource(*args)
+    args  params
+    Merb::Router.resource(*args)
+  end
+  
 
   alias_method :relative_url, :url
   
+  # Returns the absolute url including the passed protocol and host.  
+  # 
+  # This uses the same arguments as the url method, with added requirements 
+  # of protocol and host options. 
+  #
+  # @api public
   def absolute_url(*args)
     options  = extract_options_from_args!(args) || {}
     options[:protocol] ||= request.protocol
@@ -251,6 +345,8 @@ def absolute_url(*args)
   # ==== Returns
   # Array[Integer, Hash, String]::
   #   The controller's status code, headers, and body
+  #
+  # @api private
   def rack_response
     [status, headers, Merb::Rack::StreamWrapper.new(body)]
   end
@@ -258,6 +354,8 @@ def rack_response
   # Sets a controller to be "abstract" 
   # This controller will not be able to be routed to
   # and is used for super classing only
+  #
+  # @api public
   def self.abstract!
     @_abstract = true
   end
@@ -267,6 +365,8 @@ def self.abstract!
   # === Returns
   # Boolean
   #  true if the controller has been set as abstract
+  #
+  # @api public
   def self.abstract?
     !!@_abstract 
   end
@@ -277,6 +377,15 @@ def self.abstract?
   private
 
   # If not already added, add the proper mime extension to the template path.
+  #
+  # ==== Parameters
+  #
+  # template~to_s ::
+  #   The template path to append the mime type to.
+  # type~to_s ::
+  #   The extension to append to the template path conditionally
+  #
+  # @api private
   def _conditionally_append_extension(template, type)
     type && !template.match(/\.#{type.to_s.escape_regexp}$/) ? "#{template}.#{type}" : template
   end</field>
	<field name="commit_file_name">mime.rb</field>
	<field name="commit_diff">@@ -1,12 +1,32 @@
 module Merb
   class  self
 
+    
+    # Returns a hash of the available mime types. 
+    #
     # ==== Returns
-    # Hash:: The available mime types.
+    # Hash{Symbol = Hash{Symbol = Object}}:: The available mime types.
+    #
+    # ==== Notes
+    # Each entry corresponds to a call to add_mime_type, having the mime type key (:html, :xml, :json, etc.)
+    # as the key and a hash containing the following entries:
+    #   :accepts           # the mime types that will be recognized by this entry
+    #   :transform_method  # the method called on an object to convert it to content of this type (such as to_json)
+    #   :content_type      # the value set to the "Content-Type" HTTP header when this mime is sent in a response
+    #   :response_headers  # sent in a response using this content type
+    #   :default_quality   # the scale factor used in describing content type preference
+    #   :response_block    # the block to be called with the controller when a request responds to this mime type
+    #
+    # @api public
     def available_mime_types
       ResponderMixin::TYPES
     end
 
+    # ==== Returns
+    # Hash{String = Symbol}:: 
+    #   A hash mapping Content-Type values to the mime type key of the appropriate entry in #available_mime_types
+    #
+    # @api public
     def available_accepts
       ResponderMixin::MIMES
     end
@@ -42,6 +62,11 @@ def available_accepts
     #   correctly appended to the mimetype itself.
     # &block:: a block which recieves the current controller when the format
     #   is set (in the controller's #content_type method)
+    #
+    # ==== Returns
+    # nil
+    #
+    # @api public
     def add_mime_type(key, transform_method, mimes, new_response_headers = {}, default_quality = 1, &block) 
       enforce!(key = Symbol, mimes = Array)
       
@@ -69,6 +94,8 @@ def render_#{key}(thing = nil, opts = {})
           render thing, opts
         end
       EOS
+      
+      nil
     end
 
     # Removes a MIME-type from the mime-type list.
@@ -78,6 +105,8 @@ def render_#{key}(thing = nil, opts = {})
     #
     # ==== Notes
     # :all is the key for */*; It can't be removed.
+    #
+    # @api public
     def remove_mime_type(key)
       return false if key == :all
       ResponderMixin::TYPES.delete(key)
@@ -91,21 +120,12 @@ def remove_mime_type(key)
     #
     # ==== Raises
     # ArgumentError:: The requested mime type is not valid.
+    #
+    # @api public
     def mime_transform_method(key)
       raise ArgumentError, ":#{key} is not a valid MIME-type" unless ResponderMixin::TYPES.key?(key)
       ResponderMixin::TYPES[key][:transform_method]
     end
 
-    # The mime-type for a particular inbound Accepts header.
-    #
-    # ==== Parameters
-    # headerString:: The name of the header to find the mime-type for.
-    #
-    # ==== Returns
-    # Hash:: The mime type information.
-    def mime_by_request_header(header)
-      available_mime_types.find {|key,info| info[:accepts].include?(header)}.first
-    end
-    
   end
 end</field>
	<field name="commit_file_name">authentication.rb</field>
	<field name="commit_diff">@@ -12,6 +12,9 @@ module Merb::AuthenticationMixin
   # realm~to_s:: The realm to authenticate against. Defaults to 'Application'.
   # &authenticator:: A block to check if the authentication is valid.
   #
+  # ==== Returns
+  # Merb::AuthenticationMixin::BasicAuthentication
+  #
   # ==== Examples
   #     class Application  Merb::Controller
   #     
@@ -47,7 +50,7 @@ module Merb::AuthenticationMixin
   #
   # If you need to request basic authentication inside an action you need to use the request! method.
   #
-  # ====Example
+  # ==== Example
   #
   #    class Sessions  Application
   #  
@@ -55,15 +58,24 @@ module Merb::AuthenticationMixin
   #        case content_type
   #        when :html
   #          render
+  #
   #        else
-  #          basic_authentication.request!
+  #         user = basic_authentication.authenticate do |username, password|
+  #           User.authenticate(username, password)
+  #         end
+  #
+  #         if user
+  #           display(user)
+  #         else
+  #           basic_authentication.request
+  #         end
   #        end
   #      end
   # 
   #    end 
   #
-  #---
-  # @public
+  #
+  # @api public
   def basic_authentication(realm = "Application", &authenticator)
     @_basic_authentication ||= BasicAuthentication.new(self, realm, &authenticator)
   end
@@ -72,6 +84,7 @@ class BasicAuthentication
     # So we can have access to the status codes
     include Merb::ControllerExceptions
 
+    # @api private
     def initialize(controller, realm = "Application", &authenticator)
       @controller = controller
       @realm = realm
@@ -79,6 +92,15 @@ def initialize(controller, realm = "Application", &authenticator)
       authenticate_or_request(&authenticator) if authenticator
     end
 
+    # Determines whether or not the user is authenticated using the criteria
+    # in the provided authenticator block.
+    #
+    # ==== Parameters
+    # &authenticator:: A block that decides whether the provided username and password
+    #   are valid.
+    #
+    # ==== Returns
+    # Object:: False if basic auth is not provided, otherwise the return value of the authenticator block.
     def authenticate(&authenticator)
       if @auth.provided? and @auth.basic?
         authenticator.call(*@auth.credentials)
@@ -87,33 +109,56 @@ def authenticate(&authenticator)
       end
     end
 
+    # Request basic authentication and halt the filter chain. This is for use in a before filter.
+    #
+    # ==== Throws
+    # :halt with an "HTTP Basic: Access denied." message with no layout, and sets the status to Unauthorized.
+    #
+    # @api public
     def request
       request!
       throw :halt, @controller.render("HTTP Basic: Access denied.\n", :status = Unauthorized.status, :layout = false)
     end
     
-    # This is a special case for use outside a before filter.  Use this if you need to 
-    # request basic authenticaiton as part of an action
+    # Sets headers to request basic auth.
+    #
+    # ==== Returns
+    # String:: Returns the empty string to provide a response body.
+    #
+    # @api public
     def request!
       @controller.status = Unauthorized.status
       @controller.headers['WWW-Authenticate'] = 'Basic realm="%s"' % @realm
+      ""
     end
     
-    # Checks to see if there has been any basic authentication credentials provided
+    # ==== Returns
+    # Boolean:: Whether there has been any basic authentication credentials provided
+    #
+    # @api public
     def provided?
       @auth.provided?
     end
     
+    # ==== Returns
+    # String:: The username provided in the request.
+    #
+    # @api public
     def username
       provided? ? @auth.credentials.first : nil
     end
     
+    # ==== Returns
+    # String:: The password provided in the request.
+    #
+    # @api public
     def password
       provided? ? @auth.credentials.last : nil
     end
     
     protected
     
+    # @api private
     def authenticate_or_request(&authenticator)
       authenticate(&authenticator) || request
     end</field>
	<field name="commit_file_name">conditional_get.rb</field>
	<field name="commit_diff">@@ -29,6 +29,8 @@ module Merb::ConditionalGetMixin
   # tag~to_s::
   #   value of ETag header enclosed in double quotes
   #   as required by the RFC
+  #
+  # @api public
   def etag=(tag)
     headers[Merb::Const::ETAG] = %("#{tag}")
   end
@@ -36,6 +38,8 @@ def etag=(tag)
   # ==== Returns
   # String::
   #   Value of ETag response header or nil if it's not set.
+  #
+  # @api public
   def etag
     headers[Merb::Const::ETAG]
   end
@@ -44,6 +48,8 @@ def etag
   # Boolean::
   # true if ETag response header equals If-None-Match request header,
   # false otherwise
+  #
+  # @api public
   def etag_matches?(tag = self.etag)
     tag == self.request.if_none_match
   end
@@ -54,6 +60,8 @@ def etag_matches?(tag = self.etag)
   # tagTime::
   # resource modification timestamp converted into format
   # required by the RFC
+  #
+  # @api public
   def last_modified=(time)
     headers[Merb::Const::LAST_MODIFIED] = time.httpdate
   end
@@ -61,6 +69,8 @@ def last_modified=(time)
   # ==== Returns
   # String::
   #   Value of Last-Modified response header or nil if it's not set.
+  #
+  # @api public
   def last_modified
     Time.rfc2822(headers[Merb::Const::LAST_MODIFIED])
   end
@@ -69,6 +79,8 @@ def last_modified
   # Boolean::
   # true if Last-Modified response header is  than
   # If-Modified-Since request header value, false otherwise.
+  #
+  # @api public
   def not_modified?(time = self.last_modified)
     request.if_modified_since && time && time = request.if_modified_since
   end
@@ -77,6 +89,8 @@ def not_modified?(time = self.last_modified)
   # Boolean::
   # true if either ETag matches or entity is not modified,
   # so request is fresh; false otherwise
+  #
+  # @api public
   def request_fresh?
     etag_matches?(self.etag) || not_modified?(self.last_modified)
   end</field>
	<field name="commit_file_name">controller.rb</field>
	<field name="commit_diff">@@ -4,26 +4,27 @@ module ControllerMixin
     
     # Enqueu a block to run in a background thread outside of the request
     # response dispatch
-    #
+    # 
     # ==== Parameters
-    # takes a block to run later
-    #
+    # &blk:: proc to run later
+    # 
     # ==== Example
     # run_later do
     #   SomeBackgroundTask.run
     # end
-    #
+    # 
+    # @api public
     def run_later(&blk)
       Merb::Dispatcher.work_queue  blk
     end
     
     # Renders the block given as a parameter using chunked encoding.
-    #
+    # 
     # ==== Parameters
-    # &blk:: 
+    # &blk::
     #   A block that, when called, will use send_chunks to send chunks of data
     #   down to the server. The chunking will terminate once the block returns.
-    #
+    # 
     # ==== Examples
     #   def stream
     #     prefix = 'p'
@@ -44,6 +45,8 @@ def run_later(&blk)
     #       end
     #     end
     #   end
+    # 
+    # @api public
     def render_chunked(&blk)
       must_support_streaming!
       headers['Transfer-Encoding'] = 'chunked'
@@ -55,12 +58,14 @@ def render_chunked(&blk)
         response.write("0\r\n\r\n")
       }
     end
-
+    
     # Writes a chunk from +render_chunked+ to the response that is sent back to
     # the client. This should only be called within a +render_chunked+ block.
     #
     # ==== Parameters
     # dataString:: a chunk of data to return.
+    # 
+    # @api public
     def send_chunk(data)
       only_runs_on_mongrel!
       @response.write('%x' % data.size + "\r\n")
@@ -71,53 +76,59 @@ def send_chunk(data)
     # &blk::
     #   A proc that should get called outside the mutex, and which will return
     #   the value to render.
-    #
+    # 
     # ==== Returns
     # Proc::
-    #   A block that Mongrel can call later, allowing Merb to release the
+    #   A block that the server can call later, allowing Merb to release the
     #   thread lock and render another request.
+    # 
+    # @api public
     def render_deferred(&blk)
-      Proc.new {|response|
+      Proc.new do |response|
         response.write(blk.call)
-      }
+      end
     end
     
     # Renders the passed in string, then calls the block outside the mutex and
     # after the string has been returned to the client.
-    #
+    # 
     # ==== Parameters
     # strString:: A +String+ to return to the client.
     # &blk:: A block that should get called once the string has been returned.
-    #
+    # 
     # ==== Returns
     # Proc::
     #   A block that Mongrel can call after returning the string to the user.
+    # 
+    # @api public
     def render_then_call(str, &blk)
-      Proc.new {|response|
+      Proc.new do |response|
         response.write(str)
-        blk.call        
-      }      
+        blk.call
+      end
     end
-
+    
     # ==== Parameters
     # urlString::
     #   URL to redirect to. It can be either a relative or fully-qualified URL.
     # optsHash:: An options hash (see below)
-    #
+    # 
     # ==== Options (opts)
     # :messageHash::
     #   Messages to pass in url query string as value for "_message"
     # :permanentBoolean::
     #   When true, return status 301 Moved Permanently
-    #
+    # 
     # ==== Returns
     # String:: Explanation of redirect.
-    #
+    # 
     # ==== Examples
     #   redirect("/posts/34")
     #   redirect("/posts/34", :message = { :notice = 'Post updated successfully!' })
     #   redirect("http://www.merbivore.com/")
     #   redirect("http://www.merbivore.com/", :permanent = true)
+    # 
+    # @api public
     def redirect(url, opts = {})
       default_redirect_options = { :message = nil, :permanent = false }
       opts = default_redirect_options.merge(opts)
@@ -131,17 +142,20 @@ def redirect(url, opts = {})
       "htmlbodyYou are being a href=\"#{url}\"redirected/a./body/html"
     end
     
+    # Retreives the redirect message either locally or from the request.
+    # 
+    # @api public
     def message
       @_message = defined?(@_message) ? @_message : request.message
     end
     
     # Sends a file over HTTP.  When given a path to a file, it will set the
     # right headers so that the static file is served directly.
-    #
+    # 
     # ==== Parameters
     # fileString:: Path to file to send to the client.
     # optsHash:: Options for sending the file (see below).
-    #
+    # 
     # ==== Options (opts)
     # :dispositionString::
     #   The disposition of the file send. Defaults to "attachment".
@@ -151,6 +165,8 @@ def message
     #
     # ==== Returns
     # IO:: An I/O stream for the file.
+    # 
+    # @api public
     def send_file(file, opts={})
       opts.update(Merb::Const::DEFAULT_SEND_FILE_OPTIONS.merge(opts))
       disposition = opts[:disposition].dup || 'attachment'
@@ -160,28 +176,30 @@ def send_file(file, opts={})
         'Content-Disposition'       = disposition,
         'Content-Transfer-Encoding' = 'binary'
       )
-      Proc.new {|response|
+      Proc.new do |response|
         file = File.open(file, 'rb')
         while chunk = file.read(16384)
           response.write chunk
-        end  
+        end
         file.close
-      }
+      end
     end
     
     # Send binary data over HTTP to the user as a file download. May set content type,
     # apparent file name, and specify whether to show data inline or download as an attachment.
-    #
+    # 
     # ==== Parameters
     # dataString:: Path to file to send to the client.
     # optsHash:: Options for sending the data (see below).
-    #
+    # 
     # ==== Options (opts)
     # :dispositionString::
     #   The disposition of the file send. Defaults to "attachment".
     # :filenameString::
     #   The name to use for the file. Defaults to the filename of file.
     # :typeString:: The content type.
+    # 
+    # @api public
     def send_data(data, opts={})
       opts.update(Merb::Const::DEFAULT_SEND_FILE_OPTIONS.merge(opts))
       disposition = opts[:disposition].dup || 'attachment'
@@ -195,13 +213,13 @@ def send_data(data, opts={})
     end
     
     # Streams a file over HTTP.
-    #
+    # 
     # ==== Parameters
     # optsHash:: Options for the file streaming (see below).
     # &stream::
     #   A block that, when called, will return an object that responds to
     #   +get_lines+ for streaming.
-    #
+    # 
     # ==== Options
     # :dispositionString::
     #   The disposition of the file send. Defaults to "attachment".
@@ -216,6 +234,8 @@ def send_data(data, opts={})
     #       response.write chunk
     #     end
     #   end
+    # 
+    # @api public
     def stream_file(opts={}, &stream)
       opts.update(Merb::Const::DEFAULT_SEND_FILE_OPTIONS.merge(opts))
       disposition = opts[:disposition].dup || 'attachment'
@@ -227,32 +247,37 @@ def stream_file(opts={}, &stream)
         # Rack specification requires header values to respond to :each
         'CONTENT-LENGTH'            = opts[:content_length].to_s
       )
-      Proc.new{|response|
+      Proc.new do |response|
         stream.call(response)
-      }
+      end
     end
-
+    
     # Uses the nginx specific +X-Accel-Redirect+ header to send a file directly
-    # from nginx. For more information, see the nginx wiki:
+    # from nginx.
+    # 
+    # ==== Notes
+    # Unless Content-Disposition is set before calling this method,
+    # it is set to attachment with streamed file name.
+    # 
+    # For more information, see the nginx wiki:
     # http://wiki.codemongers.com/NginxXSendfile
-    #
+    # 
     # and the following sample gist:
     # http://gist.github.com/11225
-    #
+    # 
     # there's also example application up on GitHub:
-    #
+    # 
     # http://github.com/michaelklishin/nginx-x-accel-redirect-example-application/tree/master
-    #
-    # Unless Content-Disposition is set before calling this method,
-    # it is set to attachment with streamed file name.
-    #
+    # 
     # ==== Parameters
     # pathString:: Path to file to send to the client.
     # content_typeString:: content type header value. By default is set to empty string to let
     #                        Nginx detect it.
-    #
+    # 
     # ==== Return
-    # One space string.
+    # String:: precisely a single space.
+    # 
+    # @api public
     def nginx_send_file(path, content_type = "")
       # Let Nginx detect content type unless it is explicitly set
       headers['Content-Type']        = content_type
@@ -262,17 +287,17 @@ def nginx_send_file(path, content_type = "")
       
       return ' '
     end  
-  
+    
     # Sets a cookie to be included in the response.
-    #
+    # 
     # If you need to set a cookie, then use the +cookies+ hash.
-    #
+    # 
     # ==== Parameters
     # name~to_s:: A name for the cookie.
     # value~to_s:: A value for the cookie.
     # expires~gmtime:~strftime, Hash:: An expiration time for the cookie, or a hash of cookie options.
-    # ---
-    # @public
+    # 
+    # @api public
     def set_cookie(name, value, expires)
       options = expires.is_a?(Hash) ? expires : {:expires = expires}
       cookies.set_cookie(name, value, options)
@@ -280,11 +305,13 @@ def set_cookie(name, value, expires)
     
     # Marks a cookie as deleted and gives it an expires stamp in the past. This
     # method is used primarily internally in Merb.
-    #
+    # 
     # Use the +cookies+ hash to manipulate cookies instead.
-    #
+    # 
     # ==== Parameters
     # name~to_s:: A name for the cookie to delete.
+    # 
+    # @api public
     def delete_cookie(name)
       set_cookie(name, nil, Merb::Const::COOKIE_EXPIRED_TIME)
     end
@@ -296,6 +323,8 @@ def delete_cookie(name)
     #
     # ==== Returns
     # String:: The escaped object.
+    # 
+    # @api public
     def escape_xml(obj)
       Erubis::XmlHelper.escape_xml(obj.to_s)
     end
@@ -303,14 +332,17 @@ def escape_xml(obj)
     alias escape_html escape_xml
     
     private
-      # Marks an output method that only runs on the mongrel webserver.
-      #
-      # ==== Raises
-      # NotImplemented:: The Rack adapter is not mongrel.
-      def only_runs_on_mongrel!
-        unless Merb::Config[:log_stream] == 'mongrel'
-          raise(Merb::ControllerExceptions::NotImplemented, "Current Rack adapter is not mongrel. cannot support this feature")
-        end
+    
+    # Marks an output method that only runs on the Mongrel webserver.
+    # 
+    # ==== Raises
+    # NotImplemented:: The Rack adapter is not mongrel.
+    # 
+    # @api private
+    def only_runs_on_mongrel!
+      unless Merb::Config[:log_stream] == 'mongrel'
+        raise(Merb::ControllerExceptions::NotImplemented, "Current Rack adapter is not mongrel. cannot support this feature")
       end
+    end
   end
 end</field>
	<field name="commit_file_name">render.rb</field>
	<field name="commit_diff">@@ -4,6 +4,8 @@ module Merb::RenderMixin
 
   # ==== Parameters
   # baseModule:: Module that is including RenderMixin (probably a controller)
+  #
+  # @private
   def self.included(base)
     base.extend(ClassMethods)
     base.class_eval do
@@ -17,6 +19,8 @@ module ClassMethods
     #
     # ==== Returns
     # Hash:: An options hash
+    #
+    # @api public
     def default_render_options
       self._default_render_options ||= {}
     end
@@ -25,6 +29,8 @@ def default_render_options
     #
     # ==== Parameters
     # optsHash:: An options hash
+    #
+    # @api public
     def render_options(opts)
       self._default_render_options = opts
     end
@@ -40,11 +46,18 @@ def render_options(opts)
     #
     # ==== Returns
     # Hash:: The default render options.
+    #
+    # @api public
     def layout(layout)
       self.default_render_options.update(:layout = (layout || false))
     end
 
     # Enable the default layout logic - reset the layout option.
+    #
+    # ==== Returns
+    # ~to_s:: The layout that was previously set.
+    #
+    # @api public
     def default_layout
       self.default_render_options.delete(:layout)
     end
@@ -82,8 +95,8 @@ def default_layout
   # ==== Alternatives
   # If you pass a Hash as the first parameter, it will be moved to opts and
   # "thing" will be the current action
-  #---
-  # @public
+  #
+  # @api public
   def render(thing = nil, opts = {})
     # render :format = :xml means render nil, :format = :xml
     opts, thing = thing, nil if thing.is_a?(Hash)
@@ -188,6 +201,7 @@ def render(thing = nil, opts = {})
   # The transformed object will not be used in a layout unless a :layout is
   # explicitly passed in the opts.
   #
+  # @api public
   def display(object, thing = nil, opts = {})
     template_opt = thing.is_a?(Hash) ? thing.delete(:template) : opts.delete(:template)
 
@@ -268,6 +282,8 @@ def display(object, thing = nil, opts = {})
   #
   # In this case, "one" will be available in the partial through the local
   # variable named +number+.
+  #
+  # @api public
   def partial(template, opts={})
 
     # partial :foo becomes "#{controller_name}/_foo"
@@ -323,6 +339,8 @@ def partial(template, opts={})
   #
   # ==== Returns
   # Hash:: The options hash that was passed in.
+  #
+  # @api private
   def _handle_options!(opts)
     self.status = opts.delete(:status).to_i if opts[:status]
     headers["Location"] = opts.delete(:location) if opts[:location]
@@ -346,6 +364,8 @@ def _handle_options!(opts)
   #   If a layout was specified (either via layout in the class or by passing
   #   one in to this method), and not found. No error will be raised if no
   #   layout was specified, and the default layouts were not found.
+  #
+  # @api private
   def _get_layout(layout = nil)
     return false if layout == false
     
@@ -385,6 +405,8 @@ def _get_layout(layout = nil)
   # ==== Returns
   # Array[Symbol, String]::
   #   A pair consisting of the template method and location.
+  #
+  # @api private
   def _template_for(context, content_type, controller=nil, template=nil, locals=[])
     template_method, template_location = nil, nil
 
@@ -419,6 +441,8 @@ def _template_for(context, content_type, controller=nil, template=nil, locals=[]
   #
   # ==== Returns
   # String:: The method, if it exists. Otherwise return nil.
+  #
+  # @api private
   def _template_method_for(template_location, locals)
     meth = Merb::Template.template_for(template_location, [], locals)
     meth && self.respond_to?(meth) ? meth : nil
@@ -431,8 +455,8 @@ def _template_method_for(template_location, locals)
   #
   # ==== Parameters
   # objObject:: The key in the thrown_content hash. Defaults to :for_layout.
-  #---
-  # @public
+  #
+  # @api public
   def catch_content(obj = :for_layout)
     @_caught_content[obj] || ''
   end
@@ -441,8 +465,8 @@ def catch_content(obj = :for_layout)
   #
   # ==== Parameters
   # objObject:: The key in the thrown_content hash. Defaults to :for_layout.
-  #---
-  # @public
+  #
+  # @api public
   def thrown_content?(obj = :for_layout)
     @_caught_content.key?(obj)
   end
@@ -463,8 +487,8 @@ def thrown_content?(obj = :for_layout)
   # ==== Example
   #   throw_content(:foo, "Foo")
   #   catch_content(:foo) #= "Foo"
-  #---
-  # @public
+  #
+  # @api public
   def throw_content(obj, string = nil, &block)
     unless string || block_given?
       raise ArgumentError, "You must pass a block or a string into throw_content"
@@ -499,8 +523,8 @@ def append_content(obj, string = nil, &block)
   #
   # ==== Parameters
   # objObject:: The key in the thrown_content hash. Defaults to :for_layout.
-  #---
-  # @public
+  #
+  # @api public
   def clear_content(obj = :for_layout)
     @_caught_content.delete(obj) unless @_caught_content[obj].nil?
   end</field>
	<field name="commit_file_name">template.rb</field>
	<field name="commit_diff">@@ -86,7 +86,8 @@ def needs_compilation?(path, locals)
       return true if Merb::Config[:reload_templates] || !METHOD_LIST[path]
       
       current_locals = SUPPORTED_LOCALS_LIST[path]
-      locals.any?{|local| !current_locals.include?(local)}
+      current_locals != locals &&
+        !(locals - current_locals).empty?
     end
     
     # Get all known template extensions</field>
	<field name="commit_file_name">hash.rb</field>
	<field name="commit_diff">@@ -1,4 +1,13 @@
 class Hash
+  # Returns the value of self for each argument and deletes those entries.
+  #
+  # ==== Parameters
+  # *args:: the keys whose values should be extracted and deleted.
+  #
+  # ==== Returns
+  # Array[Object]:: The values of the provided arguments in corresponding order.
+  #
+  # @api public
   def extract!(*args)
     args.map do |arg|
       self.delete(arg)</field>
	<field name="commit_file_name">kernel.rb</field>
	<field name="commit_diff">@@ -39,13 +39,17 @@ def track_dependency(name, *ver, &blk)
   # If that has already happened, the gem will be activated
   # immediately, but it will still be registered.
   # 
-  # @param nameString The name of the gem to load.
-  # @param *verGem::Requirement, Gem::Version, Array, #to_str
+  # ==== Parameters
+  # nameString The name of the gem to load.
+  # *verGem::Requirement, Gem::Version, Array, #to_str
   #   Version requirements to be passed to Gem::Dependency.new.
   #   If the last argument is a Hash, extract the :immediate option,
   #   forcing a dependency to load immediately.
   #
-  # @return Gem::Dependency The dependency information.
+  # ==== Returns
+  # Gem::Dependency:: The dependency information.
+  #
+  # @api public
   def dependency(name, *ver, &blk)
     immediate = ver.last.is_a?(Hash) && ver.pop[:immediate]
     if immediate || Merb::BootLoader.finished?(Merb::BootLoader::Dependencies)
@@ -71,6 +75,8 @@ def dependency(name, *ver, &blk)
   #   as a library.
   #
   # @return Gem::Dependency The dependency information.
+  #
+  # @api private
   def load_dependency(name, *ver, &blk)
     dep = name.is_a?(Gem::Dependency) ? name : track_dependency(name, *ver)
     gem(dep)
@@ -93,7 +99,14 @@ def load_dependency(name, *ver, &blk)
   # Loads both gem and library dependencies that are passed in as arguments.
   # Execution is deferred to the Merb::BootLoader::Dependencies.run during bootup.
   #
-  # @param *argsString, Hash, Array The dependencies to load.
+  # ==== Parameters
+  # *argsString, Hash, Array The dependencies to load.
+  #
+  # ==== Returns
+  # Array[(Gem::Dependency, Array[Gem::Dependency])]:: Gem::Dependencies for the
+  #   dependencies specified in args.
+  #
+  # @api public
   def dependencies(*args)
     args.map do |arg|
       case arg
@@ -118,6 +131,8 @@ def dependencies(*args)
   # @example dependencies "RedCloth"                 # Loads the the RedCloth gem
   # @example dependencies "RedCloth", "merb_helpers" # Loads RedCloth and merb_helpers
   # @example dependencies "RedCloth" = "3.0"        # Loads RedCloth 3.0
+  #
+  # @api private
   def load_dependencies(*args)
     args.map do |arg|
       case arg
@@ -132,7 +147,12 @@ def load_dependencies(*args)
   #
   # @param libraryto_s The library to attempt to include.
   # @param messageString The error to add to the log upon failure. Defaults to nil.
+  #
+  # @api private
+  # @deprecated
   def rescue_require(library, message = nil)
+    Merb.logger.warn("Deprecation warning: rescue_require is deprecated")
+    sleep 2.0
     require library
   rescue LoadError, RuntimeError
     Merb.logger.error!(message) if message
@@ -142,17 +162,22 @@ def rescue_require(library, message = nil)
   # Mapper) you wish to use. Currently Merb has plugins to support
   # ActiveRecord, DataMapper, and Sequel.
   #
-  # @param ormSymbol The ORM to use.
+  # ==== Parameters
+  # ormSymbol:: The ORM to use.
   #
-  # @example
+  # ==== Returns
+  # nil
+  #
+  # ==== Example
   #   use_orm :datamapper
   #
   #   # This will use the DataMapper generator for your ORM
   #   $ merb-gen model ActivityEvent
   #
-  # @note
+  # ==== Notes
   #   If for some reason this is called more than once, latter
   #   call takes over other.
+  #
   # @api public
   def use_orm(orm)
     begin
@@ -163,24 +188,31 @@ def use_orm(orm)
       Merb.logger.warn!("The #{orm_plugin} gem was not found.  You may need to install it.")
       raise e
     end
+    nil
   end
 
   # Used in Merb.root/config/init.rb to tell Merb which testing framework to
   # use. Currently Merb has plugins to support RSpec and Test::Unit.
   #
-  # @param test_frameworkSymbol
+  # ==== Parameters
+  # test_frameworkSymbol::
   #   The test framework to use. Currently only supports :rspec and :test_unit.
   #
-  # @example
+  # ==== Returns
+  # nil
+  #
+  # ==== Example
   #   use_test :rspec
   #
   #   # This will now use the RSpec generator for tests
   #   $ merb-gen model ActivityEvent
+  #
   # @api public
   def use_testing_framework(test_framework, *test_dependencies)
     Merb.test_framework = test_framework
     
     Kernel.dependencies test_dependencies if Merb.env == "test" || Merb.env.nil?
+    nil
   end
 
   def use_test(*args)
@@ -190,14 +222,19 @@ def use_test(*args)
   # Used in Merb.root/config/init.rb to tell Merb which template engine to
   # prefer.
   #
-  # @param template_engineSymbol
+  # ==== Parameters
+  # template_engineSymbol
   #   The template engine to use.
   #
-  # @example
+  # ==== Returns
+  # nil
+  #
+  # ==== Example
   #   use_template_engine :haml
   #
   #   # This will now use haml templates in generators where available.
   #   $ merb-gen resource_controller Project 
+  #
   # @api public
   def use_template_engine(template_engine)
     Merb.template_engine = template_engine
@@ -210,11 +247,14 @@ def use_template_engine(template_engine)
       end
       Kernel.dependency(template_engine_plugin)
     end
+    
+    nil
   rescue LoadError = e
     Merb.logger.warn!("The #{template_engine_plugin} gem was not found.  You may need to install it.")
     raise e
   end
 
+
   # @param iFixnum The caller number. Defaults to 1.
   #
   # @return Array[Array] The file, line and method of the caller.
@@ -222,6 +262,8 @@ def use_template_engine(template_engine)
   # @example
   #   __caller_info__(1)
   #     # = ['/usr/lib/ruby/1.8/irb/workspace.rb', '52', 'irb_binding']
+  #
+  # @api private
   def __caller_info__(i = 1)
     file, line, meth = caller[i].scan(/(.*?):(\d+):in `(.*?)'/).first
   end
@@ -245,6 +287,8 @@ def __caller_info__(i = 1)
   #       [ 123, "      DEBUGGER__.waiting.push Thread.current",      false ],
   #       [ 124, "      @suspend_next = false",                       false ]
   #     ]
+  #
+  # @api private
   def __caller_lines__(file, line, size = 4)
     line = line.to_i
     if file =~ /\(erubis\)/
@@ -262,26 +306,6 @@ def __caller_lines__(file, line, size = 4)
         yield index + line - size, str.chomp
       end
     end
-    # 
-    # lines = File.readlines(file)
-    # current = line.to_i - 1
-    # 
-    # first = current - size
-    # first = first  0 ? 0 : first
-    # 
-    # last = current + size
-    # last = last  lines.size ? lines.size : last
-    # 
-    # log = lines[first..last]
-    # 
-    # area = []
-    # 
-    # log.each_with_index do |line, index|
-    #   index = index + first + 1
-    #   area  [index, line.chomp, index == current + 1]
-    # end
-    # 
-    # area
   end
 
   # Takes a block, profiles the results of running the block
@@ -309,6 +333,8 @@ def __caller_lines__(file, line, size = 4)
   #   Assuming that the total time taken for #puts calls was less than 5% of the
   #   total time to run, #puts won't appear in the profile report.
   #   The code block will be run 30 times in the example above.
+  #
+  # @api private
   def __profile__(name, min=1, iter=100)
     require 'ruby-prof' unless defined?(RubyProf)
     return_result = ''
@@ -334,6 +360,8 @@ def __profile__(name, min=1, iter=100)
   #     opts = extract_options_from_args!(args) || {}
   #     # [...]
   #   end
+  #
+  # @api public
   def extract_options_from_args!(args)
     args.pop if Hash === args.last
   end
@@ -346,6 +374,8 @@ def extract_options_from_args!(args)
   #
   # @raise ArgumentError
   #   An object failed to quack like a condition.
+  #
+  # @api public
   def enforce!(opts = {})
     opts.each do |k,v|
       raise ArgumentError, "#{k.inspect} doesn't quack like #{v.inspect}" unless k.quacks_like?(v)</field>
	<field name="commit_file_name">dispatcher.rb</field>
	<field name="commit_diff">@@ -4,15 +4,19 @@ module Merb
   class Dispatcher
     class  self
       include Merb::ControllerExceptions
-    
+      
       attr_accessor :use_mutex
       
       @@work_queue = Queue.new
-    
+      
+      # ==== Returns
+      # Queue:: the current queue of dispatch jobs.
+      # 
+      # @api private
       def work_queue 
         @@work_queue
       end  
-    
+      
       Merb::Dispatcher.use_mutex = ::Merb::Config[:use_mutex]
       
       # Dispatch the rack environment. ControllerExceptions are rescued here
@@ -25,9 +29,11 @@ def work_queue
       # ==== Returns
       # Merb::Controller::
       #   The Merb::Controller that was dispatched to
+      # 
+      # @api private
       def handle(request)
         request.handle
-      end      
+      end
     end
   end
   
@@ -36,10 +42,16 @@ class Request
     
     @@mutex = Mutex.new
     
+    # Handles request routing and action dispatch.
+    # 
+    # ==== Returns
+    # Merb::Controller:: the controller that handled the action dispatch.
+    # 
+    # @api private
     def handle
       start = Time.now
       Merb.logger.info "Started request handling: #{start.to_s}"
-  
+      
       find_route!
       return rack_response if handled?
       
@@ -57,7 +69,7 @@ def handle
       if klass.abstract?
         raise NotFound, "The '#{klass}' controller has no public actions"
       end
-    
+      
       controller = dispatch_action(klass, params[:action])
       controller._benchmarks[:dispatch_time] = Time.now - start
       Merb.logger.info controller._benchmarks.inspect
@@ -73,13 +85,13 @@ def handle
     # ==== Parameters
     # klassMerb::Controller:: The controller class to dispatch to.
     # actionSymbol:: The action to dispatch.
-    # requestMerb::Request::
-    #   The Merb::Request object that was created in #handle
     # statusInteger:: The status code to respond with.
     #
     # ==== Returns
     # Merb::Controller::
     #   The Merb::Controller that was dispatched to.
+    # 
+    # @api private
     def dispatch_action(klass, action, status=200)
       # build controller
       controller = klass.new(self, status)
@@ -101,8 +113,6 @@ def dispatch_action(klass, action, status=200)
     # StandardError is caught in standard_error).
     #
     # ==== Parameters
-    # requestMerb::Request:: 
-    #   The request object associated with the failed request.
     # exceptionObject::
     #   The exception object that was created when trying to dispatch the
     #   original controller.
@@ -110,6 +120,8 @@ def dispatch_action(klass, action, status=200)
     # ==== Returns
     # Exceptions::
     #   The Merb::Controller that was dispatched to. 
+    # 
+    # @api private
     def dispatch_exception(exception)
       if(exception.is_a?(Merb::ControllerExceptions::Base) &&
          !exception.is_a?(Merb::ControllerExceptions::ServerError))
@@ -117,12 +129,12 @@ def dispatch_exception(exception)
       else
         Merb.logger.error(Merb.exception(exception))
       end
-
+      
       self.exceptions = [exception]
-
+      
       begin
         e = exceptions.first
-
+        
         if action_name = e.action_name
           dispatch_action(Exceptions, action_name, e.class.status)
         else
@@ -134,7 +146,7 @@ def dispatch_exception(exception)
         else
           Merb.logger.error("Dispatching #{e.class} raised another error.")
           Merb.logger.error(Merb.exception(dispatch_issue))
-
+          
           exceptions.unshift dispatch_issue
           retry
         end</field>
	<field name="commit_file_name">request.rb</field>
	<field name="commit_diff">@@ -25,16 +25,26 @@ class Request
     self.http_method_overrides = []
     
     # Initialize the request object.
-    #
+    # 
     # ==== Parameters
     # http_request~params:~[], ~body:IO:: 
     #   An object like an HTTP Request.
+    # 
+    # @api private
     def initialize(rack_env)
       @env  = rack_env
       @body = rack_env['rack.input']
       @route_params = {}
     end
     
+    # Returns the controller object for initialization and dispatching the
+    # request.
+    # 
+    # ==== Returns
+    # Class:: The controller class matching the routed request,
+    #   e.g. Posts.
+    # 
+    # @api private
     def controller
       unless params[:controller]
         raise ControllerExceptions::NotFound, 
@@ -58,13 +68,15 @@ def controller
     METHODS = %w{get post put delete head options}
 
     # ==== Returns
-    # Symbol:: The name of the request method, e.g. :get.
+    # Symbol:: The name of the request method, e.g. :get.
     #
     # ==== Notes
     # If the method is post, then the blocks specified in
     # http_method_overrides will be checked for the masquerading method.
     # The block will get the controller yielded to it.  The first matching workaround wins.
     # To disable this behavior, set http_method_overrides = []
+    # 
+    # @api public
     def method
       @method ||= begin
         request_method = @env['REQUEST_METHOD'].downcase.to_sym
@@ -89,20 +101,24 @@ def method
     METHODS.each do |m|
       class_eval "def #{m}?() method == :#{m} end"
     end
-
+    
+    # ==== Notes
     # Find route using requested URI and merges route
     # parameters (:action, :controller and named segments)
     # into request params hash.
+    # 
+    # @api private
     def find_route!
       @route, @route_params = Merb::Router.route_for(self)
       params.merge! @route_params if @route_params.is_a?(Hash)
     end
     
+    # ==== Notes
     # Processes the return value of a deferred router block
     # and returns the current route params for the current
     # request evaluation
-    # ---
-    # @private
+    # 
+    # @api private
     def _process_block_return(retval)
       # If the return value is an array, then it is a redirect
       # so we must set the request as a redirect and extract
@@ -114,33 +130,54 @@ def _process_block_return(retval)
     
     # Sets the request as matched. This will abort evaluating any
     # further deferred procs.
-    # ---
-    # @private
+    # 
+    # @api private
     def matched!
       @matched = true
     end
     
     # Checks whether or not the request has been matched to a route.
-    # ---
-    # @private
+    # 
+    # @api private
     def matched?
       @matched
     end
     
+    # ==== Returns
+    # (Array, Hash):: the route params for the matched route.
+    # 
+    # ==== Notes
+    # If the response is an Array then it is considered a direct Rack response
+    # to be sent back as a response. Otherwise, the route_params is a Hash with
+    # routing data (controller, action, et al).
+    # 
+    # @api private
     def rack_response
       @route_params
     end
     
     # If @route_params is an Array, then it will be the rack response.
-    # In this case, the request has been handled.
+    # In this case, the request is considered handled.
+    # 
+    # ==== Returns
+    # Boolean:: true if @route_params is an Array, false otherwise.
+    # 
+    # @api private
     def handled?
       @route_params.is_a?(Array)
     end
     
+    # == Params
+    # 
+    # Handles processing params from raw data and merging them together to get
+    # the final request params.
+    
     private
     
     # ==== Returns
     # Hash:: Parameters passed from the URL like ?blah=hello.
+    # 
+    # @api private
     def query_params
       @query_params ||= self.class.query_parse(query_string || '')
     end
@@ -150,6 +187,8 @@ def query_params
     #
     # ==== Returns
     # Hash:: The parameters passed in the body.
+    # 
+    # @api private
     def body_params
       @body_params ||= begin
         if content_type && content_type.match(Merb::Const::FORM_URL_ENCODED_REGEXP) # or content_type.nil?
@@ -157,11 +196,13 @@ def body_params
         end
       end
     end
-
+    
     # ==== Returns
     # Mash::
     #   The parameters gathered from the query string and the request body,
     #   with parameters in the body taking precedence.
+    # 
+    # @api private
     def body_and_query_params
       # ^-- FIXME a better name for this method
       @body_and_query_params ||= begin
@@ -170,13 +211,15 @@ def body_and_query_params
         h.to_mash
       end
     end
-
+    
     # ==== Raises
     # ControllerExceptions::MultiPartParseError::
     #   Unable to parse the multipart form data.
     #
     # ==== Returns
     # Hash:: The parsed multipart parameters.
+    # 
+    # @api private
     def multipart_params
       @multipart_params ||= 
         begin
@@ -192,7 +235,7 @@ def multipart_params
           raise e
         end
     end
-
+    
     # ==== Returns
     # Hash:: Parameters from body if this is a JSON request.
     #
@@ -201,6 +244,8 @@ def multipart_params
     # parameters hash.  If it parses to anything else (such as an Array, or
     # if it inflates to an Object) it will be accessible via the inflated_object
     # parameter.
+    # 
+    # @api private
     def json_params
       @json_params ||= begin
         if Merb::Const::JSON_MIME_TYPE_REGEXP.match(content_type)
@@ -209,9 +254,11 @@ def json_params
         end
       end
     end
-
+    
     # ==== Returns
     # Hash:: Parameters from body if this is an XML request.
+    # 
+    # @api private
     def xml_params
       @xml_params ||= begin
         if Merb::Const::XML_MIME_TYPE_REGEXP.match(content_type)
@@ -228,6 +275,8 @@ def xml_params
     # ==== Notes
     # The order of precedence for the params is XML, JSON, multipart, body and
     # request string.
+    # 
+    # @api public
     def params
       @params ||= begin
         h = body_and_query_params.merge(route_params)      
@@ -238,6 +287,10 @@ def params
       end
     end
     
+    # ==== Returns
+    # String:: Returns the redirect message Base64 unencoded.
+    # 
+    # @api public
     def message
       return {} unless params[:_message]
       begin
@@ -246,14 +299,19 @@ def message
         {}
       end
     end
-
+    
+    # ==== Notes
     # Resets the params to a nil value.
+    # 
+    # @api private
     def reset_params!
       @params = nil
     end
     
     # ==== Returns
     # String:: The raw post.
+    # 
+    # @api private
     def raw_post
       @body.rewind if @body.respond_to?(:rewind)
       @raw_post ||= @body.read
@@ -261,6 +319,8 @@ def raw_post
     
     # ==== Returns
     # Boolean:: If the request is an XML HTTP request.
+    # 
+    # @api public
     def xml_http_request?
       not /XMLHttpRequest/i.match(@env['HTTP_X_REQUESTED_WITH']).nil?
     end
@@ -269,17 +329,19 @@ def xml_http_request?
     
     # ==== Returns
     # String:: The remote IP address.
+    # 
+    # @api public
     def remote_ip
       return @env['HTTP_CLIENT_IP'] if @env.include?('HTTP_CLIENT_IP')
-    
+      
       if @env.include?(Merb::Const::HTTP_X_FORWARDED_FOR) then
         remote_ips = @env[Merb::Const::HTTP_X_FORWARDED_FOR].split(',').reject do |ip|
           ip =~ /^unknown$|^(127|10|172\.16|192\.168)\./i
         end
-    
+        
         return remote_ips.first.strip unless remote_ips.empty?
       end
-    
+      
       return @env[Merb::Const::REMOTE_ADDR]
     end
     
@@ -287,126 +349,168 @@ def remote_ip
     # String::
     #   The protocol, i.e. either "https" or "http" depending on the
     #   HTTPS header.
+    # 
+    # @api public
     def protocol
       ssl? ? 'https' : 'http'
     end
     
     # ==== Returns
     # Boolean::: True if the request is an SSL request.
+    # 
+    # @api public
     def ssl?
       @env['HTTPS'] == 'on' || @env['HTTP_X_FORWARDED_PROTO'] == 'https'
     end
     
     # ==== Returns
     # String:: The HTTP referer.
+    # 
+    # @api public
     def referer
       @env['HTTP_REFERER']
     end
     
     # ==== Returns
     # String:: The full URI, including protocol and host
+    # 
+    # @api public
     def full_uri
       protocol + "://" + host + uri
     end
     
     # ==== Returns
     # String:: The request URI.
+    # 
+    # @api public
     def uri
       @env['REQUEST_PATH'] || @env['REQUEST_URI'] || path_info
     end
-
+    
     # ==== Returns
     # String:: The HTTP user agent.
+    # 
+    # @api public
     def user_agent
       @env['HTTP_USER_AGENT']
     end
-
+    
     # ==== Returns
     # String:: The server name.
+    # 
+    # @api public
     def server_name
       @env['SERVER_NAME']
     end
-
+    
     # ==== Returns
     # String:: The accepted encodings.
+    # 
+    # @api private
     def accept_encoding
       @env['HTTP_ACCEPT_ENCODING']
     end
-
+    
     # ==== Returns
     # String:: The script name.
+    # 
+    # @api public
     def script_name
       @env['SCRIPT_NAME']
     end
-
+    
     # ==== Returns
     # String:: HTTP cache control.
+    # 
+    # @api public
     def cache_control
       @env['HTTP_CACHE_CONTROL']
     end
-
+    
     # ==== Returns
     # String:: The accepted language.
+    # 
+    # @api public
     def accept_language
       @env['HTTP_ACCEPT_LANGUAGE']
     end
-
+    
     # ==== Returns
     # String:: The server software.
+    # 
+    # @api public
     def server_software
       @env['SERVER_SOFTWARE']
     end
-
+    
     # ==== Returns
     # String:: Value of HTTP_KEEP_ALIVE.
+    # 
+    # @api public
     def keep_alive
       @env['HTTP_KEEP_ALIVE']
     end
-
+    
     # ==== Returns
     # String:: The accepted character sets.
+    # 
+    # @api public
     def accept_charset
       @env['HTTP_ACCEPT_CHARSET']
     end
-
+    
     # ==== Returns
     # String:: The HTTP version
+    # 
+    # @api private
     def version
       @env['HTTP_VERSION']
     end
-
+    
     # ==== Returns
     # String:: The gateway.
+    # 
+    # @api public
     def gateway
       @env['GATEWAY_INTERFACE']
     end
-
+    
     # ==== Returns
     # String:: The accepted response types. Defaults to "*/*".
+    # 
+    # @api private
     def accept
       @env['HTTP_ACCEPT'].blank? ? "*/*" : @env['HTTP_ACCEPT']
     end
-
+    
     # ==== Returns
     # String:: The HTTP connection.
+    # 
+    # @api private
     def connection
       @env['HTTP_CONNECTION']
     end
-
+    
     # ==== Returns
     # String:: The query string.
+    # 
+    # @api private
     def query_string
       @env['QUERY_STRING']  
     end
-
+    
     # ==== Returns
     # String:: The request content type.
+    # 
+    # @api private
     def content_type
       @env['CONTENT_TYPE']
     end
-
+    
     # ==== Returns
     # Fixnum:: The request content length.
+    # 
+    # @api public
     def content_length
       @content_length ||= @env[Merb::Const::CONTENT_LENGTH].to_i
     end
@@ -415,6 +519,8 @@ def content_length
     # String::
     #   The URI without the query string. Strips trailing "/" and reduces
     #   duplicate "/" to a single "/".
+    # 
+    # @api public
     def path
       path = (uri.empty? ? '/' : uri.split('?').first).squeeze("/")
       path = path[0..-2] if (path[-1] == ?/) && path.size  1
@@ -423,18 +529,24 @@ def path
     
     # ==== Returns
     # String:: The path info.
+    # 
+    # @api public
     def path_info
       @path_info ||= self.class.unescape(@env['PATH_INFO'])
     end
     
     # ==== Returns
     # Fixnum:: The server port.
+    # 
+    # @api public
     def port
       @env['SERVER_PORT'].to_i
     end
     
     # ==== Returns
     # String:: The full hostname including the port.
+    # 
+    # @api public
     def host
       @env['HTTP_X_FORWARDED_HOST'] || @env['HTTP_HOST'] 
     end
@@ -446,6 +558,8 @@ def host
     #
     # ==== Returns
     # Array:: All the subdomain parts of the host.
+    # 
+    # @api public
     def subdomains(tld_length = 1)
       parts = host.split('.')
       parts[0..-(tld_length+2)]
@@ -458,18 +572,24 @@ def subdomains(tld_length = 1)
     #
     # ==== Returns
     # String:: The full domain name without the port number.
+    # 
+    # @api public
     def domain(tld_length = 1)
       host.split('.').last(1 + tld_length).join('.').sub(/:\d+$/,'')
     end
-
+    
     # ==== Returns
     # Value of If-None-Match request header.
+    # 
+    # @api private
     def if_none_match
       @env[Merb::Const::HTTP_IF_NONE_MATCH]
     end
-
+    
     # ==== Returns
     # Value of If-Modified-Since request header.
+    # 
+    # @api private
     def if_modified_since
       if time = @env[Merb::Const::HTTP_IF_MODIFIED_SINCE]
         Time.rfc2822(time)
@@ -497,6 +617,8 @@ class  self
       #     # = "search[page]=10&search[word]=ruby"
       #   params_to_query_string([ "ice-cream", "cake" ], "shopping_list")
       #     # = "shopping_list[]=ice-cream&shopping_list[]=cake"
+      # 
+      # @api private
       def params_to_query_string(value, prefix = nil)
         case value
         when Array
@@ -517,17 +639,21 @@ def params_to_query_string(value, prefix = nil)
       #
       # ==== returns
       # String:: The escaped string.
+      # 
+      # @api private
       def escape(s)
         s.to_s.gsub(/([^ a-zA-Z0-9_.-]+)/n) {
           '%'+$1.unpack('H2'*$1.size).join('%').upcase
         }.tr(' ', '+')
       end
-
+      
       # ==== Parameter
       # sString:: String to URL unescape.
       #
       # ==== returns
       # String:: The unescaped string.
+      # 
+      # @api private
       def unescape(s)
         s.tr('+', ' ').gsub(/((?:%[0-9a-fA-F]{2})+)/n){
           [$1.delete('%')].pack('H*')
@@ -545,6 +671,8 @@ def unescape(s)
       # ==== Examples
       #   query_parse("bar=nik&post[body]=heya")
       #     # = { :bar = "nik", :post = { :body = "heya" } }
+      # 
+      # @api private
       def query_parse(query_string, delimiter = '&;', preserve_order = false)
         query = preserve_order ? Dictionary.new : {}
         for pair in (query_string || '').split(/[#{delimiter}] */n)
@@ -558,13 +686,13 @@ def query_parse(query_string, delimiter = '&;', preserve_order = false)
         end
         preserve_order ? query : query.to_mash
       end
-    
+      
       NAME_REGEX = /Content-Disposition:.* name="?([^\";]*)"?/ni.freeze
       CONTENT_TYPE_REGEX = /Content-Type: (.*)\r\n/ni.freeze
       FILENAME_REGEX = /Content-Disposition:.* filename="?([^\";]*)"?/ni.freeze
       CRLF = "\r\n".freeze
       EOL = CRLF
-
+      
       # ==== Parameters
       # requestIO:: The raw request.
       # boundaryString:: The boundary string.
@@ -575,6 +703,8 @@ def query_parse(query_string, delimiter = '&;', preserve_order = false)
       #
       # ==== Returns
       # Hash:: The parsed request.
+      # 
+      # @api private
       def parse_multipart(request, boundary, content_length)
         boundary = "--#{boundary}"
         paramhsh = {}
@@ -605,19 +735,19 @@ def parse_multipart(request, boundary, content_length)
               filename = head[FILENAME_REGEX, 1]
               content_type = head[CONTENT_TYPE_REGEX, 1]
               name = head[NAME_REGEX, 1]
-            
+              
               if filename && !filename.empty?
                 body = Tempfile.new(:Merb)
                 body.binmode if defined? body.binmode
               end
               next
             end
-          
+            
             # Save the read body part.
             if head && (boundary_size+4  buf.size)
               body  buf.slice!(0, buf.size - (boundary_size+4))
             end
-          
+            
             read_size = bufsize  content_length ? bufsize : content_length
             if( read_size  0 )
               c = input.read(read_size)
@@ -626,15 +756,15 @@ def parse_multipart(request, boundary, content_length)
               content_length -= c.size
             end
           end
-        
+          
           # Save the rest.
           if i = buf.index(rx)
             body  buf.slice!(0, i)
             buf.slice!(0, boundary_size+2)
-          
+            
             content_length = -1  if $1 == "--"
           end
-        
+          
           if filename && !filename.empty?   
             body.rewind
             data = { 
@@ -651,7 +781,7 @@ def parse_multipart(request, boundary, content_length)
         }
         paramhsh
       end
-
+      
       # Converts a query string snippet to a hash and adds it to existing
       # parameters.
       #
@@ -662,6 +792,8 @@ def parse_multipart(request, boundary, content_length)
       #
       # ==== Returns
       # Hash:: Normalized parameters
+      # 
+      # @api private
       def normalize_params(parms, name, val=nil)
         name =~ %r([\[\]]*([^\[\]]+)\]*)
         key = $1 || ''
@@ -687,4 +819,4 @@ def normalize_params(parms, name, val=nil)
       end
     end
   end
-end    
+end</field>
	<field name="commit_file_name">router.rb</field>
	<field name="commit_diff">@@ -6,19 +6,19 @@
 module Merb
   # Router stores route definitions and finds the first
   # route that matches the incoming request URL.
-  #
+  # 
   # Then information from route is used by dispatcher to
   # call action on the controller.
-  #
+  # 
   # ==== Routes compilation.
-  #
+  # 
   # The most interesting method of Router (and heart of
   # route matching machinery) is match method generated
   # on the fly from routes definitions. It is called routes
   # compilation. Generated match method body contains
   # one if/elsif statement that picks the first matching route
   # definition and sets values to named parameters of the route.
-  #
+  # 
   # Compilation is synchronized by mutex.
   class Router
     @routes          = []
@@ -26,14 +26,14 @@ class Router
     @resource_routes = {}
     @compiler_mutex  = Mutex.new
     @root_behavior   = Behavior.new.defaults(:action = "index")
-
+    
     # Raised when route lookup fails.
     class RouteNotFound  StandardError; end;
     # Raised when parameters given to generation
     # method do not match route parameters.
     class GenerationError  StandardError; end;
     class NotCompiledError  StandardError; end;
-
+    
     class  self
       # @private
       attr_accessor :routes, :named_routes, :resource_routes, :root_behavior
@@ -41,19 +41,20 @@ class  self
       # Creates a route building context and evaluates the block in it. A
       # copy of +root_behavior+ (and instance of Behavior) is copied as
       # the context.
-      #
+      # 
       # ==== Parameters
       # firstArray::
       #   An array containing routes that should be prepended to the routes
       #   defined in the block.
-      #
       # lastArray::
       #   An array containing routes that should be appended to the routes
       #   defined in the block.
-      #
+      # 
       # ==== Returns
       # Merb::Router::
       #   Returns self to allow chaining of methods.
+      # 
+      # @api public
       def prepare(first = [], last = [], &block)
         @routes = []
         root_behavior._with_proxy(&block)
@@ -63,17 +64,23 @@ def prepare(first = [], last = [], &block)
       end
       
       # Appends route in the block to routing table.
+      # 
+      # @api public
       def append(&block)
         prepare(routes, [], &block)
       end
-
+      
       # Prepends routes in the block to routing table.
+      # 
+      # @api public
       def prepend(&block)
         prepare([], routes, &block)
       end
       
       # Clears the routing table. Route generation and request matching
       # won't work anymore until a new routing table is built.
+      # 
+      # @api private
       def reset!
         class  self
           alias_method :match, :match_before_compilation
@@ -84,18 +91,16 @@ class  self
       # Finds route matching URI of the request and returns a tuple of
       # [route index, route params]. This method is called by the
       # dispatcher and isn't as useful in applications.
-      #
+      # 
       # ==== Parameters
       # requestMerb::Request:: request to match.
-      #
+      # 
       # ==== Returns
-      # Array(Integer, Hash)::
-      #   Two-tuple: route index and route parameters. Route
-      #   parameters are :controller, :action and all the named
-      #   segments of the route.
-      #
-      # ---
-      # @private
+      # Array[Integer, Hash]::
+      #   Two-tuple: route index and route parameters. Route parameters
+      #   are :controller, :action and all the named segments of the route.
+      # 
+      # @api private
       def route_for(request) #:nodoc:
         index, params = match(request)
         route = routes[index] if index
@@ -105,43 +110,85 @@ def route_for(request) #:nodoc:
         end
         [route, params]
       end
-
-      # Just a placeholder for the compiled match method
+      
+      # A placeholder for the compiled match method.
+      # 
+      # ==== Notes
+      # This method is aliased as +match+ but this method gets overridden with
+      # the actual +match+ method (generated from the routes definitions) after
+      # being compiled. This method is only ever called before routes are
+      # compiled.
+      # 
+      # ==== Raises
+      # NotCompiledError:: routes have not been compiled yet.
+      # 
+      # @api private
       def match_before_compilation(request) #:nodoc:
         raise NotCompiledError, "The routes have not been compiled yet"
       end
-
+      
       alias_method :match, :match_before_compilation
       
-      # Generates a URL from the params
+      # There are three possible ways to use this method.  First, if you have a named route, 
+      # you can specify the route as the first parameter as a symbol and any paramters in a 
+      # hash.  Second, you can generate the default route by just passing the params hash, 
+      # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+      # allows you to specify the parameters to a named route in the order they appear in the 
+      # router.  
       #
-      # ==== Parameters
-      # nameSymbol::
-      #   The name of the route to generate
+      # ==== Parameters(Named Route)
+      # nameSymbol:: 
+      #   The name of the route. 
+      # argsHash:: 
+      #   Parameters for the route generation.
       #
-      # anonymous_paramsObject::
+      # ==== Parameters(Default Route)
+      # argsHash:: 
+      #   Parameters for the route generation.  This route will use the default route. 
+      #
+      # ==== Parameters(Anonymous Parameters)
+      # nameSymbol::
+      #   The name of the route.  
+      # argsArray:: 
       #   An array of anonymous parameters to generate the route
       #   with. These parameters are assigned to the route parameters
       #   in the order that they are passed.
       #
-      # paramsHash::
-      #   Named parameters to generate the route with.
-      #
-      # defaultsHash::
-      #   A hash of default parameters to generate the route with.
-      #   This is usually the request parameters. If there are any
-      #   required params that are missing to generate the route,
-      #   they are pulled from this hash.
       # ==== Returns
-      # String:: The generated URL
-      # ---
-      # @private
+      # String:: The generated URL.
+      #
+      # ==== Examples
+      # Named Route
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, :title = "new_article")
+      #
+      # Default Route
+      #
+      # Merb::Router.prepare do
+      #   default_routes
+      # end
+      #
+      # url(:controller = "articles", :action = "new")
+      #
+      # Anonymous Paramters
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, 2008, 10, "test_article")
+      #
+      # @api private
       def url(name, *args)
         unless name.is_a?(Symbol)
           args.unshift(name)
           name = :default
         end
-
+        
         unless route = Merb::Router.named_routes[name]
           raise Merb::Router::GenerationError, "Named route not found: #{name}"
         end
@@ -152,25 +199,25 @@ def url(name, *args)
       end
       
       # Generates a URL from the resource(s)
-      #
+      # 
       # ==== Parameters
       # resourcesSymbol,Object::
       #   The identifiers for the resource route to generate. These
       #   can either be symbols or objects. Symbols denote resource
       #   collection routes and objects denote the members.
-      #
+      # 
       # paramsHash::
       #   Any extra parameters needed to generate the route.
       # ==== Returns
       # String:: The generated URL
-      # ---
-      # @private
+      # 
+      # @api private
       def resource(*args)
         defaults = args.pop
         options  = extract_options_from_args!(args) || {}
         key      = []
         params   = []
-
+        
         args.each do |arg|
           if arg.is_a?(Symbol) || arg.is_a?(String)
             key  arg.to_s
@@ -179,19 +226,21 @@ def resource(*args)
             params  arg
           end
         end
-
+        
         params  options
-
+        
         unless route = Merb::Router.resource_routes[key]
           raise Merb::Router::GenerationError, "Resource route not found: #{args.inspect}"
         end
-
+        
         route.generate(params, defaults)
       end
-
-    private
-    
-      # Defines method with a switch statement that does routes recognition.
+      
+      private
+      
+      # Compiles the routes and creates the +match+ method.
+      # 
+      # @api private
       def compile
         if routes.any?
           eval(compiled_statement, binding, "Generated Code for Router", 1)
@@ -199,18 +248,21 @@ def compile
           reset!
         end
       end
-
-      # Generates method that does route recognition with a switch statement.
+      
+      # Generates the method for evaluation defining a +match+ method to match
+      # a request with the defined routes.
+      # 
+      # @api private
       def compiled_statement
         @compiler_mutex.synchronize do
           condition_keys, if_statements = Set.new, ""
-
+          
           routes.each_with_index do |route, i|
             route.freeze
             route.conditions.keys.each { |key| condition_keys  key }
             if_statements  route.compiled_statement(i == 0)
           end
-
+          
           statement =  "def match(request)\n"
           statement  condition_keys.inject("") do |cached, key|
             cached  "  cached_#{key} = request.#{key}.to_s\n"
@@ -222,7 +274,7 @@ def compiled_statement
           statement  "end"
         end
       end
-
+      
     end # class  self
   end
 end</field>
	<field name="commit_file_name">behavior.rb</field>
	<field name="commit_diff">@@ -3,31 +3,51 @@ module Merb
   class Router
     
     class Behavior
-
-      class Error  StandardError; end;
+      
+      class Error  StandardError; end
       
       # Proxy catches any methods and proxies them to the current behavior.
       # This allows building routes without constantly having to catching the
       # yielded behavior object
-      # ---
-      # @private
-      class Proxy #:nodoc:
+      # 
+      # @api private
+      class Proxy
+        
         # Undefine as many methods as possible so that everything can be proxied
         # along to the behavior
         instance_methods.each { |m| undef_method m unless %w[ __id__ __send__ class kind_of? respond_to? assert_kind_of should should_not instance_variable_set instance_variable_get instance_eval].include?(m) }
         
+        # @api private
         def initialize
           @behaviors = []
         end
         
+        # Puts a behavior on the bottom of the stack.
+        # 
+        # ==== Notes
+        # The behaviors keep track of nested scopes.
+        # 
+        # @api private
         def push(behavior)
           @behaviors.push(behavior)
         end
         
+        # Removes the top-most behavior.
+        # 
+        # ==== Notes
+        # This occurs at the end of a nested scope (namespace, etc).
+        # 
+        # @api private
         def pop
           @behaviors.pop
         end
         
+        # Tests whether the top-most behavior responds to the arguments.
+        # 
+        # ==== Notes
+        # Behaviors contain the actual functionality of the proxy.
+        # 
+        # @api private
         def respond_to?(*args)
           super || @behaviors.last.respond_to?(*args)
         end
@@ -35,7 +55,7 @@ def respond_to?(*args)
         # Rake does some stuff with methods in the global namespace, so if I don't
         # explicitly define the Behavior methods to proxy here (specifically namespace)
         # Rake's methods take precedence.
-        # ---
+        # 
         # Removing the following:
         # name full_name fixatable redirect
         %w(
@@ -49,25 +69,86 @@ def #{method}(*args, &block)
           }
         end
         
-        # --- These methods are to be used in defer_to blocks
+        # == These methods are to be used in defer_to blocks
         
-        # Generates a URL from the passed arguments. This method is for use
-        # inside of defer_to 
+        # There are three possible ways to use this method.  First, if you have a named route, 
+        # you can specify the route as the first parameter as a symbol and any paramters in a 
+        # hash.  Second, you can generate the default route by just passing the params hash, 
+        # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+        # allows you to specify the parameters to a named route in the order they appear in the 
+        # router.  
+        #
+        # ==== Parameters(Named Route)
+        # nameSymbol:: 
+        #   The name of the route. 
+        # argsHash:: 
+        #   Parameters for the route generation.
+        #
+        # ==== Parameters(Default Route)
+        # argsHash:: 
+        #   Parameters for the route generation.  This route will use the default route. 
+        #
+        # ==== Parameters(Anonymous Parameters)
+        # nameSymbol::
+        #   The name of the route.  
+        # argsArray:: 
+        #   An array of anonymous parameters to generate the route
+        #   with. These parameters are assigned to the route parameters
+        #   in the order that they are passed.
+        #
+        # ==== Returns
+        # String:: The generated URL.
+        #
+        # ==== Examples
+        # Named Route
+        #
+        # Merb::Router.prepare do
+        #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+        # end
+        #
+        # url(:articles, :title = "new_article")
+        #
+        # Default Route
+        #
+        # Merb::Router.prepare do
+        #   default_routes
+        # end
+        #
+        # url(:controller = "articles", :action = "new")
+        #
+        # Anonymous Paramters
+        #
+        # Merb::Router.prepare do
+        #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+        # end
+        #
+        # url(:articles, 2008, 10, "test_article")
+        #
+        # @api public
         def url(name, *args)
           args  {}
           Merb::Router.url(name, *args)
         end
         
+        # Generates a Rack redirection response.
+        # 
+        # ==== Notes
+        # Refer to Merb::Rack::Helpers.redirect for documentation.
+        # 
+        # @api public
         def redirect(url, opts = {})
           Merb::Rack::Helpers.redirect(url, opts)
         end
         
-        def route(params)
-          params
-        end
+        private
         
-      private
-      
+        # Proxies the method calls to the behavior.
+        # 
+        # ==== Notes
+        # Please refer to:
+        # http://ruby-doc.org/core/classes/Kernel.html#M005951
+        # 
+        # @api private
         def method_missing(method, *args, &block)
           behavior = @behaviors.last
           
@@ -78,14 +159,14 @@ def method_missing(method, *args, &block)
           end
         end
       end
-
+      
       # Behavior objects are used for the Route building DSL. Each object keeps
       # track of the current definitions for the level at which it is defined.
       # Each time a method is called on a Behavior object that accepts a block,
       # a new instance of the Behavior class is created.
-      #
+      # 
       # ==== Parameters
-      #
+      # 
       # proxyProxy::
       #   This is the object initialized by Merb::Router.prepare that tracks the
       #   current Behavior object stack so that Behavior methods can be called
@@ -100,11 +181,11 @@ def method_missing(method, *args, &block)
       #   The initial route options. See #options.
       # blocksArray::
       #   The stack of deferred routing blocks for the route
-      #
+      # 
       # ==== Returns
       # Behavior:: The initialized Behavior object
-      #---
-      # @private
+      # 
+      # @api private
       def initialize(proxy = nil, conditions = {}, params = {}, defaults = {}, identifiers = {}, options = {}, blocks = []) #:nodoc:
         @proxy       = proxy
         @conditions  = conditions
@@ -113,130 +194,129 @@ def initialize(proxy = nil, conditions = {}, params = {}, defaults = {}, identif
         @identifiers = identifiers
         @options     = options
         @blocks      = blocks
-
+        
         stringify_condition_values
       end
-
+      
       # Defines the +conditions+ that are required to match a Request. Each
       # +condition+ is applied to a method of the Request object. Conditions
       # can also be applied to segments of the +path+.
-      #
+      # 
       # If #match is passed a block, it will create a new route scope with
       # the conditions passed to it and yield to the block such that all
       # routes that are defined in the block have the conditions applied
       # to them.
-      #
+      # 
       # ==== Parameters
-      #
+      # 
       # pathString, Regexp::
       #   The pattern against which Merb::Request path is matched.
-      #
+      # 
       #   When +path+ is a String, any substring that is wrapped in parenthesis
       #   is considered optional and any segment that begins with a colon, ex.:
       #   ":login", defines both a capture and a named param. Extra conditions
       #   can then be applied each named param individually.
-      #
+      # 
       #   When +path+ is a Regexp, the pattern is left untouched and the
       #   Merb::Request path is matched against it as is.
       #
       #   +path+ is optional.
-      #
+      # 
       # conditionsHash::
       #   Additional conditions that the request must meet in order to match.
       #   The keys must be the names of previously defined path segments or
       #   be methods that the Merb::Request instance will respond to.  The
       #   value is the string or regexp that matched the returned value.
       #   Conditions are inherited by child routes.
-      #
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the conditions
       #   defined by the #match method.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: +optional+ - The match behavior object.
-      #
+      # 
       # ==== Returns
       # Behavior::
       #   A new instance of Behavior with the specified path and conditions.
-      #
+      # 
       # +Tip+: When nesting always make sure the most inner sub-match registers
-      # a Route and doesn't just returns new Behaviors.
-      #
+      # a Route and doesn't just return new Behaviors.
+      # 
       # ==== Examples
-      #
+      # 
       #   # registers /foo/bar to controller = "foo", :action = "bar"
       #   # and /foo/baz to controller = "foo", :action = "baz"
       #   match("/foo") do
       #     match("/bar").to(:controller = "foo", :action = "bar")
       #     match("/baz").to(:controller = "foo", :action = "caz")
       #   end
-      #
+      # 
       #   # Checks the format of the segments against the specified Regexp
       #   match("/:string/:number", :string = /[a-z]+/, :number = /\d+/).
       #     to(:controller = "string_or_numbers")
-      #
+      # 
       #   # Equivalent to the default_route
       #   match("/:controller(/:action(:id))(.:format)").register
-      #
+      # 
       #   #match only if the browser string contains MSIE or Gecko
       #   match("/foo", :user_agent = /(MSIE|Gecko)/ )
       #        .to(:controller = 'foo', :action = 'popular')
-      #
+      # 
       #   # Route GET and POST requests to different actions (see also #resources)
       #   r.match('/foo', :method = :get).to(:action = 'show')
       #   r.match('/foo', :method = :post).to(:action = 'create')
-      #
+      # 
       #   # match also takes regular expressions
-      #
+      # 
       #   r.match(%r[/account/([a-z]{4,6})]).to(:controller = "account",
       #      :action = "show", :id = "[1]")
-      #
+      # 
       #   r.match(%r{/?(en|es|fr|be|nl)?}).to(:language = "[1]") do
       #     match("/guides/:action/:id").to(:controller = "tour_guides")
       #   end
-      #---
-      # @public
+      # 
+      # @api public
       def match(path = {}, conditions = {}, &block)
         path, conditions = path[:path], path if path.is_a?(Hash)
-
-        raise Error, "The route has already been committed. Further conditions cannot be specified" if @route
         
+        raise Error, "The route has already been committed. Further conditions cannot be specified" if @route
         
         conditions.delete_if { |k, v| v.nil? }
         conditions[:path] = merge_paths(path)
-
+        
         behavior = Behavior.new(@proxy, @conditions.merge(conditions), @params, @defaults, @identifiers, @options, @blocks)
         with_behavior_context(behavior, &block)
       end
       
       # Creates a Route from one or more Behavior objects, unless a +block+ is
       # passed in.
-      #
+      # 
       # ==== Parameters
       # paramsHash:: The parameters the route maps to.
-      #
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the params
       #   defined by the #to method.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: +optional+ - The to behavior object.
-      #
+      # 
       # ==== Returns
       # Route:: It registers a new route and returns it.
-      #
+      # 
       # ==== Examples
       #   match('/:controller/:id).to(:action = 'show')
-      #
+      # 
       #   to(:controller = 'simple') do
       #     match('/test').to(:action = 'index')
       #     match('/other').to(:action = 'other')
       #   end
-      #---
-      # @public
+      # 
+      # @api public
       def to(params = {}, &block)
         raise Error, "The route has already been committed. Further params cannot be specified" if @route
-
+        
         behavior = Behavior.new(@proxy, @conditions, @params.merge(params), @defaults, @identifiers, @options, @blocks)
         
         if block_given?
@@ -247,7 +327,8 @@ def to(params = {}, &block)
       end
       
       # Equivalent of #to. Allows for some nicer syntax when scoping blocks
-      # --- Ex:
+      # 
+      # ==== Examples
       # Merb::Router.prepare do
       #   with(:controller = "users") do
       #     match("/signup").to(:action = "signup")
@@ -255,32 +336,32 @@ def to(params = {}, &block)
       #     match("/logout").to(:action = "logout")
       #   end
       # end
-      alias_method :with, :to
+      alias :with :to
       
       # Equivalent of #to. Allows for nicer syntax when registering routes with no params
-      # --- Ex:
+      # 
+      # ==== Examples
       # Merb::Router.prepare do
       #   match("/:controller(/:action(/:id))(.:format)").register
       # end
-      #
-      alias_method :register, :to
+      alias :register :to
       
       # Sets default values for route parameters. If no value for the key
       # can be extracted from the request, then the value provided here
       # will be used.
-      #
+      # 
       # ==== Parameters
       # defaultsHash::
       #   The default values for named segments.
-      #
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the defaults defined
       #   by the #default method.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: +optional+ - The defaults behavior object.
-      # ---
-      # @public
+      # 
+      # @api public
       def default(defaults = {}, &block)
         behavior = Behavior.new(@proxy, @conditions, @params, @defaults.merge(defaults), @identifiers, @options, @blocks)
         with_behavior_context(behavior, &block)
@@ -289,34 +370,34 @@ def default(defaults = {}, &block)
       alias_method :defaults, :default
       
       # Allows the fine tuning of certain router options.
-      #
+      # 
       # ==== Parameters
       # optionsHash::
       #   The options to set for all routes defined in the scope. The currently
       #   supported options are:
       #   * :controller_prefix - The module that the controller is included in.
       #   * :name_prefix       - The prefix added to all routes named with #name
-      #
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the options defined
       #   by the #options method.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: The options behavior object. This is optional
-      #
+      # 
       # ==== Examples
       #   # If :group is not matched in the path, it will be "registered" instead
       #   # of nil.
       #   match("/users(/:group)").default(:group = "registered")
-      # ---
-      # @public
+      # 
+      # @api public
       def options(opts = {}, &block)
         options = @options.dup
-
+        
         opts.each_pair do |key, value|
           options[key] = (options[key] || []) + [value.freeze] if value
         end
-
+        
         behavior = Behavior.new(@proxy, @conditions, @params, @defaults, @identifiers, options, @blocks)
         with_behavior_context(behavior, &block)
       end
@@ -325,44 +406,47 @@ def options(opts = {}, &block)
       
       # Creates a namespace for a route. This way you can have logical
       # separation to your routes.
-      #
+      # 
       # ==== Parameters
       # name_or_pathString, Symbol::
       #   The name or path of the namespace.
-      #
+      # 
       # optionsHash::
-      #   Optional hash, set :path if you want to override what appears on the url
-      #
+      #   Optional hash (see below)
+      # 
       # &block::
       #   All routes defined in the block will be scoped to the namespace defined
       #   by the #namespace method.
-      #
+      # 
+      # ==== Options (opts)
+      # :pathString:: match against this url
+      # 
       # ==== Block parameters
       # rBehavior:: The namespace behavior object. This is optional
-      #
+      # 
       # ==== Examples
       #   namespace :admin do
       #     resources :accounts
       #     resource :email
       #   end
-      #
+      # 
       #   # /super_admin/accounts
       #   namespace(:admin, :path="super_admin") do
       #     resources :accounts
       #   end
-      # ---
-      # @public
+      # 
+      # @api public
       def namespace(name_or_path, opts = {}, &block)
         name = name_or_path.to_s # We don't want this modified ever
         path = opts.has_key?(:path) ? opts[:path] : name
-
+        
         raise Error, "The route has already been committed. Further options cannot be specified" if @route
-
+        
         # option keys could be nil
         opts[:controller_prefix] = name unless opts.has_key?(:controller_prefix)
         opts[:name_prefix]       = name unless opts.has_key?(:name_prefix)
         opts[:resource_prefix]   = opts[:name_prefix] unless opts.has_key?(:resource_prefix)
-
+        
         behavior = self
         behavior = behavior.match("/#{path}") unless path.nil? || path.empty?
         behavior.options(opts, &block)
@@ -372,22 +456,22 @@ def namespace(name_or_path, opts = {}, &block)
       # insertion into a route. This is useful when using models and want a
       # specific method to be called on it (For example, for ActiveRecord::Base
       # it would be #to_param).
-      #
+      # 
       # The default method called on objects is #to_s.
-      #
+      # 
       # ==== Paramters
       # identifiersHash::
       #   The keys are Classes and the values are the method that instances of the specified
       #   class should have called on.
-      #
+      # 
       # &block::
       #   All routes defined in the block will be call the specified methods during
       #   generation.
-      #
+      # 
       # ==== Block parameters
       # rBehavior:: The identify behavior object. This is optional
-      # ---
-      # @public
+      # 
+      # @api public
       def identify(identifiers = {}, &block)
         identifiers = if Hash === identifiers
           @identifiers.merge(identifiers)
@@ -402,23 +486,23 @@ def identify(identifiers = {}, &block)
       # Creates the most common routes /:controller/:action/:id.format when
       # called with no arguments. You can pass a hash or a block to add parameters
       # or override the default behavior.
-      #
+      # 
       # ==== Parameters
       # paramsHash::
       #   This optional hash can be used to augment the default settings
-      #
+      # 
       # &block::
       #   When passing a block a new behavior is yielded and more refinement is
       #   possible.
-      #
+      # 
       # ==== Returns
       # Route:: the default route
-      #
+      # 
       # ==== Examples
-      #
+      # 
       #   # Passing an extra parameter "mode" to all matches
       #   r.default_routes :mode = "default"
-      #
+      # 
       #   # specifying exceptions within a block
       #   r.default_routes do |nr|
       #     nr.defer_to do |request, params|
@@ -426,31 +510,31 @@ def identify(identifiers = {}, &block)
       #         :action = "new") if request.env["REQUEST_URI"] =~ /\/private\//
       #     end
       #   end
-      #---
-      # @public
+      # 
+      # @api public
       def default_routes(params = {}, &block)
         match("/:controller(/:action(/:id))(.:format)").to(params, &block).name(:default)
       end
       
       # Takes a block and stores it for deferred conditional routes. The block
       # takes the +request+ object and the +params+ hash as parameters.
-      #
+      # 
       # ==== Parameters
       # paramsHash:: Parameters and conditions associated with this behavior.
       # &conditional_block::
       #   A block with the conditions to be met for the behavior to take
       #   effect.
-      #
+      # 
       # ==== Returns
       # Route :: The default route.
-      #
+      # 
       # ==== Examples
       #   defer_to do |request, params|
       #     params.merge :controller = 'here',
       #       :action = 'there' if request.xhr?
       #   end
-      #---
-      # @public
+      # 
+      # @api public
       def defer_to(params = {}, &block)
         defer(block).to(params)
       end
@@ -458,27 +542,39 @@ def defer_to(params = {}, &block)
       # Takes a Proc as a parameter and applies it as a deferred proc for all the
       # routes defined in the block. This is mostly interesting for plugin
       # developers.
+      # 
+      # ==== Examples
+      #   defered_block = proc do |r, p|
+      #     p.merge :controller = 'api/comments' if request.xhr?
+      #   end
+      #   defer(defered_block) do
+      #     resources :comments
+      #   end
+      # 
+      # @api public
       def defer(deferred_block, &block)
         blocks = @blocks + [CachedProc.new(deferred_block)]
         behavior = Behavior.new(@proxy, @conditions, @params, @defaults, @identifiers, @options, blocks)
         with_behavior_context(behavior, &block)
       end
       
-      # Names this route in Router. Name must be a Symbol.
-      #
+      # Registers the route as a named route with the name given.
+      # 
       # ==== Parameters
-      # symbolSymbol:: The name of the route.
-      #
+      # symbolSymbol:: the name of the route.
+      # 
       # ==== Raises
       # ArgumentError:: symbol is not a Symbol.
+      # 
+      # @api public
       def name(prefix, name = nil)
         unless name
           name, prefix = prefix, nil
         end
-
+        
         full_name([prefix, @options[:name_prefix], name].flatten.compact.join('_'))
       end
-
+      
       # Names this route in Router. Name must be a Symbol. The current
       # name_prefix is ignored.
       #
@@ -487,6 +583,8 @@ def name(prefix, name = nil)
       #
       # ==== Raises
       # ArgumentError:: symbol is not a Symbol.
+      # 
+      # @api private
       def full_name(name)
         if @route
           @route.name = name
@@ -496,27 +594,34 @@ def full_name(name)
         end
       end
       
+      # Specifies that a route can be fixatable.
+      # 
       # ==== Parameters
       # enabledBoolean:: True enables fixation on the route.
+      # 
+      # @api public
       def fixatable(enable = true)
         @route.fixation = enable
         self
       end
-
-      # Sets the current route as a redirect.
-      #
+      
+      # Redirects the current route.
+      # 
       # ==== Parameters
-      # pathString::
-      #   The path to redirect to
-      #
+      # pathString:: The path to redirect to.
+      # 
       # optionsHash::
-      #   Options for the redirect
-      #   The supported options are:
-      #   * :permanent: Whether or not the redirect should be permanent.
-      #                 The default value is false.
+      #   Options (see below)
+      # 
+      # ==== Options (opts)
+      # :permanentBoolean::
+      #   Whether or not the redirect should be permanent.
+      #   The default value is false.
+      # 
+      # @api public
       def redirect(url, opts = {})
         raise Error, "The route has already been committed." if @route
-
+        
         status = opts[:permanent] ? 301 : 302
         @route = Route.new(@conditions, {:url = url.freeze, :status = status.freeze}, @blocks, :redirects = true)
         @route.register
@@ -529,6 +634,8 @@ def redirect(url, opts = {})
       # it doesn't affect how/which routes are added.
       #
       # &block:: A context in which routes are generated.
+      # 
+      # @api public
       def capture(&block)
         captured_routes = {}
         name_prefix     = [@options[:name_prefix]].flatten.compact.map { |p| "#{p}_"}
@@ -545,27 +652,42 @@ def capture(&block)
         captured_routes
       end
       
-      # So that Router can have a default route
-      # ---
-      # @private
-      def _with_proxy(&block) #:nodoc:
+      # Proxy routes with the default behaviors.
+      # 
+      # ==== Parameters
+      # &block:: defines routes within the provided context.
+      # 
+      # @api private
+      def _with_proxy(&block)
         proxy = Proxy.new
         proxy.push Behavior.new(proxy, @conditions, @params, @defaults, @identifiers, @options, @blocks)
         proxy.instance_eval(&block)
         proxy
       end
       
-    protected
-    
+      protected
+      
+      # Returns the current route.
+      # 
+      # ==== Returns
+      # Route:: the route.
+      # 
+      # @api private
       def _route
         @route
       end
       
-      def to_route # :nodoc:
+      # Turns a route definition into a Route object.
+      # 
+      # ==== Returns
+      # Route:: the route generated.
+      # 
+      # @api private
+      def to_route
         raise Error, "The route has already been committed." if @route
-
+        
         controller = @params[:controller]
-
+        
         if prefixes = @options[:controller_prefix]
           controller ||= ":controller"
           
@@ -594,12 +716,22 @@ def to_route # :nodoc:
       
       # Allows to insert the route at a certain spot in the list of routes
       # instead of appending to the list.
-      def before(route, &block) #:nodoc:
+      # 
+      # ==== Params
+      # routeRoute:: the route to insert before.
+      # &block:: the route definition to insert.
+      # 
+      # @api plugin
+      def before(route, &block)
         options(:before = route, &block)
       end
-
-    private
-    
+      
+      private
+      
+      # Takes @conditions and turns values into strings (except for Regexp and
+      # Array values).
+      # 
+      # @api private
       def stringify_condition_values # :nodoc:
         @conditions.each do |key, value|
           unless value.nil? || Regexp === value || Array === value
@@ -607,7 +739,18 @@ def stringify_condition_values # :nodoc:
           end
         end
       end
-    
+      
+      # Creates a new context with a given behavior for the route definition in
+      # the block.
+      # 
+      # ==== Params
+      # behaviorBehavior:: the behavior to proxy the calls in the block.
+      # &block:: the routing definitions to be nested within the behavior.
+      # 
+      # ==== Returns
+      # Behavior:: the behavior wrapping.
+      # 
+      # @api private
       def with_behavior_context(behavior, &block) # :nodoc:
         if block_given?
           @proxy.push(behavior)
@@ -616,11 +759,25 @@ def with_behavior_context(behavior, &block) # :nodoc:
         end
         behavior
       end
-
+      
+      # Merges the path elements together into an array to be joined for
+      # generating named routes.
+      # 
+      # ==== Parameters
+      # pathString:: the path to merge at the end.
+      # 
+      # ==== Returns
+      # Array:: array of path elements.
+      # 
+      # ==== Notes
+      # An array of ['a', 'b'] (the 'a' namespace with the 'b' action) will
+      # produce a name of :a_b.
+      # 
+      # @api private
       def merge_paths(path) # :nodoc:
         [@conditions[:path], path.freeze].flatten.compact
       end
-
+      
     end
   end
 end
\ No newline at end of file</field>
	<field name="commit_file_name">session.rb</field>
	<field name="commit_diff">@@ -6,6 +6,8 @@ class Config
     # Returns stores list constructed from
     # configured session stores (:session_stores config option)
     # or default one (:session_store config option).
+    # 
+    # @api private
     def self.session_stores
       @session_stores ||= begin
         config_stores = Array(
@@ -15,7 +17,7 @@ def self.session_stores
       end
     end
   end # Config
-
+  
   # The Merb::Session module gets mixed into Merb::SessionContainer to allow
   # app-level functionality (usually found in app/models/merb/session.rb) for
   # session.
@@ -23,35 +25,37 @@ def self.session_stores
   # You can use this module to implement additional methods to simplify
   # building wizard-like application components,
   # authentication frameworks, etc.
+  # 
+  # Session configuration options:
+  #
+  # :session_id_key           The key by which a session value/id is
+  #                           retrieved; defaults to _session_id
+  #
+  # :session_expiry           When to expire the session cookie;
+  #                           defaults to 2 weeks
+  #
+  # :session_secret_key       A secret string which is used to sign/validate
+  #                           session data; min. 16 chars
+  #
+  # :default_cookie_domain    The default domain to write cookies for.
   module Session
   end
-
+  
   # This is mixed into Merb::Controller on framework boot.
   module SessionMixin
     # Raised when no suitable session store has been setup.
     class NoSessionContainer  StandardError; end
-
+    
     # Raised when storing more data than the available space reserved.
     class SessionOverflow  StandardError; end
-
-    # Session configuration options:
-    #
-    # :session_id_key           The key by which a session value/id is
-    #                           retrieved; defaults to _session_id
-    #
-    # :session_expiry           When to expire the session cookie;
-    #                           defaults to 2 weeks
-    #
-    # :session_secret_key       A secret string which is used to sign/validate
-    #                           session data; min. 16 chars
-    #
-    # :default_cookie_domain    The default domain to write cookies for.
+    
+    # @api private
     def self.included(base)
       # Register a callback to finalize sessions - needs to run before the cookie
       # callback extracts Set-Cookie headers from request.cookies.
       base._after_dispatch_callbacks.unshift lambda { |c| c.request.finalize_session }
     end
-
+    
     # ==== Parameters
     # session_storeString:: The type of session store to access.
     #
@@ -60,9 +64,9 @@ def self.included(base)
     def session(session_store = nil)
       request.session(session_store)
     end
-
+    
     # Module methods
-
+    
     # ==== Returns
     # String:: A random 32 character string for use as a unique session ID.
     def rand_uuid
@@ -77,59 +81,76 @@ def rand_uuid
       ]
       "%04x%04x%04x%04x%04x%06x%06x" % values
     end
-
+    
     # Marks this session as needing a new cookie.
+    # 
+    # @api private
     def needs_new_cookie!
       @_new_cookie = true
     end
-
+    
+    # Does session need new cookie?
+    # 
+    # ==== Returns
+    # Boolean:: true if a new cookie is needed, false otherwise.
+    # 
+    # @api private
     def needs_new_cookie?
       @_new_cookie
     end
-
+    
     module_function :rand_uuid, :needs_new_cookie!, :needs_new_cookie?
-
+    
     module RequestMixin
-
+      
+      # Adds class methods to Merb::Request object.
+      # Sets up repository of session store types.
+      # Sets the session ID key and expiry values.
       def self.included(base)
         base.extend ClassMethods
-
+        
         # Keep track of all known session store types.
         base.cattr_accessor :registered_session_types
         base.registered_session_types = Dictionary.new
         base.class_inheritable_accessor :_session_id_key, :_session_secret_key,
                                         :_session_expiry
-
+        
         base._session_id_key        = Merb::Config[:session_id_key] || '_session_id'
         base._session_expiry        = Merb::Config[:session_expiry] || 0
         base._session_secret_key    = Merb::Config[:session_secret_key]
       end
-
+      
       module ClassMethods
-
+        
         # ==== Parameters
         # name~to_sym:: Name of the session type to register.
         # class_nameString:: The corresponding class name.
         #
         # === Notres
         # This is automatically called when Merb::SessionContainer is subclassed.
+        # 
+        # @api private
         def register_session_type(name, class_name)
           self.registered_session_types[name.to_sym] = class_name
         end
-
+        
       end
-
+      
       # The default session store type.
+      # 
+      # @api private
       def default_session_store
         Merb::Config[:session_store] && Merb::Config[:session_store].to_sym
       end
-
+      
       # ==== Returns
       # Hash:: All active session stores by type.
+      # 
+      # @api private
       def session_stores
         @session_stores ||= {}
       end
-
+      
       # Returns session container. Merb is able to handle multiple session
       # stores, hence a parameter to pick it.
       #
@@ -140,6 +161,12 @@ def session_stores
       # === Notes
       # If no suitable session store type is given, it defaults to
       # cookie-based sessions.
+      # 
+      # ==== Returns
+      # SessionContainer::
+      #   an instance of a session store extending Merb::SessionContainer.
+      # 
+      # @api public
       def session(session_store = nil)
         session_store ||= default_session_store
         if class_name = self.class.registered_session_types[session_store]
@@ -154,12 +181,14 @@ def session(session_store = nil)
           raise NoSessionContainer, msg            
         end
       end
-
+      
       # ==== Parameters
       # new_sessionMerb::SessionContainer:: A session store instance.
       #
       # === Notes
       # The session is assigned internally by its session_store_type key.
+      # 
+      # @api private
       def session=(new_session)
         if self.session?(new_session.class.session_store_type)
           original_session_id = self.session(new_session.class.session_store_type).session_id
@@ -169,21 +198,30 @@ def session=(new_session)
         end
         session_stores[new_session.class.session_store_type] = new_session
       end
-
+      
       # Whether a session has been setup
+      # 
+      # ==== Returns
+      # Boolean:: true if the session is part of the session stores configured.
+      # 
+      # @api private
       def session?(session_store = nil)
         (session_store ? [session_store] : session_stores).any? do |type, store|
           store.is_a?(Merb::SessionContainer)
         end
       end
-
+      
       # Teardown and/or persist the current sessions.
+      # 
+      # @api private
       def finalize_session
         session_stores.each { |name, store| store.finalize(self) }
       end
       alias :finalize_sessions :finalize_session
-
+      
       # Assign default cookie values
+      # 
+      # @api private
       def default_cookies
         defaults = {}
         if route && route.allow_fixation? && params.key?(_session_id_key)
@@ -198,6 +236,8 @@ def default_cookies
       # ==== Parameters
       # valueString:: The value of the session cookie; either the session id or the actual encoded data.
       # optionsHash:: Cookie options like domain, path and expired.
+      # 
+      # @api private
       def set_session_cookie_value(value, options = {})
         defaults = {}
         defaults[:expires] = Time.now + _session_expiry if _session_expiry  0
@@ -207,12 +247,16 @@ def set_session_cookie_value(value, options = {})
 
       # ==== Returns
       # String:: The value of the session cookie; either the session id or the actual encoded data.
+      # 
+      # @api private
       def session_cookie_value
         cookies[_session_id_key]
       end
       alias :session_id :session_cookie_value
       
       # Destroy the session cookie.
+      # 
+      # @api private
       def destroy_session_cookie
         cookies.delete(_session_id_key)
       end</field>
	<field name="commit_file_name">container.rb</field>
	<field name="commit_diff">@@ -1,41 +1,49 @@
 module Merb
   class SessionContainer  Mash
-  
+    
     class_inheritable_accessor :session_store_type
     cattr_accessor :subclasses 
     self.subclasses = []
-  
+    
     attr_reader :session_id
     attr_accessor :needs_new_cookie
-  
+    
     class  self
-  
+      
       # Register the subclass as an available session store type.
       def inherited(klass)
         self.subclasses  klass.to_s
         super
       end
-
+      
       # Generates a new session ID and creates a new session.
       #
       # ==== Returns
       # SessionContainer:: The new session.
+      # 
+      # @api private
       def generate
       end
-    
+      
       # ==== Parameters
       # requestMerb::Request:: The Merb::Request that came in from Rack.
       #
+      # ==== Notes
+      # If no sessions were found, a new SessionContainer will be generated.
+      # 
       # ==== Returns
-      # SessionContainer:: a SessionContainer. If no sessions were found, 
-      # a new SessionContainer will be generated.
+      # SessionContainer:: a SessionContainer.
+      # 
+      # @api private
       def setup(request)
-      end    
-    
+      end
+      
     end
-  
+    
     # ==== Parameters
     # session_idString:: A unique identifier for this session.
+    # 
+    # @api private
     def initialize(session_id)
       @_destroy = false
       self.session_id = session_id
@@ -45,11 +53,13 @@ def initialize(session_id)
     #
     # Recreates the cookie with the default expiration time. Useful during log
     # in for pushing back the expiration date.
+    # 
+    # @api private
     def session_id=(sid)
       self.needs_new_cookie = (@session_id && @session_id != sid)
       @session_id = sid
     end
-  
+    
     # Teardown and/or persist the current session.
     #
     # If @_destroy is true, clear out the session completely, including
@@ -57,18 +67,24 @@ def session_id=(sid)
     #
     # ==== Parameters
     # requestMerb::Request:: The Merb::Request that came in from Rack.
+    # 
+    # @api private
     def finalize(request)
     end
-  
+    
     # Destroy the current session - clears data and removes session cookie.
+    # 
+    # @api private
     def clear!
       @_destroy = true
       self.clear
     end
-  
+    
     # Regenerate the session_id.
+    # 
+    # @api private
     def regenerate
     end
-
+    
   end
 end
\ No newline at end of file</field>
	<field name="commit_file_name">cookie.rb</field>
	<field name="commit_diff">@@ -1,7 +1,7 @@
 require 'base64'        # to convert Marshal.dump to ASCII
 require 'openssl'       # to generate the HMAC message digest
 module Merb
-
+  
   # If you have more than 4K of session data or don't want your data to be
   # visible to the user, pick another session store.
   #
@@ -19,31 +19,33 @@ class CookieSession  SessionContainer
     # TODO (maybe):
     # include request ip address
     # AES encrypt marshaled data
-
+    
     # Raised when storing more than 4K of session data.
     class CookieOverflow  StandardError; end
-
+    
     # Raised when the cookie fails its integrity check.
     class TamperedWithCookie  StandardError; end
-
+    
     # Cookies can typically store 4096 bytes.
     MAX = 4096
     DIGEST = OpenSSL::Digest::Digest.new('SHA1') # or MD5, RIPEMD160, SHA256?
-
+    
     attr_accessor :_original_session_data
-
+    
     # The session store type
     self.session_store_type = :cookie
-
+    
     class  self
       # Generates a new session ID and creates a new session.
       #
       # ==== Returns
       # SessionContainer:: The new session.
+      # 
+      # @api private
       def generate
         self.new(Merb::SessionMixin.rand_uuid, "", Merb::Request._session_secret_key)
       end
-
+      
       # Set up a new session on request: make it available on request instance.
       #
       # ==== Parameters
@@ -52,22 +54,26 @@ def generate
       # ==== Returns
       # SessionContainer:: a SessionContainer. If no sessions were found,
       # a new SessionContainer will be generated.
+      # 
+      # @api private
       def setup(request)
         session = self.new(Merb::SessionMixin.rand_uuid,
           request.session_cookie_value, request._session_secret_key)
         session._original_session_data = session.to_cookie
         request.session = session
       end
-
+      
     end
-
+    
     # ==== Parameters
     # session_idString:: A unique identifier for this session.
     # cookieString:: The raw cookie data.
     # secretString:: A session secret.
     #
     # ==== Raises
-    # ArgumentError:: Nil or blank secret.
+    # ArgumentError:: blank or insufficiently long secret.
+    # 
+    # @api private
     def initialize(session_id, cookie, secret)
       super session_id
       if secret.blank? || secret.length  16
@@ -78,7 +84,7 @@ def initialize(session_id, cookie, secret)
       @secret = secret
       self.update(unmarshal(cookie))
     end
-
+    
     # Teardown and/or persist the current session.
     #
     # If @_destroy is true, clear out the session completely, including
@@ -86,6 +92,8 @@ def initialize(session_id, cookie, secret)
     #
     # ==== Parameters
     # requestMerb::Request:: request object created from Rack environment.
+    # 
+    # @api private
     def finalize(request)
       if @_destroy
         request.destroy_session_cookie
@@ -95,10 +103,12 @@ def finalize(request)
     end
     
     # Regenerate the session_id.
+    # 
+    # @api private
     def regenerate
       self.session_id = Merb::SessionMixin.rand_uuid
     end
-
+    
     # Create the raw cookie string; includes an HMAC keyed message digest.
     #
     # ==== Returns
@@ -111,6 +121,8 @@ def regenerate
     # Session data is converted to a Hash first, since a container might
     # choose to marshal it, which would make it persist
     # attributes like 'needs_new_cookie', which it shouldn't.
+    # 
+    # @api private
     def to_cookie
       unless self.empty?
         data = self.serialize
@@ -123,24 +135,31 @@ def to_cookie
         value
       end
     end
-
+    
     private
-
+    
     # Generate the HMAC keyed message digest. Uses SHA1.
+    # 
+    # ==== Returns
+    # String:: an HMAC digest of the cookie data.
+    # 
+    # @api private
     def generate_digest(data)
       OpenSSL::HMAC.hexdigest(DIGEST, @secret, data)
     end
-
+    
     # Unmarshal cookie data to a hash and verify its integrity.
-    #
+    # 
     # ==== Parameters
     # cookie~to_s:: The cookie to unmarshal.
-    #
+    # 
     # ==== Raises
     # TamperedWithCookie:: The digests don't match.
-    #
+    # 
     # ==== Returns
     # Hash:: The stored session data.
+    # 
+    # @api private
     def unmarshal(cookie)
       if cookie.blank?
         {}
@@ -156,16 +175,26 @@ def unmarshal(cookie)
         unserialize(data)
       end
     end
-
+    
     protected
-
+    
     # Serialize current session data as a Hash.
     # Uses Base64 encoding for integrity.
+    # 
+    # ==== Returns
+    # String:: Base64 encoded dump of the session hash.
+    # 
+    # @api private
     def serialize
       Base64.encode64(Marshal.dump(self.to_hash)).chop
     end
-
+    
     # Unserialize the raw cookie data to a Hash
+    # 
+    # ==== Returns
+    # Hash:: the session hash Base64 decoded from the data dump.
+    # 
+    # @api private
     def unserialize(data)
       Marshal.load(Base64.decode64(data)) rescue {}
     end</field>
	<field name="commit_file_name">memcached.rb</field>
	<field name="commit_diff">@@ -28,33 +28,37 @@ class MemcacheSession  SessionStoreContainer
   end
   
   module MemcacheStore
-
+    
     # Make the Memcached gem conform to the SessionStoreContainer interface
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to retrieve.
     #
     # ==== Returns
     # ContainerSession:: The session corresponding to the ID.
+    # 
+    # @api private
     def retrieve_session(session_id)
       get("session:#{session_id}")
     end
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to set.
     # dataContainerSession:: The session to set.
+    # 
+    # @api private
     def store_session(session_id, data)
       set("session:#{session_id}", data)
     end
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to delete.
     def delete_session(session_id)
       delete("session:#{session_id}")
     end
-
+    
   end
-
+  
 end
 
 # For the memcached gem.</field>
	<field name="commit_file_name">memory.rb</field>
	<field name="commit_diff">@@ -34,9 +34,11 @@ def self.store
   
   # Used for handling multiple sessions stored in memory.
   class MemorySessionStore
-
+    
     # ==== Parameters
     # ttlFixnum:: Session validity time in seconds. Defaults to 1 hour.
+    # 
+    # @api private
     def initialize(ttl=nil)
       @sessions = Hash.new
       @timestamps = Hash.new
@@ -50,41 +52,51 @@ def initialize(ttl=nil)
     #
     # ==== Returns
     # ContainerSession:: The session corresponding to the ID.
+    # 
+    # @api private
     def retrieve_session(session_id)
       @mutex.synchronize {
         @timestamps[session_id] = Time.now
         @sessions[session_id]
       }
     end
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to set.
     # dataContainerSession:: The session to set.
+    # 
+    # @api private
     def store_session(session_id, data)
       @mutex.synchronize {
         @timestamps[session_id] = Time.now
         @sessions[session_id] = data
       }
     end
-
+    
     # ==== Parameters
     # session_idString:: ID of the session to delete.
+    # 
+    # @api private
     def delete_session(session_id)
       @mutex.synchronize {
         @timestamps.delete(session_id)
         @sessions.delete(session_id)
       }
     end
-
+    
     # Deletes any sessions that have reached their maximum validity.
+    # 
+    # @api private
     def reap_expired_sessions
       @timestamps.each do |session_id,stamp|
         delete_session(session_id) if (stamp + @session_ttl)  Time.now 
       end
       GC.start
     end
-
+    
     # Starts the timer that will eventually reap outdated sessions.
+    # 
+    # @api private
     def start_timer
       Thread.new do
         loop {</field>
	<field name="commit_file_name">store_container.rb</field>
	<field name="commit_diff">@@ -45,25 +45,31 @@ class SessionStoreContainer  SessionContainer
     self.session_store_type = :store
     
     class  self
-
+      
       # Generates a new session ID and creates a new session.
-      #
+      # 
       # ==== Returns
       # SessionStoreContainer:: The new session.
+      # 
+      # @api private
       def generate
         session = new(Merb::SessionMixin.rand_uuid)
         session.needs_new_cookie = true
         session
       end
-
-      # Setup a new session.
-      #
+      
+      # Setup a new session or retreive an existing session.
+      # 
       # ==== Parameters
       # requestMerb::Request:: The Merb::Request that came in from Rack.
-      #
+      # 
+      # ==== Notes
+      # If no sessions were found, a new SessionContainer will be generated.
+      # 
       # ==== Returns
-      # SessionContainer:: a SessionContainer. If no sessions were found, 
-      # a new SessionContainer will be generated.
+      # SessionContainer:: a SessionContainer.
+      # 
+      # @api private
       def setup(request)
         session = retrieve(request.session_id)
         request.session = session
@@ -84,6 +90,8 @@ def setup(request)
       # ==== Notes
       # If there are persisted exceptions callbacks to execute, they all get executed
       # when Memcache library raises an exception.
+      # 
+      # @api private
       def retrieve(session_id)
         unless session_id.blank?
           begin
@@ -121,6 +129,8 @@ def retrieve(session_id)
     # The data (self) is converted to a Hash first, since a container might 
     # choose to do a full Marshal on the data, which would make it persist 
     # attributes like 'needs_new_cookie', which it shouldn't.
+    # 
+    # @api private
     def finalize(request)
       if @_destroy
         store.delete_session(self.session_id)
@@ -138,8 +148,10 @@ def finalize(request)
         end
       end
     end
-
+    
     # Regenerate the session ID.
+    # 
+    # @api private
     def regenerate
       store.delete_session(self.session_id)
       self.session_id = Merb::SessionMixin.rand_uuid</field>
	<field name="commit_file_name">worker.rb</field>
	<field name="commit_diff">@@ -3,14 +3,24 @@ class Worker
     
     attr_accessor :thread
     
+    # ==== Returns
+    # Merb::Worker:: instance of a worker.
+    # 
+    # @api private
     def self.start
       new
     end
     
+    # Creates a new worker thread that loops over the work queue.
+    # 
+    # @api private
     def initialize
       @thread = Thread.new { loop { process_queue } }
     end
     
+    # Processes tasks in the Merb::Dispatcher.work_queue.
+    # 
+    # @api private
     def process_queue
       begin
         while blk = Merb::Dispatcher.work_queue.pop
@@ -25,8 +35,8 @@ def process_queue
       rescue Exception = e
         Merb.logger.warn! %Q!Worker Thread Crashed with Exception:\n#{Merb.exception(e)}\nRestarting Worker Thread!
         retry
-      end    
+      end
     end
     
   end
-end    
\ No newline at end of file
+end
\ No newline at end of file</field>
	<field name="commit_file_name">erubis.rb</field>
	<field name="commit_diff">@@ -1,5 +1,9 @@
 require 'erubis'
 module Erubis
+  # This adds support for embedding the return value of a block call:
+  #   %= foo do %...% end =%
+  #
+  # @api private
   module Basic::Converter
     def convert_input(src, input)
       pat = @pattern</field>
	<field name="commit_file_name">logger.rb</field>
	<field name="commit_diff">@@ -1,16 +1,5 @@
 # Merb::Logger = Extlib::Logger
 
-class Merb::Logger  Extlib::Logger
-  def verbose!(message, level = :warn)
-    send("#{level}!", message) if Merb::Config[:verbose]
-  end
-
-  def verbose(message, level = :warn)
-    send(level, message) if Merb::Config[:verbose]
-  end
-end
-
-# require "time" # httpdate
 # ==== Public Merb Logger API
 #
 # To replace an existing logger with a new one:
@@ -45,168 +34,37 @@ def verbose(message, level = :warn)
 #   Merb::Logger.new(log{String, IO},level{Symbol, String})
 module Merb
 
-  class Logger
-
-    attr_accessor :level
-    attr_accessor :delimiter
-    attr_accessor :auto_flush
-    attr_reader   :buffer
-    attr_reader   :log
-    attr_reader   :init_args
-
-    # ==== Notes
-    # Ruby (standard) logger levels:
-    # :fatal:: An unhandleable error that results in a program crash
-    # :error:: A handleable error condition
-    # :warn:: A warning
-    # :info:: generic (useful) information about system operation
-    # :debug:: low-level information for developers
-    Levels = Mash.new({
-      :fatal = 7,
-      :error = 6,
-      :warn  = 4,
-      :info  = 3,
-      :debug = 0
-    }) unless const_defined?(:Levels)
-
-    @@mutex = {}
+  class Logger  Extlib::Logger
 
-    private
-
-    # Readies a log for writing.
+    # Appends a message to the log if the specified log level is at least as high as
+    # the log level of the logger if Merb::Config[:verbose]. Then flushes the log 
+    # buffer to disk.
     #
     # ==== Parameters
-    # logIO, String:: Either an IO object or a name of a logfile.
-    def initialize_log(log)
-      close if @log # be sure that we don't leave open files laying around.
-
-      if log.respond_to?(:write)
-        @log = log
-      elsif File.exist?(log)
-        @log = open(log, (File::WRONLY | File::APPEND))
-        @log.sync = true
-      else
-        FileUtils.mkdir_p(File.dirname(log)) unless File.directory?(File.dirname(log))
-        @log = open(log, (File::WRONLY | File::APPEND | File::CREAT))
-        @log.sync = true
-        @log.write("#{Time.now.httpdate} #{delimiter} info #{delimiter} Logfile created\n")
-      end
-    end
-
-    public
-
-    # To initialize the logger you create a new object, proxies to set_log.
+    # messageString:: The message to be logged.
+    # levelSymbol:: The level at which to log. Default is :warn.
     #
-    # ==== Parameters
-    # *args:: Arguments to create the log from. See set_logs for specifics.
-    def initialize(*args)
-      set_log(*args)
-    end
-
-    # Replaces an existing logger with a new one.
+    # ==== Returns
+    # self:: The logger object for chaining.
     #
-    # ==== Parameters
-    # logIO, String:: Either an IO object or a name of a logfile.
-    # log_level~to_sym::
-    #   The log level from, e.g. :fatal or :info. Defaults to :error in the
-    #   production environment and :debug otherwise.
-    # delimiterString::
-    #   Delimiter to use between message sections. Defaults to " ~ ".
-    # auto_flushBoolean::
-    #   Whether the log should automatically flush after new messages are
-    #   added. Defaults to false.
-    def set_log(stream = Merb::Config[:log_stream],
-      log_level = Merb::Config[:log_level],
-      delimiter = Merb::Config[:log_delimiter],
-      auto_flush = Merb::Config[:log_auto_flush])
-
-      @buffer                   = []
-      @delimiter                = delimiter
-      @auto_flush               = auto_flush
-
-      if Levels[log_level]
-        @level                  = Levels[log_level]
-      else
-        @level                  = log_level
-      end
-
-      @log                      = stream
-      @mutex = (@@mutex[@log] ||= Mutex.new)
-    end
-
-    # Flush the entire buffer to the log object.
-    def flush
-      return unless @buffer.size  0
-      @mutex.synchronize do
-        @log.write(@buffer.slice!(0..-1).to_s)
-      end
-    end
-
-    # Close and remove the current log object.
-    def close
-      flush
-      @log.close if @log.respond_to?(:close) && !@log.tty?
-      @log = nil
+    # @api plugin
+    def verbose!(message, level = :warn)
+      send("#{level}!", message) if Merb::Config[:verbose]
     end
 
-    # Appends a message to the log. The methods yield to an optional block and
-    # the output of this block will be appended to the message.
+    # Appends a message to the log if the specified log level is at least as high as
+    # the log level of the logger if Merb::Config[:verbose].
     #
     # ==== Parameters
-    # stringString:: The message to be logged. Defaults to nil.
+    # messageString:: The message to be logged.
+    # levelSymbol:: The level at which to log. Default is :warn.
     #
     # ==== Returns
-    # String:: The resulting message added to the log file.
-    def (string = nil)
-      message = ""
-      message  delimiter
-      message  string if string
-      message  "\n" unless message[-1] == ?\n
-      @buffer  message
-      flush if @auto_flush
-
-      message
-    end
-    alias :push :
-
-    # Generate the logging methods for Merb.logger for each log level.
-    Levels.each_pair do |name, number|
-      class_eval -LEVELMETHODS, __FILE__, __LINE__
-
-      # Appends a message to the log if the log level is at least as high as
-      # the log level of the logger.
-      #
-      # ==== Parameters
-      # stringString:: The message to be logged. Defaults to nil.
-      #
-      # ==== Returns
-      # self:: The logger object for chaining.
-      def #{name}(message = nil)
-        self  message if #{number} = level
-        self
-      end
-
-      # Appends a message to the log if the log level is at least as high as
-      # the log level of the logger. The bang! version of the method also auto
-      # flushes the log buffer to disk.
-      #
-      # ==== Parameters
-      # stringString:: The message to be logged. Defaults to nil.
-      #
-      # ==== Returns
-      # self:: The logger object for chaining.
-      def #{name}!(message = nil)
-        self  message if #{number} = level
-        flush if #{number} = level
-        self
-      end
-
-      # ==== Returns
-      # Boolean:: True if this level will be logged by this logger.
-      def #{name}?
-        #{number} = level
-      end
-      LEVELMETHODS
+    # self:: The logger object for chaining.
+    #
+    # @api plugin
+    def verbose(message, level = :warn)
+      send(level, message) if Merb::Config[:verbose]
     end
 
   end</field>
	<field name="commit_file_name">plugins.rb</field>
	<field name="commit_diff">@@ -2,10 +2,15 @@ module Merb
 
   module Plugins
 
+    # Returns the configuration settings hash for plugins. This is prepopulated from
+    # Merb.root / "config/plugins.yml" if it is present.
+    #
     # ==== Returns
     # Hash::
     #   The configuration loaded from Merb.root / "config/plugins.yml" or, if
     #   the load fails, an empty hash whose default value is another Hash.
+    #
+    # @api plugin
     def self.config
       @config ||= begin
         # this is so you can do Merb.plugins.config[:helpers][:awesome] = "bar"
@@ -25,12 +30,16 @@ def self.config
 
     # ==== Returns
     # Array(String):: All Rakefile load paths Merb uses for plugins.
+    #
+    # @api plugin
     def self.rakefiles
       Merb.rakefiles
     end
     
     # ==== Returns
     # Array(String):: All Generator load paths Merb uses for plugins.
+    #
+    # @api plugin
     def self.generators
       Merb.generators
     end
@@ -49,6 +58,8 @@ def self.generators
     # if defined(Merb::Plugins)
     #   Merb::Plugins.add_rakefiles "merb_sequel" / "merbtasks"
     # end
+    #
+    # @api plugin
     def self.add_rakefiles(*rakefiles)
       Merb.add_rakefiles(*rakefiles)
     end
@@ -60,6 +71,8 @@ def self.add_rakefiles(*rakefiles)
     #
     # This is the recommended way to register your plugin's generators
     # in Merb.
+    #
+    # @api plugin
     def self.add_generators(*generators)
       Merb.add_generators(*generators)
     end</field>
	<field name="commit_file_name">adapter.rb</field>
	<field name="commit_diff">@@ -5,6 +5,7 @@ module Rack
     class Adapter
 
       class  self
+        # Get a rack adapter by id. 
         # ==== Parameters
         # idString:: The identifier of the Rack adapter class to retrieve.
         #</field>
	<field name="commit_file_name">abstract.rb</field>
	<field name="commit_diff">@@ -2,7 +2,51 @@ module Merb
   module Rack
     class AbstractAdapter
 
+      # This method is designed to be overridden in a rack adapter.  It 
+      # will be called to start a server created with the new_server method.
+      # This is called from the AbstractAdapter start method.
+      #
+      # @api plugin
+      # @overridable
+      def self.start_server
+        raise NotImplemented
+      end
+      
+      # This method is designed to be overridden in a rack adapter.  It will
+      # be called to create a new instance of the server for the adapter to 
+      # start.  The adapter should attempt to bind to a port at this point. 
+      # This is called from the AbstractAdapter start method.
+      #
+      # ==== Parameters
+      # portInteger:: The port the server should listen on
+      #
+      # @api plugin
+      # @overridable
+      def self.new_server(port)
+        raise NotImplemented
+      end
+      
+      # This method is designed to be overridden in a rack adapter.  It will
+      # be called to stop the adapter server.  
+      #
+      # ==== Parameters
+      # statusInteger:: The exit status the adapter should exit with. 
+      #
+      # ==== Returns
+      # Boolean:: True if the server was properly stopped.  
+      #
+      # @api plugin
+      # @overridable
+      def self.stop(status)
+        raise NotImplemented
+      end
+
       # Spawn a new worker process at a port.
+      #
+      # ==== Parameters
+      # portInteger:: The port to start the worker process on. 
+      #
+      # @api private
       def self.spawn_worker(port)
         worker_pid = Kernel.fork
         start_at_port(port, @opts) unless worker_pid
@@ -15,6 +59,17 @@ def self.spawn_worker(port)
       end
 
       # The main start method for bootloaders that support forking.
+      # This method launches the adapters which inherit using the 
+      # new_server and start_server methods.  This method should not
+      # be overridden in adapters which want to fork.  
+      #
+      # ==== Parameters
+      # optsHash:: A hash of options
+      #   socket: the socket to bind to
+      #   port: the port to bind to
+      #   cluster: the number 
+      #
+      # @api private
       def self.start(opts={})
         @opts = opts
         $WORKERS ||= []
@@ -88,6 +143,14 @@ def self.start(opts={})
 
       end
 
+      # Fork a server on the specified port and start the app.
+      #
+      # ==== Parameters
+      # portInteger:: The port to start the server on
+      # optsHash:: The hash of options, defaults to the @opts 
+      #   instance variable.  
+      #
+      # @api private
       def self.start_at_port(port, opts = @opts)
         at_exit do
           Merb::Server.remove_pid(port)
@@ -167,11 +230,24 @@ def self.start_at_port(port, opts = @opts)
         start_server
       end
 
-      # This can be overridden in adapters, but shouldn't need to be.
+      # Exit the process with the specified status.  
+      #
+      # ==== Parameters
+      # statusInteger:: The exit code of the process.
+      # 
+      # @api private
       def self.exit_process(status = 0)
         exit(status)
       end
 
+      # Set the process title.
+      #
+      # ==== Parameters
+      # whoamiSymbol:: Either :spawner for the master process or :worker for any of the worker
+      #   processes. 
+      # portInteger:: The base port that the app is running on. 
+      #
+      # @api private
       def self.process_title(whoami, port)
         name = Merb::Config[:name]
         app  = "merb#{" : #{name}" if (name && name != "merb")}"</field>
	<field name="commit_file_name">irb.rb</field>
	<field name="commit_diff">@@ -1,15 +1,60 @@
 module Merb
   module Rack
     class Console
-      # ==== Parameters
-      # name~to_sym, Hash:: The name of the route to generate.
-      # paramsHash:: The params to use in the route generation.
+      # There are three possible ways to use this method.  First, if you have a named route, 
+      # you can specify the route as the first parameter as a symbol and any paramters in a 
+      # hash.  Second, you can generate the default route by just passing the params hash, 
+      # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+      # allows you to specify the parameters to a named route in the order they appear in the 
+      # router.  
+      #
+      # ==== Parameters(Named Route)
+      # nameSymbol:: 
+      #   The name of the route. 
+      # argsHash:: 
+      #   Parameters for the route generation.
+      #
+      # ==== Parameters(Default Route)
+      # argsHash:: 
+      #   Parameters for the route generation.  This route will use the default route. 
+      #
+      # ==== Parameters(Anonymous Parameters)
+      # nameSymbol::
+      #   The name of the route.  
+      # argsArray:: 
+      #   An array of anonymous parameters to generate the route
+      #   with. These parameters are assigned to the route parameters
+      #   in the order that they are passed.
       #
       # ==== Returns
       # String:: The generated URL.
       #
-      # ==== Alternatives
-      # If name is a hash, it will be merged with params.
+      # ==== Examples
+      # Named Route
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, :title = "new_article")
+      #
+      # Default Route
+      #
+      # Merb::Router.prepare do
+      #   default_routes
+      # end
+      #
+      # url(:controller = "articles", :action = "new")
+      #
+      # Anonymous Paramters
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, 2008, 10, "test_article")
+      #
+      # @api public
       def url(name, *args)
         args  {}
         Merb::Router.url(name, *args)</field>
	<field name="commit_file_name">application.rb</field>
	<field name="commit_diff">@@ -2,6 +2,16 @@ module Merb
   module Rack
     class Application
       
+      # The main rack application call method.  This is the entry point from rack (and the webserver) 
+      # to your application.  
+      #
+      # ==== Parameters
+      # envHash:: A rack request of parameters.  
+      #
+      # ==== Returns
+      # Array:: A rack response of [statusInteger, headersHash, bodyString, Stream]
+      #
+      # @api private
       def call(env) 
         begin
           rack_response = ::Merb::Dispatcher.handle(Merb::Request.new(env))
@@ -18,6 +28,18 @@ def call(env)
         rack_response
       end
 
+      # Determines whether this request is a "deferred_action", usually a long request. 
+      # Rack uses this method to detemine whether to use an evented request or a deferred 
+      # request in evented rack handlers.  
+      #
+      # ==== Parameters
+      # envHash:: The rack request
+      #
+      # ==== Returns
+      # Boolean::
+      #   True if the request should be deferred.  
+      #
+      # @api private
       def deferred?(env)
         path = env[Merb::Const::PATH_INFO] ? env[Merb::Const::PATH_INFO].chomp('/') : ""
         if path =~ Merb.deferred_actions</field>
	<field name="commit_file_name">helpers.rb</field>
	<field name="commit_diff">@@ -2,6 +2,20 @@ module Merb
   module Rack
     module Helpers
       
+      # A helper to build a rack response which implements a redirect.  The status will be set to 
+      # the passed in status if passed.  If you pass in permanent it will be a 301, permanent redirect,
+      # otherwise it defaults to a temporary 302 redirect.  
+      #
+      # ==== Parameters
+      # url~to_s:: The url to redirect to.
+      # optionsHash:: A hash of options for the redirect
+      #   status: The status code to use for the redirect
+      #   permanent:  True if this is a permanent redirect (301)
+      #
+      # ==== Returns
+      # Array:: A rack response to redirect to the specified url.  
+      #
+      # @api plugin
       def self.redirect(url, options = {})
         # Build the rack array
         status   = options.delete(:status)</field>
	<field name="commit_file_name">server.rb</field>
	<field name="commit_diff">@@ -18,6 +18,8 @@ class  self
       # ==== Alternatives
       # If cluster is left out, then one process will be started. This process
       # will be daemonized if Merb::Config[:daemonize] is true.
+      #
+      # @api private
       def start(port, cluster=nil)
 
         @port = port
@@ -47,6 +49,8 @@ def start(port, cluster=nil)
       # ==== Returns
       # Boolean::
       #   True if Merb is running on the specified port.
+      #
+      # @api private
       def alive?(port)
         puts "About to check if port #{port} is alive..." if Merb::Config[:verbose]
         pidfile = pid_file(port)
@@ -68,6 +72,8 @@ def alive?(port)
       # ==== Alternatives
       # If you pass "all" as the port, the signal will be sent to all Merb
       # processes.
+      #
+      # @api private
       def kill(port, sig="INT")
         Merb::BootLoader::BuildFramework.run
         if sig == 9 && port == "main"
@@ -90,6 +96,8 @@ def kill(port, sig="INT")
         end
       end
 
+      # Kills the process pointed at by the provided pid file.
+      # @api private
       def kill_pid(sig, file)
         begin
           pid = File.read(file).chomp.to_i
@@ -118,6 +126,8 @@ def kill_pid(sig, file)
 
       # ==== Parameters
       # port~to_s:: The port of the Merb process to daemonize.
+      #
+      # @api private
       def daemonize(port)
         puts "About to fork..." if Merb::Config[:verbose]
         fork do
@@ -142,6 +152,9 @@ def daemonize(port)
         Merb.fatal! "Daemonized mode is not supported on your platform", e
       end
 
+      # Starts up Merb by running the bootloader and starting the adapter.
+      #
+      # @api private
       def bootup
         Merb.trap('TERM') {
           Merb::BootLoader::LoadClasses.reap_workers if Merb::Config[:fork_for_class_load]
@@ -154,6 +167,9 @@ def bootup
         Merb.adapter.start(Merb::Config.to_hash)
       end
 
+      # Change process user/group to those specified in Merb::Config.
+      #
+      # @api private
       def change_privilege
         if Merb::Config[:user] && Merb::Config[:group]
           Merb.logger.verbose! "About to change privilege to group " \
@@ -179,6 +195,8 @@ def change_privilege
       # ==== Alternatives
       # If Merb::Config[:pid_file] has been specified, that will be used
       # instead of the port based PID file.
+      #
+      # @api private
       def remove_pid_file(port)
         pidfile = pid_file(port)
         if File.exist?(pidfile)
@@ -198,14 +216,32 @@ def remove_pid_file(port)
       # ==== Alternatives
       # If Merb::Config[:pid_file] has been specified, that will be used
       # instead of the port based PID file.
+      #
+      # @api private
       def store_pid(port)
         store_details(port)
       end
 
+      # Delete the pidfile for the specified port.
+      #
+      # @api private
       def remove_pid(port)
         FileUtils.rm(pid_file(port)) if File.file?(pid_file(port))
       end
 
+      # Stores a PID file on the filesystem.
+      # This uses :pid_file options from configuration when provided
+      # or merb.port.pid in log directory by default.
+      #
+      # ==== Parameters
+      # port~to_s::
+      #   The port of the Merb process to whom the the PID file belongs to.
+      #
+      # ==== Alternatives
+      # If Merb::Config[:pid_file] has been specified, that will be used
+      # instead of the port based PID file.
+      #
+      # @api private
       def store_details(port = nil)
         file = pid_file(port)
         begin
@@ -233,6 +269,8 @@ def store_details(port = nil)
       # String::
       #   Location of pid file for specified port. If clustered and pid_file option
       #   is specified, it adds the port value to the path.
+      #
+      # @api private
       def pid_file(port)
         pidfile = Merb::Config[:pid_file] || (Merb.log_path / "merb.%s.pid")
         pidfile % port
@@ -243,6 +281,8 @@ def pid_file(port)
       # ==== Returns
       # Array::
       #   List of pid file paths. If not clustered, array contains a single path.
+      #
+      # @api private
       def pid_files
         if Merb::Config[:pid_file]
           if Merb::Config[:cluster]
@@ -263,6 +303,8 @@ def pid_files
       #
       # ==== Alternatives
       # If group is left out, the user will be used as the group.
+      #
+      # @api private
       def _change_privilege(user, group=user)
 
         Merb.logger.warn! "Changing privileges to #{user}:#{group}"
@@ -297,6 +339,7 @@ def _change_privilege(user, group=user)
         false
       end
 
+      # @api private
       def add_irb_trap
         Merb.trap('INT') do
           if @interrupted</field>
	<field name="commit_file_name">request_helper.rb</field>
	<field name="commit_diff">@@ -36,7 +36,7 @@ def request(uri, env = {})
         end
 
         if env[:params]
-          uri  "&#{Merb::Request.params_to_query_string(env.delete(:body_params))}"
+          uri  "?#{Merb::Request.params_to_query_string(env.delete(:params))}"
         end
 
         if @__cookie__</field>
	<field name="commit_file_name">route_helper.rb</field>
	<field name="commit_diff">@@ -3,14 +3,60 @@ module Test
     module RouteHelper
       include RequestHelper
       
-      # Mimics the url method available to controllers.
+      # There are three possible ways to use this method.  First, if you have a named route, 
+      # you can specify the route as the first parameter as a symbol and any paramters in a 
+      # hash.  Second, you can generate the default route by just passing the params hash, 
+      # just passing the params hash.  Finally, you can use the anonymous parameters.  This 
+      # allows you to specify the parameters to a named route in the order they appear in the 
+      # router.  
       #
-      # ==== Parameters
-      # name~to_sym:: The name of the URL to generate.
-      # paramsHash:: Parameters for the route generation.
+      # ==== Parameters(Named Route)
+      # nameSymbol:: 
+      #   The name of the route. 
+      # argsHash:: 
+      #   Parameters for the route generation.
+      #
+      # ==== Parameters(Default Route)
+      # argsHash:: 
+      #   Parameters for the route generation.  This route will use the default route. 
+      #
+      # ==== Parameters(Anonymous Parameters)
+      # nameSymbol::
+      #   The name of the route.  
+      # argsArray:: 
+      #   An array of anonymous parameters to generate the route
+      #   with. These parameters are assigned to the route parameters
+      #   in the order that they are passed.
       #
       # ==== Returns
       # String:: The generated URL.
+      #
+      # ==== Examples
+      # Named Route
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, :title = "new_article")
+      #
+      # Default Route
+      #
+      # Merb::Router.prepare do
+      #   default_routes
+      # end
+      #
+      # url(:controller = "articles", :action = "new")
+      #
+      # Anonymous Paramters
+      #
+      # Merb::Router.prepare do
+      #   match("/articles/:year/:month/:title").to(:controller = :articles, :action = :show).name("articles")
+      # end
+      #
+      # url(:articles, 2008, 10, "test_article")
+      #
+      # @api public
       def url(*args)
         args  (@request_params || {})
         Merb::Router.url(*args)</field>
	<field name="commit_file_name">kernel_spec.rb</field>
	<field name="commit_diff">@@ -1,19 +1,5 @@
 require File.dirname(__FILE__) + '/../../spec_helper'
 
-describe "Kernel#require" do
-  before do
-    @logger = StringIO.new
-  end
-
-  it "should be able to require and throw a useful error message" do
-    Kernel.stub!(:require).with("redcloth").and_raise(LoadError)
-    Merb.logger.should_receive(:error!).with("foo")
-    Kernel.rescue_require("redcloth", "foo")
-  end
-end
-
-
-
 describe "Kernel#caller" do
   it "should be able to determine caller info" do
     __caller_info__.should be_kind_of(Array)
@@ -71,7 +57,7 @@
     end
   end
 
-  it "deferres load of dependencies given as Hash" do
+  it "defers load of dependencies given as Hash" do
     self.should_receive(:dependency).with("hpricot", "0.6").and_return(true)
     self.should_receive(:dependency).with("rake", "0.8.1").and_return(true)
 </field>
	<field name="commit_file_name">bootloader_spec.rb</field>
	<field name="commit_diff">@@ -5,14 +5,16 @@
   it "should default to rack config (rack.rb)" do
     options = {:merb_root = File.dirname(__FILE__) / 'fixture'}
     Merb::Config.setup(options)
-    app = Merb::BootLoader::RackUpApplication.run
+    Merb::BootLoader::RackUpApplication.run
+    app = Merb::Config[:app]
     app.class.should == Merb::Rack::Static
   end
 
   it "should use rackup config that we specified" do
     options = {:rackup = File.dirname(__FILE__) / 'fixture' / 'config' / 'black_hole.rb'}
     Merb::Config.setup(options)
-    app = Merb::BootLoader::RackUpApplication.run
+    Merb::BootLoader::RackUpApplication.run
+    app = Merb::Config[:app]
     app.class.should == Rack::Adapter::BlackHole
 
     env = Rack::MockRequest.env_for("/black_hole")</field>
	<field name="commit_file_name">logger_spec.rb</field>
	<field name="commit_diff">@@ -21,6 +21,14 @@
 
 describe Merb::Logger do
 
+  describe "Levels" do
+    it "should have the same entries as Extlib::Logger::Levels" do
+      Extlib::Logger::Levels.each do |level, value|
+        Merb::Logger::Levels[level].should == value
+      end
+    end
+  end
+
   describe "#new" do
     it "should call set_log with the arguments it was passed." do
       logger = Merb::Logger.allocate # create an object sans initialization
@@ -41,6 +49,12 @@
       Merb.logger.level.should == 4
     end
 
+    it "should set the log level to a specific numeric value when that value is set into Mer" do
+      Merb::Config[:log_level] = 5
+      Merb.reset_logger!
+      Merb.logger.level.should == 5
+    end
+
     it "should set the log level to :debug (0) when Merb.environment is development" do
       Merb.environment = "development"
       Merb::Config.delete(:log_level)
@@ -280,4 +294,81 @@ def set_level(level)
       Merb.logger.should log_with_method(:fatal)
     end
   end # #fatal
+  
+  describe "#verbose" do
+    before do
+      @stream = Merb::Config[:log_stream] = StringIO.new
+      Merb.reset_logger!
+    end
+    
+    describe "when Merb::Config[:verbose] is false" do
+      it "should not log any messages" do
+        Merb::Config[:verbose] = false
+        Merb::Config[:log_level] = :debug
+        Merb.logger.verbose("message", :fatal)
+        Merb.logger.flush
+        
+        Merb.logger.log.string.should_not include("message")
+      end
+    end
+    
+    describe "when Merb::Config[:verbose] is true" do
+      before do
+        Merb::Config[:verbose] = true
+        Merb::Config[:log_level] = :debug
+      end
+
+      it "adds to the buffer with error level" do
+        set_level(:error)
+        Merb.logger.verbose("message", :error)
+        Merb.logger.flush
+        Merb.logger.log.string.should include("message")
+      end
+
+      it "adds to the buffer with fatal level" do
+        set_level(:fatal)
+        Merb.logger.verbose("message", :error)
+        Merb.logger.flush
+        Merb.logger.log.string.should_not include("message")
+      end
+      
+    end
+  end
+  
+  describe "#verbose!" do
+    before do
+      @stream = Merb::Config[:log_stream] = StringIO.new
+      Merb.reset_logger!
+    end
+    
+    describe "when Merb::Config[:verbose] is false" do
+      it "should not log any messages" do
+        Merb::Config[:verbose] = false
+        Merb::Config[:log_level] = :debug
+        Merb.logger.verbose!("message", :fatal)
+        Merb.logger.log.string.should_not include("message")
+      end
+    end
+    
+    describe "when Merb::Config[:verbose] is true" do
+      before do
+        Merb::Config[:verbose] = true
+        Merb::Config[:log_level] = :debug
+      end
+
+      it "adds to the buffer with error level" do
+        set_level(:error)
+        Merb.logger.verbose!("message", :error)
+        Merb.logger.log.string.should include("message")
+      end
+
+      it "adds to the buffer with fatal level" do
+        set_level(:fatal)
+        Merb.logger.verbose!("message", :error)
+        Merb.logger.log.string.should_not include("message")
+      end
+      
+    end
+  end
+  
 end # Merb::Logger</field>
	<field name="commit_sha">1c01aa36a766874102d8deeb8b481046656b7753</field>
	<field name="commit_message">Merge branch 'master' of git@github.com:wycats/merb-core</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-11T06:16:41Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-11T06:16:41Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_file_name">request_helper.rb</field>
	<field name="commit_diff">@@ -36,7 +36,7 @@ def request(uri, env = {})
         end
 
         if env[:params]
-          uri  "&#{Merb::Request.params_to_query_string(env.delete(:body_params))}"
+          uri  "?#{Merb::Request.params_to_query_string(env.delete(:params))}"
         end
 
         if @__cookie__</field>
	<field name="commit_sha">284933f51f42df41d2ddf42092f925f247640751</field>
	<field name="commit_message">Fixes given again</field>
	<field name="commit_author_name">Yehuda Katz</field>
	<field name="commit_author_date">2008-10-11T06:16:22Z</field>
	<field name="commit_author_email">wycats@gmail.com</field>
	<field name="commit_committer_name">Yehuda Katz</field>
	<field name="commit_committer_date">2008-10-11T06:16:22Z</field>
	<field name="commit_committer_email">wycats@gmail.com</field>
	<field name="commit_file_name">rspec.rb</field>
	<field name="commit_diff">@@ -7,7 +7,7 @@ def given(*args, &example_group_block)
     params[:shared] = true
     
     describe(*args) do
-      before(:each) do
+      prepend_before(:each) do
         self.instance_eval(&example_group_block)
       end
     end</field>
	<field name="filename">merb-core</field>
	<field name="filename_full">.\merb-core</field>
	<field name="filename">README</field>
	<field name="filename_full">.\merb-core/README</field>
</doc>
</add>